<?php
/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface UserRegistrationServiceIf {
  /**
   * Simple, one step registration.
   * Creates user profile and opens session with 'guest' role to user.
   * 
   * @param \UserRegistrationForm $userRegistrationForm
   * @return \AuthSession Данные сессии, которая создается в результате регистрации или аутентификации.
   * Также данные сессии можно получить (без продления даты expireDate) методом getAuthSession() или методом refreshAuthSession() (с продлением даты expireDate)
   * 
   * @throws \AuthException If AuthServer rejects registration, e.g. cause login is already exists or password does not met security conditions. TODO describe possible keys
   * 
   * @throws \PreconditionException Common validation errors: TODO describe possible keys
   * 
   * @throws \IbankServerException Any other system error
   * 
   * @throws \ContragentIsActivatedTException If contragent already have activated profile
   * 
   * @throws \IbankIntegrationLayerException if any communication errors with Auth Server
   * 
   */
  public function registerUser(\UserRegistrationForm $userRegistrationForm);
  /**
   * Registration with mandatory contragent binding.
   * Очікується PreconditionException, якщо дата народження невалідна.
   * AuthException - happen when by the right format conditions was not found contragent record
   * ContragentIsActivatedTException - якщо контрагент вже активував свій профіль.
   * IbankServerException - у випадку непередбачуваної ситуації
   * IbankIntegrationLayerException - happen when problems detected on IL side
   * 
   * @param \UserRegistrationForm $userRegistrationForm
   * @param \ContragentToUserBindingForm $contragentBindingForm
   * @return \AuthSession Данные сессии, которая создается в результате регистрации или аутентификации.
   * Также данные сессии можно получить (без продления даты expireDate) методом getAuthSession() или методом refreshAuthSession() (с продлением даты expireDate)
   * 
   * @throws \PreconditionException
   * @throws \AuthException
   * @throws \ContragentIsActivatedTException
   * @throws \IbankServerException
   * @throws \IbankIntegrationLayerException
   */
  public function requestUserRegistration(\UserRegistrationForm $userRegistrationForm, \ContragentToUserBindingForm $contragentBindingForm);
  /**
   * Закінченн 2фазної реєстрації, використовується токен, отриманий в requestUserRegistration
   * AuthException - якщо користувач з таким логіном вже існує
   * WrongSessionException - якщо невалідний токен, або термін його дії вибіг
   * PreconditionException - якщо пароль не співпадає з підтвердженням
   * 
   * @param string $token
   * @param string $login
   * @param string $password
   * @param string $confirmPassword
   * @param \Attributes $attr
   * @return \AuthSession Данные сессии, которая создается в результате регистрации или аутентификации.
   * Также данные сессии можно получить (без продления даты expireDate) методом getAuthSession() или методом refreshAuthSession() (с продлением даты expireDate)
   * 
   * @throws \AuthException
   * @throws \WrongSessionException
   * @throws \PreconditionException
   * @throws \IbankIntegrationLayerException
   */
  public function finishUserRegistration($token, $login, $password, $confirmPassword, \Attributes $attr);
  /**
   * Binding the Contragent to existing User in system.
   * Prerequirments:
   * User account must be already register at the system.
   * 
   * AuthException - when the user already bind to the contragent and have activated ShuratyRecord
   * WrongSessionException
   * PreconditionException
   * IbankIntegrationLayerException
   * IbankServerException
   * 
   * @param string $token
   * @param \ContragentToUserBindingForm $contragentToUserBindingForm
   * @return \AuthSession Данные сессии, которая создается в результате регистрации или аутентификации.
   * Также данные сессии можно получить (без продления даты expireDate) методом getAuthSession() или методом refreshAuthSession() (с продлением даты expireDate)
   * 
   * @throws \AuthException
   * @throws \WrongSessionException
   * @throws \PreconditionException
   * @throws \IbankIntegrationLayerException
   * @throws \IbankServerException
   */
  public function bindContragentToUser($token, \ContragentToUserBindingForm $contragentToUserBindingForm);
  /**
   * 
   * 
   * @param string $token
   * @param string $email
   * @return \Challenge
   * @throws \AuthException
   * @throws \WrongSessionException
   * @throws \PreconditionException Common validation errors: TODO describe possible keys
   * 
   * @throws \IbankServerException
   */
  public function requestEmailConfirmation($token, $email);
  /**
   * 
   * 
   * @param string $token
   * @param \Challenge $challenge
   * @param string $code
   * @return \AuthSession Данные сессии, которая создается в результате регистрации или аутентификации.
   * Также данные сессии можно получить (без продления даты expireDate) методом getAuthSession() или методом refreshAuthSession() (с продлением даты expireDate)
   * 
   * @throws \AuthException
   * @throws \WrongSessionException
   * @throws \PreconditionException
   * @throws \IbankServerException
   */
  public function confirmEmail($token, \Challenge $challenge, $code);
  /**
   * 
   * 
   * @param string $token
   * @param string $phoneNumber
   * @return \Challenge
   * @throws \AuthException
   * @throws \WrongSessionException
   * @throws \PreconditionException
   * @throws \IbankServerException
   */
  public function requestPhoneConfirmation($token, $phoneNumber);
  /**
   * 
   * 
   * @param string $token
   * @param \Challenge $challenge
   * @param string $code
   * @return \AuthSession Данные сессии, которая создается в результате регистрации или аутентификации.
   * Также данные сессии можно получить (без продления даты expireDate) методом getAuthSession() или методом refreshAuthSession() (с продлением даты expireDate)
   * 
   * @throws \AuthException
   * @throws \WrongSessionException
   * @throws \PreconditionException
   * @throws \IbankServerException
   */
  public function confirmPhone($token, \Challenge $challenge, $code);
}


class UserRegistrationServiceClient implements \UserRegistrationServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function registerUser(\UserRegistrationForm $userRegistrationForm)
  {
    $this->send_registerUser($userRegistrationForm);
    return $this->recv_registerUser();
  }

  public function send_registerUser(\UserRegistrationForm $userRegistrationForm)
  {
    $args = new \UserRegistrationService_registerUser_args();
    $args->userRegistrationForm = $userRegistrationForm;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'registerUser', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('registerUser', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_registerUser()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\UserRegistrationService_registerUser_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \UserRegistrationService_registerUser_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->authError !== null) {
      throw $result->authError;
    }
    if ($result->validError !== null) {
      throw $result->validError;
    }
    if ($result->error !== null) {
      throw $result->error;
    }
    if ($result->contragentException !== null) {
      throw $result->contragentException;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("registerUser failed: unknown result");
  }

  public function requestUserRegistration(\UserRegistrationForm $userRegistrationForm, \ContragentToUserBindingForm $contragentBindingForm)
  {
    $this->send_requestUserRegistration($userRegistrationForm, $contragentBindingForm);
    return $this->recv_requestUserRegistration();
  }

  public function send_requestUserRegistration(\UserRegistrationForm $userRegistrationForm, \ContragentToUserBindingForm $contragentBindingForm)
  {
    $args = new \UserRegistrationService_requestUserRegistration_args();
    $args->userRegistrationForm = $userRegistrationForm;
    $args->contragentBindingForm = $contragentBindingForm;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'requestUserRegistration', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('requestUserRegistration', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_requestUserRegistration()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\UserRegistrationService_requestUserRegistration_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \UserRegistrationService_requestUserRegistration_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->validError !== null) {
      throw $result->validError;
    }
    if ($result->authError !== null) {
      throw $result->authError;
    }
    if ($result->contragentException !== null) {
      throw $result->contragentException;
    }
    if ($result->error !== null) {
      throw $result->error;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("requestUserRegistration failed: unknown result");
  }

  public function finishUserRegistration($token, $login, $password, $confirmPassword, \Attributes $attr)
  {
    $this->send_finishUserRegistration($token, $login, $password, $confirmPassword, $attr);
    return $this->recv_finishUserRegistration();
  }

  public function send_finishUserRegistration($token, $login, $password, $confirmPassword, \Attributes $attr)
  {
    $args = new \UserRegistrationService_finishUserRegistration_args();
    $args->token = $token;
    $args->login = $login;
    $args->password = $password;
    $args->confirmPassword = $confirmPassword;
    $args->attr = $attr;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'finishUserRegistration', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('finishUserRegistration', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_finishUserRegistration()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\UserRegistrationService_finishUserRegistration_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \UserRegistrationService_finishUserRegistration_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->authError !== null) {
      throw $result->authError;
    }
    if ($result->wrongSessionException !== null) {
      throw $result->wrongSessionException;
    }
    if ($result->validError !== null) {
      throw $result->validError;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("finishUserRegistration failed: unknown result");
  }

  public function bindContragentToUser($token, \ContragentToUserBindingForm $contragentToUserBindingForm)
  {
    $this->send_bindContragentToUser($token, $contragentToUserBindingForm);
    return $this->recv_bindContragentToUser();
  }

  public function send_bindContragentToUser($token, \ContragentToUserBindingForm $contragentToUserBindingForm)
  {
    $args = new \UserRegistrationService_bindContragentToUser_args();
    $args->token = $token;
    $args->contragentToUserBindingForm = $contragentToUserBindingForm;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'bindContragentToUser', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('bindContragentToUser', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_bindContragentToUser()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\UserRegistrationService_bindContragentToUser_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \UserRegistrationService_bindContragentToUser_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->authError !== null) {
      throw $result->authError;
    }
    if ($result->wrongSessionException !== null) {
      throw $result->wrongSessionException;
    }
    if ($result->validError !== null) {
      throw $result->validError;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    if ($result->error !== null) {
      throw $result->error;
    }
    throw new \Exception("bindContragentToUser failed: unknown result");
  }

  public function requestEmailConfirmation($token, $email)
  {
    $this->send_requestEmailConfirmation($token, $email);
    return $this->recv_requestEmailConfirmation();
  }

  public function send_requestEmailConfirmation($token, $email)
  {
    $args = new \UserRegistrationService_requestEmailConfirmation_args();
    $args->token = $token;
    $args->email = $email;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'requestEmailConfirmation', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('requestEmailConfirmation', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_requestEmailConfirmation()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\UserRegistrationService_requestEmailConfirmation_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \UserRegistrationService_requestEmailConfirmation_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->authError !== null) {
      throw $result->authError;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->validError !== null) {
      throw $result->validError;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    throw new \Exception("requestEmailConfirmation failed: unknown result");
  }

  public function confirmEmail($token, \Challenge $challenge, $code)
  {
    $this->send_confirmEmail($token, $challenge, $code);
    return $this->recv_confirmEmail();
  }

  public function send_confirmEmail($token, \Challenge $challenge, $code)
  {
    $args = new \UserRegistrationService_confirmEmail_args();
    $args->token = $token;
    $args->challenge = $challenge;
    $args->code = $code;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'confirmEmail', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('confirmEmail', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_confirmEmail()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\UserRegistrationService_confirmEmail_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \UserRegistrationService_confirmEmail_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->authError !== null) {
      throw $result->authError;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->validError !== null) {
      throw $result->validError;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    throw new \Exception("confirmEmail failed: unknown result");
  }

  public function requestPhoneConfirmation($token, $phoneNumber)
  {
    $this->send_requestPhoneConfirmation($token, $phoneNumber);
    return $this->recv_requestPhoneConfirmation();
  }

  public function send_requestPhoneConfirmation($token, $phoneNumber)
  {
    $args = new \UserRegistrationService_requestPhoneConfirmation_args();
    $args->token = $token;
    $args->phoneNumber = $phoneNumber;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'requestPhoneConfirmation', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('requestPhoneConfirmation', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_requestPhoneConfirmation()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\UserRegistrationService_requestPhoneConfirmation_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \UserRegistrationService_requestPhoneConfirmation_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->authError !== null) {
      throw $result->authError;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->validError !== null) {
      throw $result->validError;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    throw new \Exception("requestPhoneConfirmation failed: unknown result");
  }

  public function confirmPhone($token, \Challenge $challenge, $code)
  {
    $this->send_confirmPhone($token, $challenge, $code);
    return $this->recv_confirmPhone();
  }

  public function send_confirmPhone($token, \Challenge $challenge, $code)
  {
    $args = new \UserRegistrationService_confirmPhone_args();
    $args->token = $token;
    $args->challenge = $challenge;
    $args->code = $code;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'confirmPhone', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('confirmPhone', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_confirmPhone()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\UserRegistrationService_confirmPhone_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \UserRegistrationService_confirmPhone_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->authError !== null) {
      throw $result->authError;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->validError !== null) {
      throw $result->validError;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    throw new \Exception("confirmPhone failed: unknown result");
  }

}


// HELPER FUNCTIONS AND STRUCTURES

class UserRegistrationService_registerUser_args {
  static $_TSPEC;

  /**
   * @var \UserRegistrationForm
   */
  public $userRegistrationForm = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userRegistrationForm',
          'type' => TType::STRUCT,
          'class' => '\UserRegistrationForm',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userRegistrationForm'])) {
        $this->userRegistrationForm = $vals['userRegistrationForm'];
      }
    }
  }

  public function getName() {
    return 'UserRegistrationService_registerUser_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->userRegistrationForm = new \UserRegistrationForm();
            $xfer += $this->userRegistrationForm->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserRegistrationService_registerUser_args');
    if ($this->userRegistrationForm !== null) {
      if (!is_object($this->userRegistrationForm)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('userRegistrationForm', TType::STRUCT, 1);
      $xfer += $this->userRegistrationForm->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserRegistrationService_registerUser_result {
  static $_TSPEC;

  /**
   * @var \AuthSession
   */
  public $success = null;
  /**
   * If AuthServer rejects registration, e.g. cause login is already exists or password does not met security conditions. TODO describe possible keys
   * 
   * @var \AuthException
   */
  public $authError = null;
  /**
   * Common validation errors: TODO describe possible keys
   * 
   * @var \PreconditionException
   */
  public $validError = null;
  /**
   * Any other system error
   * 
   * @var \IbankServerException
   */
  public $error = null;
  /**
   * If contragent already have activated profile
   * 
   * @var \ContragentIsActivatedTException
   */
  public $contragentException = null;
  /**
   * if any communication errors with Auth Server
   * 
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\AuthSession',
          ),
        1 => array(
          'var' => 'authError',
          'type' => TType::STRUCT,
          'class' => '\AuthException',
          ),
        2 => array(
          'var' => 'validError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        3 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        4 => array(
          'var' => 'contragentException',
          'type' => TType::STRUCT,
          'class' => '\ContragentIsActivatedTException',
          ),
        5 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['authError'])) {
        $this->authError = $vals['authError'];
      }
      if (isset($vals['validError'])) {
        $this->validError = $vals['validError'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['contragentException'])) {
        $this->contragentException = $vals['contragentException'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'UserRegistrationService_registerUser_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \AuthSession();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authError = new \AuthException();
            $xfer += $this->authError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->validError = new \PreconditionException();
            $xfer += $this->validError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->error = new \IbankServerException();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->contragentException = new \ContragentIsActivatedTException();
            $xfer += $this->contragentException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserRegistrationService_registerUser_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authError !== null) {
      $xfer += $output->writeFieldBegin('authError', TType::STRUCT, 1);
      $xfer += $this->authError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validError !== null) {
      $xfer += $output->writeFieldBegin('validError', TType::STRUCT, 2);
      $xfer += $this->validError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 3);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contragentException !== null) {
      $xfer += $output->writeFieldBegin('contragentException', TType::STRUCT, 4);
      $xfer += $this->contragentException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 5);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserRegistrationService_requestUserRegistration_args {
  static $_TSPEC;

  /**
   * @var \UserRegistrationForm
   */
  public $userRegistrationForm = null;
  /**
   * @var \ContragentToUserBindingForm
   */
  public $contragentBindingForm = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userRegistrationForm',
          'type' => TType::STRUCT,
          'class' => '\UserRegistrationForm',
          ),
        2 => array(
          'var' => 'contragentBindingForm',
          'type' => TType::STRUCT,
          'class' => '\ContragentToUserBindingForm',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userRegistrationForm'])) {
        $this->userRegistrationForm = $vals['userRegistrationForm'];
      }
      if (isset($vals['contragentBindingForm'])) {
        $this->contragentBindingForm = $vals['contragentBindingForm'];
      }
    }
  }

  public function getName() {
    return 'UserRegistrationService_requestUserRegistration_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->userRegistrationForm = new \UserRegistrationForm();
            $xfer += $this->userRegistrationForm->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->contragentBindingForm = new \ContragentToUserBindingForm();
            $xfer += $this->contragentBindingForm->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserRegistrationService_requestUserRegistration_args');
    if ($this->userRegistrationForm !== null) {
      if (!is_object($this->userRegistrationForm)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('userRegistrationForm', TType::STRUCT, 1);
      $xfer += $this->userRegistrationForm->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contragentBindingForm !== null) {
      if (!is_object($this->contragentBindingForm)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('contragentBindingForm', TType::STRUCT, 2);
      $xfer += $this->contragentBindingForm->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserRegistrationService_requestUserRegistration_result {
  static $_TSPEC;

  /**
   * @var \AuthSession
   */
  public $success = null;
  /**
   * @var \PreconditionException
   */
  public $validError = null;
  /**
   * @var \AuthException
   */
  public $authError = null;
  /**
   * @var \ContragentIsActivatedTException
   */
  public $contragentException = null;
  /**
   * @var \IbankServerException
   */
  public $error = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\AuthSession',
          ),
        1 => array(
          'var' => 'validError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        2 => array(
          'var' => 'authError',
          'type' => TType::STRUCT,
          'class' => '\AuthException',
          ),
        3 => array(
          'var' => 'contragentException',
          'type' => TType::STRUCT,
          'class' => '\ContragentIsActivatedTException',
          ),
        4 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        5 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['validError'])) {
        $this->validError = $vals['validError'];
      }
      if (isset($vals['authError'])) {
        $this->authError = $vals['authError'];
      }
      if (isset($vals['contragentException'])) {
        $this->contragentException = $vals['contragentException'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'UserRegistrationService_requestUserRegistration_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \AuthSession();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->validError = new \PreconditionException();
            $xfer += $this->validError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authError = new \AuthException();
            $xfer += $this->authError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->contragentException = new \ContragentIsActivatedTException();
            $xfer += $this->contragentException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->error = new \IbankServerException();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserRegistrationService_requestUserRegistration_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validError !== null) {
      $xfer += $output->writeFieldBegin('validError', TType::STRUCT, 1);
      $xfer += $this->validError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authError !== null) {
      $xfer += $output->writeFieldBegin('authError', TType::STRUCT, 2);
      $xfer += $this->authError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contragentException !== null) {
      $xfer += $output->writeFieldBegin('contragentException', TType::STRUCT, 3);
      $xfer += $this->contragentException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 4);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 5);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserRegistrationService_finishUserRegistration_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $login = null;
  /**
   * @var string
   */
  public $password = null;
  /**
   * @var string
   */
  public $confirmPassword = null;
  /**
   * @var \Attributes
   */
  public $attr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'login',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'confirmPassword',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'attr',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['login'])) {
        $this->login = $vals['login'];
      }
      if (isset($vals['password'])) {
        $this->password = $vals['password'];
      }
      if (isset($vals['confirmPassword'])) {
        $this->confirmPassword = $vals['confirmPassword'];
      }
      if (isset($vals['attr'])) {
        $this->attr = $vals['attr'];
      }
    }
  }

  public function getName() {
    return 'UserRegistrationService_finishUserRegistration_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->login);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->confirmPassword);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->attr = new \Attributes();
            $xfer += $this->attr->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserRegistrationService_finishUserRegistration_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->login !== null) {
      $xfer += $output->writeFieldBegin('login', TType::STRING, 2);
      $xfer += $output->writeString($this->login);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password !== null) {
      $xfer += $output->writeFieldBegin('password', TType::STRING, 3);
      $xfer += $output->writeString($this->password);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->confirmPassword !== null) {
      $xfer += $output->writeFieldBegin('confirmPassword', TType::STRING, 4);
      $xfer += $output->writeString($this->confirmPassword);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attr !== null) {
      if (!is_object($this->attr)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attr', TType::STRUCT, 5);
      $xfer += $this->attr->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserRegistrationService_finishUserRegistration_result {
  static $_TSPEC;

  /**
   * @var \AuthSession
   */
  public $success = null;
  /**
   * @var \AuthException
   */
  public $authError = null;
  /**
   * @var \WrongSessionException
   */
  public $wrongSessionException = null;
  /**
   * @var \PreconditionException
   */
  public $validError = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\AuthSession',
          ),
        1 => array(
          'var' => 'authError',
          'type' => TType::STRUCT,
          'class' => '\AuthException',
          ),
        2 => array(
          'var' => 'wrongSessionException',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        3 => array(
          'var' => 'validError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        4 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['authError'])) {
        $this->authError = $vals['authError'];
      }
      if (isset($vals['wrongSessionException'])) {
        $this->wrongSessionException = $vals['wrongSessionException'];
      }
      if (isset($vals['validError'])) {
        $this->validError = $vals['validError'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'UserRegistrationService_finishUserRegistration_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \AuthSession();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authError = new \AuthException();
            $xfer += $this->authError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->wrongSessionException = new \WrongSessionException();
            $xfer += $this->wrongSessionException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->validError = new \PreconditionException();
            $xfer += $this->validError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserRegistrationService_finishUserRegistration_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authError !== null) {
      $xfer += $output->writeFieldBegin('authError', TType::STRUCT, 1);
      $xfer += $this->authError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wrongSessionException !== null) {
      $xfer += $output->writeFieldBegin('wrongSessionException', TType::STRUCT, 2);
      $xfer += $this->wrongSessionException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validError !== null) {
      $xfer += $output->writeFieldBegin('validError', TType::STRUCT, 3);
      $xfer += $this->validError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 4);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserRegistrationService_bindContragentToUser_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var \ContragentToUserBindingForm
   */
  public $contragentToUserBindingForm = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'contragentToUserBindingForm',
          'type' => TType::STRUCT,
          'class' => '\ContragentToUserBindingForm',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['contragentToUserBindingForm'])) {
        $this->contragentToUserBindingForm = $vals['contragentToUserBindingForm'];
      }
    }
  }

  public function getName() {
    return 'UserRegistrationService_bindContragentToUser_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->contragentToUserBindingForm = new \ContragentToUserBindingForm();
            $xfer += $this->contragentToUserBindingForm->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserRegistrationService_bindContragentToUser_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contragentToUserBindingForm !== null) {
      if (!is_object($this->contragentToUserBindingForm)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('contragentToUserBindingForm', TType::STRUCT, 2);
      $xfer += $this->contragentToUserBindingForm->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserRegistrationService_bindContragentToUser_result {
  static $_TSPEC;

  /**
   * @var \AuthSession
   */
  public $success = null;
  /**
   * @var \AuthException
   */
  public $authError = null;
  /**
   * @var \WrongSessionException
   */
  public $wrongSessionException = null;
  /**
   * @var \PreconditionException
   */
  public $validError = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;
  /**
   * @var \IbankServerException
   */
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\AuthSession',
          ),
        1 => array(
          'var' => 'authError',
          'type' => TType::STRUCT,
          'class' => '\AuthException',
          ),
        2 => array(
          'var' => 'wrongSessionException',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        3 => array(
          'var' => 'validError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        4 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        5 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['authError'])) {
        $this->authError = $vals['authError'];
      }
      if (isset($vals['wrongSessionException'])) {
        $this->wrongSessionException = $vals['wrongSessionException'];
      }
      if (isset($vals['validError'])) {
        $this->validError = $vals['validError'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'UserRegistrationService_bindContragentToUser_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \AuthSession();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authError = new \AuthException();
            $xfer += $this->authError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->wrongSessionException = new \WrongSessionException();
            $xfer += $this->wrongSessionException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->validError = new \PreconditionException();
            $xfer += $this->validError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->error = new \IbankServerException();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserRegistrationService_bindContragentToUser_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authError !== null) {
      $xfer += $output->writeFieldBegin('authError', TType::STRUCT, 1);
      $xfer += $this->authError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wrongSessionException !== null) {
      $xfer += $output->writeFieldBegin('wrongSessionException', TType::STRUCT, 2);
      $xfer += $this->wrongSessionException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validError !== null) {
      $xfer += $output->writeFieldBegin('validError', TType::STRUCT, 3);
      $xfer += $this->validError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 4);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 5);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserRegistrationService_requestEmailConfirmation_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $email = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
    }
  }

  public function getName() {
    return 'UserRegistrationService_requestEmailConfirmation_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserRegistrationService_requestEmailConfirmation_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', TType::STRING, 2);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserRegistrationService_requestEmailConfirmation_result {
  static $_TSPEC;

  /**
   * @var \Challenge
   */
  public $success = null;
  /**
   * @var \AuthException
   */
  public $authError = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * Common validation errors: TODO describe possible keys
   * 
   * @var \PreconditionException
   */
  public $validError = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Challenge',
          ),
        1 => array(
          'var' => 'authError',
          'type' => TType::STRUCT,
          'class' => '\AuthException',
          ),
        2 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        3 => array(
          'var' => 'validError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        4 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['authError'])) {
        $this->authError = $vals['authError'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['validError'])) {
        $this->validError = $vals['validError'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
    }
  }

  public function getName() {
    return 'UserRegistrationService_requestEmailConfirmation_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Challenge();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authError = new \AuthException();
            $xfer += $this->authError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->validError = new \PreconditionException();
            $xfer += $this->validError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserRegistrationService_requestEmailConfirmation_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authError !== null) {
      $xfer += $output->writeFieldBegin('authError', TType::STRUCT, 1);
      $xfer += $this->authError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 2);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validError !== null) {
      $xfer += $output->writeFieldBegin('validError', TType::STRUCT, 3);
      $xfer += $this->validError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 4);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserRegistrationService_confirmEmail_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var \Challenge
   */
  public $challenge = null;
  /**
   * @var string
   */
  public $code = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'challenge',
          'type' => TType::STRUCT,
          'class' => '\Challenge',
          ),
        3 => array(
          'var' => 'code',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['challenge'])) {
        $this->challenge = $vals['challenge'];
      }
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
    }
  }

  public function getName() {
    return 'UserRegistrationService_confirmEmail_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->challenge = new \Challenge();
            $xfer += $this->challenge->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserRegistrationService_confirmEmail_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->challenge !== null) {
      if (!is_object($this->challenge)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('challenge', TType::STRUCT, 2);
      $xfer += $this->challenge->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::STRING, 3);
      $xfer += $output->writeString($this->code);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserRegistrationService_confirmEmail_result {
  static $_TSPEC;

  /**
   * @var \AuthSession
   */
  public $success = null;
  /**
   * @var \AuthException
   */
  public $authError = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \PreconditionException
   */
  public $validError = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\AuthSession',
          ),
        1 => array(
          'var' => 'authError',
          'type' => TType::STRUCT,
          'class' => '\AuthException',
          ),
        2 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        3 => array(
          'var' => 'validError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        4 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['authError'])) {
        $this->authError = $vals['authError'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['validError'])) {
        $this->validError = $vals['validError'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
    }
  }

  public function getName() {
    return 'UserRegistrationService_confirmEmail_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \AuthSession();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authError = new \AuthException();
            $xfer += $this->authError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->validError = new \PreconditionException();
            $xfer += $this->validError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserRegistrationService_confirmEmail_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authError !== null) {
      $xfer += $output->writeFieldBegin('authError', TType::STRUCT, 1);
      $xfer += $this->authError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 2);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validError !== null) {
      $xfer += $output->writeFieldBegin('validError', TType::STRUCT, 3);
      $xfer += $this->validError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 4);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserRegistrationService_requestPhoneConfirmation_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $phoneNumber = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'phoneNumber',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['phoneNumber'])) {
        $this->phoneNumber = $vals['phoneNumber'];
      }
    }
  }

  public function getName() {
    return 'UserRegistrationService_requestPhoneConfirmation_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phoneNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserRegistrationService_requestPhoneConfirmation_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phoneNumber !== null) {
      $xfer += $output->writeFieldBegin('phoneNumber', TType::STRING, 2);
      $xfer += $output->writeString($this->phoneNumber);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserRegistrationService_requestPhoneConfirmation_result {
  static $_TSPEC;

  /**
   * @var \Challenge
   */
  public $success = null;
  /**
   * @var \AuthException
   */
  public $authError = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \PreconditionException
   */
  public $validError = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Challenge',
          ),
        1 => array(
          'var' => 'authError',
          'type' => TType::STRUCT,
          'class' => '\AuthException',
          ),
        2 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        3 => array(
          'var' => 'validError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        4 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['authError'])) {
        $this->authError = $vals['authError'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['validError'])) {
        $this->validError = $vals['validError'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
    }
  }

  public function getName() {
    return 'UserRegistrationService_requestPhoneConfirmation_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Challenge();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authError = new \AuthException();
            $xfer += $this->authError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->validError = new \PreconditionException();
            $xfer += $this->validError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserRegistrationService_requestPhoneConfirmation_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authError !== null) {
      $xfer += $output->writeFieldBegin('authError', TType::STRUCT, 1);
      $xfer += $this->authError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 2);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validError !== null) {
      $xfer += $output->writeFieldBegin('validError', TType::STRUCT, 3);
      $xfer += $this->validError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 4);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserRegistrationService_confirmPhone_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var \Challenge
   */
  public $challenge = null;
  /**
   * @var string
   */
  public $code = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'challenge',
          'type' => TType::STRUCT,
          'class' => '\Challenge',
          ),
        3 => array(
          'var' => 'code',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['challenge'])) {
        $this->challenge = $vals['challenge'];
      }
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
    }
  }

  public function getName() {
    return 'UserRegistrationService_confirmPhone_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->challenge = new \Challenge();
            $xfer += $this->challenge->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserRegistrationService_confirmPhone_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->challenge !== null) {
      if (!is_object($this->challenge)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('challenge', TType::STRUCT, 2);
      $xfer += $this->challenge->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::STRING, 3);
      $xfer += $output->writeString($this->code);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserRegistrationService_confirmPhone_result {
  static $_TSPEC;

  /**
   * @var \AuthSession
   */
  public $success = null;
  /**
   * @var \AuthException
   */
  public $authError = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \PreconditionException
   */
  public $validError = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\AuthSession',
          ),
        1 => array(
          'var' => 'authError',
          'type' => TType::STRUCT,
          'class' => '\AuthException',
          ),
        2 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        3 => array(
          'var' => 'validError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        4 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['authError'])) {
        $this->authError = $vals['authError'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['validError'])) {
        $this->validError = $vals['validError'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
    }
  }

  public function getName() {
    return 'UserRegistrationService_confirmPhone_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \AuthSession();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authError = new \AuthException();
            $xfer += $this->authError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->validError = new \PreconditionException();
            $xfer += $this->validError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserRegistrationService_confirmPhone_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authError !== null) {
      $xfer += $output->writeFieldBegin('authError', TType::STRUCT, 1);
      $xfer += $this->authError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 2);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validError !== null) {
      $xfer += $output->writeFieldBegin('validError', TType::STRUCT, 3);
      $xfer += $this->validError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 4);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


