<?php
/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface TagServiceIf {
  /**
   * @param string $token
   * @param string $operationId
   * @param string $parentTag
   * @param string $tag
   * @throws \WrongSessionException
   * @throws \PreconditionException
   * @throws \ExtendedAuthenticationRequired
   * @throws \IbankServerException
   * @throws \IbankIntegrationLayerException
   */
  public function tagOperation($token, $operationId, $parentTag, $tag);
}


class TagServiceClient implements \TagServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function tagOperation($token, $operationId, $parentTag, $tag)
  {
    $this->send_tagOperation($token, $operationId, $parentTag, $tag);
    $this->recv_tagOperation();
  }

  public function send_tagOperation($token, $operationId, $parentTag, $tag)
  {
    $args = new \TagService_tagOperation_args();
    $args->token = $token;
    $args->operationId = $operationId;
    $args->parentTag = $parentTag;
    $args->tag = $tag;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'tagOperation', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('tagOperation', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_tagOperation()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TagService_tagOperation_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TagService_tagOperation_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->validError !== null) {
      throw $result->validError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    return;
  }

}


// HELPER FUNCTIONS AND STRUCTURES

class TagService_tagOperation_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $operationId = null;
  /**
   * @var string
   */
  public $parentTag = null;
  /**
   * @var string
   */
  public $tag = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'operationId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parentTag',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'tag',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['operationId'])) {
        $this->operationId = $vals['operationId'];
      }
      if (isset($vals['parentTag'])) {
        $this->parentTag = $vals['parentTag'];
      }
      if (isset($vals['tag'])) {
        $this->tag = $vals['tag'];
      }
    }
  }

  public function getName() {
    return 'TagService_tagOperation_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->operationId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parentTag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TagService_tagOperation_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operationId !== null) {
      $xfer += $output->writeFieldBegin('operationId', TType::STRING, 2);
      $xfer += $output->writeString($this->operationId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parentTag !== null) {
      $xfer += $output->writeFieldBegin('parentTag', TType::STRING, 3);
      $xfer += $output->writeString($this->parentTag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tag !== null) {
      $xfer += $output->writeFieldBegin('tag', TType::STRING, 4);
      $xfer += $output->writeString($this->tag);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TagService_tagOperation_result {
  static $_TSPEC;

  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \PreconditionException
   */
  public $validError = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'validError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        3 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        4 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        5 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['validError'])) {
        $this->validError = $vals['validError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'TagService_tagOperation_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->validError = new \PreconditionException();
            $xfer += $this->validError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TagService_tagOperation_result');
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validError !== null) {
      $xfer += $output->writeFieldBegin('validError', TType::STRUCT, 2);
      $xfer += $this->validError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 3);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 4);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 5);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


