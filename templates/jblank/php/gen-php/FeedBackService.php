<?php
/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface FeedBackServiceIf {
  /**
   * @param string $token
   * @param string $subject
   * @param string $message
   * @return \FeedBackMessageOperation
   * @throws \WrongSessionException
   * @throws \PreconditionException
   * @throws \OperationDeniedException
   * @throws \ExtendedAuthenticationRequired
   * @throws \IbankServerException
   * @throws \IbankIntegrationLayerException
   */
  public function sendMessage($token, $subject, $message);
  /**
   * @param string $token
   * @param string $id
   * @return \FeedBackMessageOperation
   * @throws \WrongSessionException
   * @throws \PreconditionException
   * @throws \ExtendedAuthenticationRequired
   * @throws \IbankServerException
   * @throws \IbankIntegrationLayerException
   */
  public function findById($token, $id);
  /**
   * @param string $token
   * @param \OperationHistoryFilter $operationHistoryFilter
   * @param int $dateFrom
   * @param int $dateTo
   * @param \Attributes $attributes
   * @return \FeedBackMessageOperationHistoryItem[]
   * @throws \WrongSessionException
   * @throws \PeriodIsLargeException
   * @throws \ExtendedAuthenticationRequired
   * @throws \IbankServerException
   * @throws \IbankIntegrationLayerException
   */
  public function fetchFeedbacksHistoryWithFromToDate($token, \OperationHistoryFilter $operationHistoryFilter, $dateFrom, $dateTo, \Attributes $attributes);
  /**
   * @param string $token
   * @param \OperationHistoryFilter $operationHistoryFilter
   * @param int $lastDays
   * @param \Attributes $attributes
   * @return \FeedBackMessageOperationHistoryItem[]
   * @throws \WrongSessionException
   * @throws \PeriodIsLargeException
   * @throws \ExtendedAuthenticationRequired
   * @throws \IbankServerException
   * @throws \IbankIntegrationLayerException
   */
  public function fetchFeedbacksHistoryWithLastDays($token, \OperationHistoryFilter $operationHistoryFilter, $lastDays, \Attributes $attributes);
  /**
   * Gives all Offers available for client.
   * 
   * @param string $token Session token
   * 
   * @param \OfferFilter $filter Filter defines which offers should be fetched
   * 
   * @param int $offset From which number Offers will be fetched. For fetching first 100 offers offset=0, limit=100.
   * 
   * @param int $limit How many Offers will be fetched.
   * 
   * @return \Offer[]
   * @throws \WrongSessionException If session token is bad or not actual
   * 
   * @throws \PreconditionException If validation errors, e.g. empty list of filter.allowedStatuses given, the PreconditionException('wrong_parameter', 'filter.allowedStatuses')
   * 
   * @throws \IbankServerException If any unexpected errror happened
   * 
   */
  public function fetchAllOffers($token, \OfferFilter $filter, $offset, $limit);
}


class FeedBackServiceClient implements \FeedBackServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function sendMessage($token, $subject, $message)
  {
    $this->send_sendMessage($token, $subject, $message);
    return $this->recv_sendMessage();
  }

  public function send_sendMessage($token, $subject, $message)
  {
    $args = new \FeedBackService_sendMessage_args();
    $args->token = $token;
    $args->subject = $subject;
    $args->message = $message;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'sendMessage', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('sendMessage', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_sendMessage()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\FeedBackService_sendMessage_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \FeedBackService_sendMessage_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->validError !== null) {
      throw $result->validError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("sendMessage failed: unknown result");
  }

  public function findById($token, $id)
  {
    $this->send_findById($token, $id);
    return $this->recv_findById();
  }

  public function send_findById($token, $id)
  {
    $args = new \FeedBackService_findById_args();
    $args->token = $token;
    $args->id = $id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findById', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findById', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findById()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\FeedBackService_findById_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \FeedBackService_findById_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->validError !== null) {
      throw $result->validError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("findById failed: unknown result");
  }

  public function fetchFeedbacksHistoryWithFromToDate($token, \OperationHistoryFilter $operationHistoryFilter, $dateFrom, $dateTo, \Attributes $attributes)
  {
    $this->send_fetchFeedbacksHistoryWithFromToDate($token, $operationHistoryFilter, $dateFrom, $dateTo, $attributes);
    return $this->recv_fetchFeedbacksHistoryWithFromToDate();
  }

  public function send_fetchFeedbacksHistoryWithFromToDate($token, \OperationHistoryFilter $operationHistoryFilter, $dateFrom, $dateTo, \Attributes $attributes)
  {
    $args = new \FeedBackService_fetchFeedbacksHistoryWithFromToDate_args();
    $args->token = $token;
    $args->operationHistoryFilter = $operationHistoryFilter;
    $args->dateFrom = $dateFrom;
    $args->dateTo = $dateTo;
    $args->attributes = $attributes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'fetchFeedbacksHistoryWithFromToDate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('fetchFeedbacksHistoryWithFromToDate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_fetchFeedbacksHistoryWithFromToDate()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\FeedBackService_fetchFeedbacksHistoryWithFromToDate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \FeedBackService_fetchFeedbacksHistoryWithFromToDate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->periodError !== null) {
      throw $result->periodError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("fetchFeedbacksHistoryWithFromToDate failed: unknown result");
  }

  public function fetchFeedbacksHistoryWithLastDays($token, \OperationHistoryFilter $operationHistoryFilter, $lastDays, \Attributes $attributes)
  {
    $this->send_fetchFeedbacksHistoryWithLastDays($token, $operationHistoryFilter, $lastDays, $attributes);
    return $this->recv_fetchFeedbacksHistoryWithLastDays();
  }

  public function send_fetchFeedbacksHistoryWithLastDays($token, \OperationHistoryFilter $operationHistoryFilter, $lastDays, \Attributes $attributes)
  {
    $args = new \FeedBackService_fetchFeedbacksHistoryWithLastDays_args();
    $args->token = $token;
    $args->operationHistoryFilter = $operationHistoryFilter;
    $args->lastDays = $lastDays;
    $args->attributes = $attributes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'fetchFeedbacksHistoryWithLastDays', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('fetchFeedbacksHistoryWithLastDays', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_fetchFeedbacksHistoryWithLastDays()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\FeedBackService_fetchFeedbacksHistoryWithLastDays_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \FeedBackService_fetchFeedbacksHistoryWithLastDays_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->periodError !== null) {
      throw $result->periodError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("fetchFeedbacksHistoryWithLastDays failed: unknown result");
  }

  public function fetchAllOffers($token, \OfferFilter $filter, $offset, $limit)
  {
    $this->send_fetchAllOffers($token, $filter, $offset, $limit);
    return $this->recv_fetchAllOffers();
  }

  public function send_fetchAllOffers($token, \OfferFilter $filter, $offset, $limit)
  {
    $args = new \FeedBackService_fetchAllOffers_args();
    $args->token = $token;
    $args->filter = $filter;
    $args->offset = $offset;
    $args->limit = $limit;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'fetchAllOffers', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('fetchAllOffers', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_fetchAllOffers()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\FeedBackService_fetchAllOffers_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \FeedBackService_fetchAllOffers_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->validationError !== null) {
      throw $result->validationError;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    throw new \Exception("fetchAllOffers failed: unknown result");
  }

}


// HELPER FUNCTIONS AND STRUCTURES

class FeedBackService_sendMessage_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $subject = null;
  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'subject',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['subject'])) {
        $this->subject = $vals['subject'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'FeedBackService_sendMessage_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->subject);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FeedBackService_sendMessage_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->subject !== null) {
      $xfer += $output->writeFieldBegin('subject', TType::STRING, 2);
      $xfer += $output->writeString($this->subject);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 3);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FeedBackService_sendMessage_result {
  static $_TSPEC;

  /**
   * @var \FeedBackMessageOperation
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \PreconditionException
   */
  public $validError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\FeedBackMessageOperation',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'validError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        3 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        4 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['validError'])) {
        $this->validError = $vals['validError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'FeedBackService_sendMessage_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \FeedBackMessageOperation();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->validError = new \PreconditionException();
            $xfer += $this->validError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FeedBackService_sendMessage_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validError !== null) {
      $xfer += $output->writeFieldBegin('validError', TType::STRUCT, 2);
      $xfer += $this->validError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 3);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 4);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 6);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FeedBackService_findById_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
    }
  }

  public function getName() {
    return 'FeedBackService_findById_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FeedBackService_findById_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 2);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FeedBackService_findById_result {
  static $_TSPEC;

  /**
   * @var \FeedBackMessageOperation
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \PreconditionException
   */
  public $validError = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\FeedBackMessageOperation',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'validError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        3 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        4 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        5 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['validError'])) {
        $this->validError = $vals['validError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'FeedBackService_findById_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \FeedBackMessageOperation();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->validError = new \PreconditionException();
            $xfer += $this->validError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FeedBackService_findById_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validError !== null) {
      $xfer += $output->writeFieldBegin('validError', TType::STRUCT, 2);
      $xfer += $this->validError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 3);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 4);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 5);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FeedBackService_fetchFeedbacksHistoryWithFromToDate_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var \OperationHistoryFilter
   */
  public $operationHistoryFilter = null;
  /**
   * @var int
   */
  public $dateFrom = null;
  /**
   * @var int
   */
  public $dateTo = null;
  /**
   * @var \Attributes
   */
  public $attributes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'operationHistoryFilter',
          'type' => TType::STRUCT,
          'class' => '\OperationHistoryFilter',
          ),
        3 => array(
          'var' => 'dateFrom',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'dateTo',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'attributes',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['operationHistoryFilter'])) {
        $this->operationHistoryFilter = $vals['operationHistoryFilter'];
      }
      if (isset($vals['dateFrom'])) {
        $this->dateFrom = $vals['dateFrom'];
      }
      if (isset($vals['dateTo'])) {
        $this->dateTo = $vals['dateTo'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
    }
  }

  public function getName() {
    return 'FeedBackService_fetchFeedbacksHistoryWithFromToDate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->operationHistoryFilter = new \OperationHistoryFilter();
            $xfer += $this->operationHistoryFilter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dateFrom);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dateTo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->attributes = new \Attributes();
            $xfer += $this->attributes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FeedBackService_fetchFeedbacksHistoryWithFromToDate_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operationHistoryFilter !== null) {
      if (!is_object($this->operationHistoryFilter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('operationHistoryFilter', TType::STRUCT, 2);
      $xfer += $this->operationHistoryFilter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateFrom !== null) {
      $xfer += $output->writeFieldBegin('dateFrom', TType::I64, 3);
      $xfer += $output->writeI64($this->dateFrom);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateTo !== null) {
      $xfer += $output->writeFieldBegin('dateTo', TType::I64, 4);
      $xfer += $output->writeI64($this->dateTo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_object($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::STRUCT, 5);
      $xfer += $this->attributes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FeedBackService_fetchFeedbacksHistoryWithFromToDate_result {
  static $_TSPEC;

  /**
   * @var \FeedBackMessageOperationHistoryItem[]
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \PeriodIsLargeException
   */
  public $periodError = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\FeedBackMessageOperationHistoryItem',
            ),
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'periodError',
          'type' => TType::STRUCT,
          'class' => '\PeriodIsLargeException',
          ),
        3 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        4 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        5 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['periodError'])) {
        $this->periodError = $vals['periodError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'FeedBackService_fetchFeedbacksHistoryWithFromToDate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size360 = 0;
            $_etype363 = 0;
            $xfer += $input->readListBegin($_etype363, $_size360);
            for ($_i364 = 0; $_i364 < $_size360; ++$_i364)
            {
              $elem365 = null;
              $elem365 = new \FeedBackMessageOperationHistoryItem();
              $xfer += $elem365->read($input);
              $this->success []= $elem365;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->periodError = new \PeriodIsLargeException();
            $xfer += $this->periodError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FeedBackService_fetchFeedbacksHistoryWithFromToDate_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter366)
          {
            $xfer += $iter366->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->periodError !== null) {
      $xfer += $output->writeFieldBegin('periodError', TType::STRUCT, 2);
      $xfer += $this->periodError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 3);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 4);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 5);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FeedBackService_fetchFeedbacksHistoryWithLastDays_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var \OperationHistoryFilter
   */
  public $operationHistoryFilter = null;
  /**
   * @var int
   */
  public $lastDays = null;
  /**
   * @var \Attributes
   */
  public $attributes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'operationHistoryFilter',
          'type' => TType::STRUCT,
          'class' => '\OperationHistoryFilter',
          ),
        3 => array(
          'var' => 'lastDays',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'attributes',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['operationHistoryFilter'])) {
        $this->operationHistoryFilter = $vals['operationHistoryFilter'];
      }
      if (isset($vals['lastDays'])) {
        $this->lastDays = $vals['lastDays'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
    }
  }

  public function getName() {
    return 'FeedBackService_fetchFeedbacksHistoryWithLastDays_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->operationHistoryFilter = new \OperationHistoryFilter();
            $xfer += $this->operationHistoryFilter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->lastDays);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->attributes = new \Attributes();
            $xfer += $this->attributes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FeedBackService_fetchFeedbacksHistoryWithLastDays_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operationHistoryFilter !== null) {
      if (!is_object($this->operationHistoryFilter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('operationHistoryFilter', TType::STRUCT, 2);
      $xfer += $this->operationHistoryFilter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastDays !== null) {
      $xfer += $output->writeFieldBegin('lastDays', TType::I64, 3);
      $xfer += $output->writeI64($this->lastDays);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_object($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::STRUCT, 4);
      $xfer += $this->attributes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FeedBackService_fetchFeedbacksHistoryWithLastDays_result {
  static $_TSPEC;

  /**
   * @var \FeedBackMessageOperationHistoryItem[]
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \PeriodIsLargeException
   */
  public $periodError = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\FeedBackMessageOperationHistoryItem',
            ),
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'periodError',
          'type' => TType::STRUCT,
          'class' => '\PeriodIsLargeException',
          ),
        3 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        4 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        5 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['periodError'])) {
        $this->periodError = $vals['periodError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'FeedBackService_fetchFeedbacksHistoryWithLastDays_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size367 = 0;
            $_etype370 = 0;
            $xfer += $input->readListBegin($_etype370, $_size367);
            for ($_i371 = 0; $_i371 < $_size367; ++$_i371)
            {
              $elem372 = null;
              $elem372 = new \FeedBackMessageOperationHistoryItem();
              $xfer += $elem372->read($input);
              $this->success []= $elem372;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->periodError = new \PeriodIsLargeException();
            $xfer += $this->periodError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FeedBackService_fetchFeedbacksHistoryWithLastDays_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter373)
          {
            $xfer += $iter373->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->periodError !== null) {
      $xfer += $output->writeFieldBegin('periodError', TType::STRUCT, 2);
      $xfer += $this->periodError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 3);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 4);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 5);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FeedBackService_fetchAllOffers_args {
  static $_TSPEC;

  /**
   * Session token
   * 
   * @var string
   */
  public $token = null;
  /**
   * Filter defines which offers should be fetched
   * 
   * @var \OfferFilter
   */
  public $filter = null;
  /**
   * From which number Offers will be fetched. For fetching first 100 offers offset=0, limit=100.
   * 
   * @var int
   */
  public $offset = null;
  /**
   * How many Offers will be fetched.
   * 
   * @var int
   */
  public $limit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'filter',
          'type' => TType::STRUCT,
          'class' => '\OfferFilter',
          ),
        3 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
    }
  }

  public function getName() {
    return 'FeedBackService_fetchAllOffers_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->filter = new \OfferFilter();
            $xfer += $this->filter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FeedBackService_fetchAllOffers_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      if (!is_object($this->filter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filter', TType::STRUCT, 2);
      $xfer += $this->filter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 3);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 4);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FeedBackService_fetchAllOffers_result {
  static $_TSPEC;

  /**
   * @var \Offer[]
   */
  public $success = null;
  /**
   * If session token is bad or not actual
   * 
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * If validation errors, e.g. empty list of filter.allowedStatuses given, the PreconditionException('wrong_parameter', 'filter.allowedStatuses')
   * 
   * @var \PreconditionException
   */
  public $validationError = null;
  /**
   * If any unexpected errror happened
   * 
   * @var \IbankServerException
   */
  public $serverError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Offer',
            ),
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'validationError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        3 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['validationError'])) {
        $this->validationError = $vals['validationError'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
    }
  }

  public function getName() {
    return 'FeedBackService_fetchAllOffers_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size374 = 0;
            $_etype377 = 0;
            $xfer += $input->readListBegin($_etype377, $_size374);
            for ($_i378 = 0; $_i378 < $_size374; ++$_i378)
            {
              $elem379 = null;
              $elem379 = new \Offer();
              $xfer += $elem379->read($input);
              $this->success []= $elem379;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->validationError = new \PreconditionException();
            $xfer += $this->validationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FeedBackService_fetchAllOffers_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter380)
          {
            $xfer += $iter380->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validationError !== null) {
      $xfer += $output->writeFieldBegin('validationError', TType::STRUCT, 2);
      $xfer += $this->validationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 3);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


