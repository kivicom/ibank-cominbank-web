<?php
/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface ContractsServiceIf {
  /**
   * @param string $token
   * @param \Attributes $attributes
   * @return \CardContract[]
   * @throws \WrongSessionException
   * @throws \OperationDeniedException
   * @throws \ExtendedAuthenticationRequired
   * @throws \IbankServerException
   * @throws \BackendValidationException client_not_found - не найден клиент
   * 
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function findAllCardContracts($token, \Attributes $attributes);
  /**
   * @param string $token
   * @param \Attributes $attributes
   * @return \AccountContract[]
   * @throws \WrongSessionException
   * @throws \OperationDeniedException
   * @throws \ExtendedAuthenticationRequired
   * @throws \IbankServerException
   * @throws \BackendValidationException client_not_found - не найден клиент
   * 
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function findAllAccountContracts($token, \Attributes $attributes);
  /**
   * @param string $token
   * @param \Attributes $attributes
   * @return \CreditContract[]
   * @throws \WrongSessionException
   * @throws \OperationDeniedException
   * @throws \ExtendedAuthenticationRequired
   * @throws \IbankServerException
   * @throws \BackendValidationException client_not_found - не найден клиент
   * 
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function findAllCreditContracts($token, \Attributes $attributes);
  /**
   * @param string $token
   * @param \Attributes $attributes
   * @return \DepositContract[]
   * @throws \WrongSessionException
   * @throws \OperationDeniedException
   * @throws \ExtendedAuthenticationRequired
   * @throws \IbankServerException
   * @throws \BackendValidationException client_not_found - не найден клиент
   * 
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function findAllDepositContracts($token, \Attributes $attributes);
  /**
   * @param string $token
   * @param string $cardContractId
   * @param \Attributes $attributes
   * @return \CardContract Набор атрибутов договора клиента на обслуживание карточного счета
   * 
   * @throws \WrongSessionException
   * @throws \OperationDeniedException
   * @throws \PreconditionException
   * @throws \ExtendedAuthenticationRequired
   * @throws \IbankServerException
   * @throws \BackendValidationException client_not_found - не найден клиент <br>
   * contract_not_found - не найден контракт <br>
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function fetchCardContract($token, $cardContractId, \Attributes $attributes);
  /**
   * @param string $token
   * @param string $accountContractId
   * @param \Attributes $attributes
   * @return \AccountContract Account contract. Represents contract of maintaining standard banking account.
   * 
   * @throws \WrongSessionException
   * @throws \OperationDeniedException
   * @throws \PreconditionException
   * @throws \ExtendedAuthenticationRequired
   * @throws \IbankServerException
   * @throws \BackendValidationException client_not_found - не найден клиент <br>
   * contract_not_found - не найден контракт <br>
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function fetchAccountContract($token, $accountContractId, \Attributes $attributes);
  /**
   * @param string $token
   * @param string $creditContractId
   * @param \Attributes $attributes
   * @return \CreditContract
   * @throws \WrongSessionException
   * @throws \OperationDeniedException
   * @throws \PreconditionException
   * @throws \ExtendedAuthenticationRequired
   * @throws \IbankServerException
   * @throws \BackendValidationException client_not_found - не найден клиент <br>
   * contract_not_found - не найден контракт <br>
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function fetchCreditContract($token, $creditContractId, \Attributes $attributes);
  /**
   * @param string $token
   * @param string $depositContractId
   * @param \Attributes $attributes
   * @return \DepositContract Набор атрибутов договора клиента на обслуживание карточного счета
   * 
   * @throws \WrongSessionException
   * @throws \OperationDeniedException
   * @throws \PreconditionException
   * @throws \ExtendedAuthenticationRequired
   * @throws \IbankServerException
   * @throws \BackendValidationException client_not_found - не найден клиент <br>
   * contract_not_found - не найден контракт <br>
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function fetchDepositContract($token, $depositContractId, \Attributes $attributes);
  /**
   * Return CardContract with details (at most imlementation of IL it will card limits and/or settings ) <br>
   * 
   * @param string $token
   * @param string $cardContractId
   * @param \Attributes $attributes In the case that details need  received only for one card or a specific list, then to the attributes must be added pairs kay / value in the next manear: <br>
   * key=cardId<sequence>, for example cardId0, cardId1 etc/. Key must start with "cardId" and must be unique <br>
   * value=<Id>, id of card which was received previusly.
   * 
   * @return \CardContract Набор атрибутов договора клиента на обслуживание карточного счета
   * 
   * @throws \WrongSessionException
   * @throws \OperationDeniedException
   * @throws \PreconditionException
   * @throws \ExtendedAuthenticationRequired
   * @throws \IbankServerException
   * @throws \BackendValidationException client_not_found - не найден клиент <br>
   * contract_not_found - не найден контракт <br>
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function fetchCardContractDetails($token, $cardContractId, \Attributes $attributes);
  /**
   * @param string $token
   * @param string $accountContractId
   * @param \Attributes $attributes
   * @return \AccountContract Account contract. Represents contract of maintaining standard banking account.
   * 
   * @throws \WrongSessionException
   * @throws \OperationDeniedException
   * @throws \PreconditionException
   * @throws \ExtendedAuthenticationRequired
   * @throws \IbankServerException
   * @throws \BackendValidationException client_not_found - не найден клиент <br>
   * contract_not_found - не найден контракт <br>
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function fetchAccountContractDetails($token, $accountContractId, \Attributes $attributes);
  /**
   * @param string $token
   * @param string $creditContractId
   * @param \Attributes $attributes
   * @return \CreditContract
   * @throws \WrongSessionException
   * @throws \OperationDeniedException
   * @throws \PreconditionException
   * @throws \ExtendedAuthenticationRequired
   * @throws \IbankServerException
   * @throws \BackendValidationException client_not_found - не найден клиент
   * contract_not_found - не найден контракт
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function fetchCreditContractDetails($token, $creditContractId, \Attributes $attributes);
  /**
   * @param string $token
   * @param string $depositContractId
   * @param \Attributes $attributes
   * @return \DepositContract Набор атрибутов договора клиента на обслуживание карточного счета
   * 
   * @throws \WrongSessionException
   * @throws \OperationDeniedException
   * @throws \PreconditionException
   * @throws \ExtendedAuthenticationRequired
   * @throws \IbankServerException
   * @throws \BackendValidationException client_not_found - не найден клиент <br>
   * contract_not_found - не найден контракт <br>
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function fetchDepositContractDetails($token, $depositContractId, \Attributes $attributes);
}


class ContractsServiceClient implements \ContractsServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function findAllCardContracts($token, \Attributes $attributes)
  {
    $this->send_findAllCardContracts($token, $attributes);
    return $this->recv_findAllCardContracts();
  }

  public function send_findAllCardContracts($token, \Attributes $attributes)
  {
    $args = new \ContractsService_findAllCardContracts_args();
    $args->token = $token;
    $args->attributes = $attributes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findAllCardContracts', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findAllCardContracts', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findAllCardContracts()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ContractsService_findAllCardContracts_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ContractsService_findAllCardContracts_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->backendException !== null) {
      throw $result->backendException;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("findAllCardContracts failed: unknown result");
  }

  public function findAllAccountContracts($token, \Attributes $attributes)
  {
    $this->send_findAllAccountContracts($token, $attributes);
    return $this->recv_findAllAccountContracts();
  }

  public function send_findAllAccountContracts($token, \Attributes $attributes)
  {
    $args = new \ContractsService_findAllAccountContracts_args();
    $args->token = $token;
    $args->attributes = $attributes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findAllAccountContracts', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findAllAccountContracts', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findAllAccountContracts()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ContractsService_findAllAccountContracts_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ContractsService_findAllAccountContracts_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->backendException !== null) {
      throw $result->backendException;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("findAllAccountContracts failed: unknown result");
  }

  public function findAllCreditContracts($token, \Attributes $attributes)
  {
    $this->send_findAllCreditContracts($token, $attributes);
    return $this->recv_findAllCreditContracts();
  }

  public function send_findAllCreditContracts($token, \Attributes $attributes)
  {
    $args = new \ContractsService_findAllCreditContracts_args();
    $args->token = $token;
    $args->attributes = $attributes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findAllCreditContracts', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findAllCreditContracts', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findAllCreditContracts()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ContractsService_findAllCreditContracts_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ContractsService_findAllCreditContracts_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->backendException !== null) {
      throw $result->backendException;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("findAllCreditContracts failed: unknown result");
  }

  public function findAllDepositContracts($token, \Attributes $attributes)
  {
    $this->send_findAllDepositContracts($token, $attributes);
    return $this->recv_findAllDepositContracts();
  }

  public function send_findAllDepositContracts($token, \Attributes $attributes)
  {
    $args = new \ContractsService_findAllDepositContracts_args();
    $args->token = $token;
    $args->attributes = $attributes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findAllDepositContracts', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findAllDepositContracts', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findAllDepositContracts()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ContractsService_findAllDepositContracts_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ContractsService_findAllDepositContracts_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->backendException !== null) {
      throw $result->backendException;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("findAllDepositContracts failed: unknown result");
  }

  public function fetchCardContract($token, $cardContractId, \Attributes $attributes)
  {
    $this->send_fetchCardContract($token, $cardContractId, $attributes);
    return $this->recv_fetchCardContract();
  }

  public function send_fetchCardContract($token, $cardContractId, \Attributes $attributes)
  {
    $args = new \ContractsService_fetchCardContract_args();
    $args->token = $token;
    $args->cardContractId = $cardContractId;
    $args->attributes = $attributes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'fetchCardContract', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('fetchCardContract', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_fetchCardContract()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ContractsService_fetchCardContract_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ContractsService_fetchCardContract_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->preconditionException !== null) {
      throw $result->preconditionException;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->backendException !== null) {
      throw $result->backendException;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("fetchCardContract failed: unknown result");
  }

  public function fetchAccountContract($token, $accountContractId, \Attributes $attributes)
  {
    $this->send_fetchAccountContract($token, $accountContractId, $attributes);
    return $this->recv_fetchAccountContract();
  }

  public function send_fetchAccountContract($token, $accountContractId, \Attributes $attributes)
  {
    $args = new \ContractsService_fetchAccountContract_args();
    $args->token = $token;
    $args->accountContractId = $accountContractId;
    $args->attributes = $attributes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'fetchAccountContract', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('fetchAccountContract', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_fetchAccountContract()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ContractsService_fetchAccountContract_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ContractsService_fetchAccountContract_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->preconditionException !== null) {
      throw $result->preconditionException;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->backendException !== null) {
      throw $result->backendException;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("fetchAccountContract failed: unknown result");
  }

  public function fetchCreditContract($token, $creditContractId, \Attributes $attributes)
  {
    $this->send_fetchCreditContract($token, $creditContractId, $attributes);
    return $this->recv_fetchCreditContract();
  }

  public function send_fetchCreditContract($token, $creditContractId, \Attributes $attributes)
  {
    $args = new \ContractsService_fetchCreditContract_args();
    $args->token = $token;
    $args->creditContractId = $creditContractId;
    $args->attributes = $attributes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'fetchCreditContract', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('fetchCreditContract', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_fetchCreditContract()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ContractsService_fetchCreditContract_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ContractsService_fetchCreditContract_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->preconditionException !== null) {
      throw $result->preconditionException;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->backendException !== null) {
      throw $result->backendException;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("fetchCreditContract failed: unknown result");
  }

  public function fetchDepositContract($token, $depositContractId, \Attributes $attributes)
  {
    $this->send_fetchDepositContract($token, $depositContractId, $attributes);
    return $this->recv_fetchDepositContract();
  }

  public function send_fetchDepositContract($token, $depositContractId, \Attributes $attributes)
  {
    $args = new \ContractsService_fetchDepositContract_args();
    $args->token = $token;
    $args->depositContractId = $depositContractId;
    $args->attributes = $attributes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'fetchDepositContract', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('fetchDepositContract', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_fetchDepositContract()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ContractsService_fetchDepositContract_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ContractsService_fetchDepositContract_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->preconditionException !== null) {
      throw $result->preconditionException;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->backendException !== null) {
      throw $result->backendException;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("fetchDepositContract failed: unknown result");
  }

  public function fetchCardContractDetails($token, $cardContractId, \Attributes $attributes)
  {
    $this->send_fetchCardContractDetails($token, $cardContractId, $attributes);
    return $this->recv_fetchCardContractDetails();
  }

  public function send_fetchCardContractDetails($token, $cardContractId, \Attributes $attributes)
  {
    $args = new \ContractsService_fetchCardContractDetails_args();
    $args->token = $token;
    $args->cardContractId = $cardContractId;
    $args->attributes = $attributes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'fetchCardContractDetails', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('fetchCardContractDetails', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_fetchCardContractDetails()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ContractsService_fetchCardContractDetails_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ContractsService_fetchCardContractDetails_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->preconditionException !== null) {
      throw $result->preconditionException;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->backendException !== null) {
      throw $result->backendException;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("fetchCardContractDetails failed: unknown result");
  }

  public function fetchAccountContractDetails($token, $accountContractId, \Attributes $attributes)
  {
    $this->send_fetchAccountContractDetails($token, $accountContractId, $attributes);
    return $this->recv_fetchAccountContractDetails();
  }

  public function send_fetchAccountContractDetails($token, $accountContractId, \Attributes $attributes)
  {
    $args = new \ContractsService_fetchAccountContractDetails_args();
    $args->token = $token;
    $args->accountContractId = $accountContractId;
    $args->attributes = $attributes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'fetchAccountContractDetails', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('fetchAccountContractDetails', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_fetchAccountContractDetails()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ContractsService_fetchAccountContractDetails_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ContractsService_fetchAccountContractDetails_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->preconditionException !== null) {
      throw $result->preconditionException;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->backendException !== null) {
      throw $result->backendException;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("fetchAccountContractDetails failed: unknown result");
  }

  public function fetchCreditContractDetails($token, $creditContractId, \Attributes $attributes)
  {
    $this->send_fetchCreditContractDetails($token, $creditContractId, $attributes);
    return $this->recv_fetchCreditContractDetails();
  }

  public function send_fetchCreditContractDetails($token, $creditContractId, \Attributes $attributes)
  {
    $args = new \ContractsService_fetchCreditContractDetails_args();
    $args->token = $token;
    $args->creditContractId = $creditContractId;
    $args->attributes = $attributes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'fetchCreditContractDetails', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('fetchCreditContractDetails', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_fetchCreditContractDetails()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ContractsService_fetchCreditContractDetails_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ContractsService_fetchCreditContractDetails_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->preconditionException !== null) {
      throw $result->preconditionException;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->backendException !== null) {
      throw $result->backendException;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("fetchCreditContractDetails failed: unknown result");
  }

  public function fetchDepositContractDetails($token, $depositContractId, \Attributes $attributes)
  {
    $this->send_fetchDepositContractDetails($token, $depositContractId, $attributes);
    return $this->recv_fetchDepositContractDetails();
  }

  public function send_fetchDepositContractDetails($token, $depositContractId, \Attributes $attributes)
  {
    $args = new \ContractsService_fetchDepositContractDetails_args();
    $args->token = $token;
    $args->depositContractId = $depositContractId;
    $args->attributes = $attributes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'fetchDepositContractDetails', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('fetchDepositContractDetails', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_fetchDepositContractDetails()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ContractsService_fetchDepositContractDetails_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ContractsService_fetchDepositContractDetails_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->preconditionException !== null) {
      throw $result->preconditionException;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->backendException !== null) {
      throw $result->backendException;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("fetchDepositContractDetails failed: unknown result");
  }

}


// HELPER FUNCTIONS AND STRUCTURES

class ContractsService_findAllCardContracts_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var \Attributes
   */
  public $attributes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'attributes',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
    }
  }

  public function getName() {
    return 'ContractsService_findAllCardContracts_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->attributes = new \Attributes();
            $xfer += $this->attributes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractsService_findAllCardContracts_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_object($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::STRUCT, 2);
      $xfer += $this->attributes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractsService_findAllCardContracts_result {
  static $_TSPEC;

  /**
   * @var \CardContract[]
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * client_not_found - не найден клиент
   * 
   * 
   * @var \BackendValidationException
   */
  public $backendException = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\CardContract',
            ),
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        3 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        4 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        5 => array(
          'var' => 'backendException',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        6 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['backendException'])) {
        $this->backendException = $vals['backendException'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'ContractsService_findAllCardContracts_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size227 = 0;
            $_etype230 = 0;
            $xfer += $input->readListBegin($_etype230, $_size227);
            for ($_i231 = 0; $_i231 < $_size227; ++$_i231)
            {
              $elem232 = null;
              $elem232 = new \CardContract();
              $xfer += $elem232->read($input);
              $this->success []= $elem232;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->backendException = new \BackendValidationException();
            $xfer += $this->backendException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractsService_findAllCardContracts_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter233)
          {
            $xfer += $iter233->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 2);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 3);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 4);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendException !== null) {
      $xfer += $output->writeFieldBegin('backendException', TType::STRUCT, 5);
      $xfer += $this->backendException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 6);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractsService_findAllAccountContracts_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var \Attributes
   */
  public $attributes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'attributes',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
    }
  }

  public function getName() {
    return 'ContractsService_findAllAccountContracts_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->attributes = new \Attributes();
            $xfer += $this->attributes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractsService_findAllAccountContracts_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_object($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::STRUCT, 2);
      $xfer += $this->attributes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractsService_findAllAccountContracts_result {
  static $_TSPEC;

  /**
   * @var \AccountContract[]
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * client_not_found - не найден клиент
   * 
   * 
   * @var \BackendValidationException
   */
  public $backendException = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\AccountContract',
            ),
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        3 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        4 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        5 => array(
          'var' => 'backendException',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        6 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['backendException'])) {
        $this->backendException = $vals['backendException'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'ContractsService_findAllAccountContracts_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size234 = 0;
            $_etype237 = 0;
            $xfer += $input->readListBegin($_etype237, $_size234);
            for ($_i238 = 0; $_i238 < $_size234; ++$_i238)
            {
              $elem239 = null;
              $elem239 = new \AccountContract();
              $xfer += $elem239->read($input);
              $this->success []= $elem239;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->backendException = new \BackendValidationException();
            $xfer += $this->backendException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractsService_findAllAccountContracts_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter240)
          {
            $xfer += $iter240->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 2);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 3);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 4);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendException !== null) {
      $xfer += $output->writeFieldBegin('backendException', TType::STRUCT, 5);
      $xfer += $this->backendException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 6);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractsService_findAllCreditContracts_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var \Attributes
   */
  public $attributes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'attributes',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
    }
  }

  public function getName() {
    return 'ContractsService_findAllCreditContracts_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->attributes = new \Attributes();
            $xfer += $this->attributes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractsService_findAllCreditContracts_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_object($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::STRUCT, 2);
      $xfer += $this->attributes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractsService_findAllCreditContracts_result {
  static $_TSPEC;

  /**
   * @var \CreditContract[]
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * client_not_found - не найден клиент
   * 
   * 
   * @var \BackendValidationException
   */
  public $backendException = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\CreditContract',
            ),
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        3 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        4 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        5 => array(
          'var' => 'backendException',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        6 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['backendException'])) {
        $this->backendException = $vals['backendException'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'ContractsService_findAllCreditContracts_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size241 = 0;
            $_etype244 = 0;
            $xfer += $input->readListBegin($_etype244, $_size241);
            for ($_i245 = 0; $_i245 < $_size241; ++$_i245)
            {
              $elem246 = null;
              $elem246 = new \CreditContract();
              $xfer += $elem246->read($input);
              $this->success []= $elem246;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->backendException = new \BackendValidationException();
            $xfer += $this->backendException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractsService_findAllCreditContracts_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter247)
          {
            $xfer += $iter247->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 2);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 3);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 4);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendException !== null) {
      $xfer += $output->writeFieldBegin('backendException', TType::STRUCT, 5);
      $xfer += $this->backendException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 6);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractsService_findAllDepositContracts_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var \Attributes
   */
  public $attributes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'attributes',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
    }
  }

  public function getName() {
    return 'ContractsService_findAllDepositContracts_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->attributes = new \Attributes();
            $xfer += $this->attributes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractsService_findAllDepositContracts_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_object($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::STRUCT, 2);
      $xfer += $this->attributes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractsService_findAllDepositContracts_result {
  static $_TSPEC;

  /**
   * @var \DepositContract[]
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * client_not_found - не найден клиент
   * 
   * 
   * @var \BackendValidationException
   */
  public $backendException = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\DepositContract',
            ),
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        3 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        4 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        5 => array(
          'var' => 'backendException',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        6 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['backendException'])) {
        $this->backendException = $vals['backendException'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'ContractsService_findAllDepositContracts_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size248 = 0;
            $_etype251 = 0;
            $xfer += $input->readListBegin($_etype251, $_size248);
            for ($_i252 = 0; $_i252 < $_size248; ++$_i252)
            {
              $elem253 = null;
              $elem253 = new \DepositContract();
              $xfer += $elem253->read($input);
              $this->success []= $elem253;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->backendException = new \BackendValidationException();
            $xfer += $this->backendException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractsService_findAllDepositContracts_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter254)
          {
            $xfer += $iter254->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 2);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 3);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 4);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendException !== null) {
      $xfer += $output->writeFieldBegin('backendException', TType::STRUCT, 5);
      $xfer += $this->backendException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 6);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractsService_fetchCardContract_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $cardContractId = null;
  /**
   * @var \Attributes
   */
  public $attributes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cardContractId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'attributes',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['cardContractId'])) {
        $this->cardContractId = $vals['cardContractId'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
    }
  }

  public function getName() {
    return 'ContractsService_fetchCardContract_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cardContractId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->attributes = new \Attributes();
            $xfer += $this->attributes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractsService_fetchCardContract_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardContractId !== null) {
      $xfer += $output->writeFieldBegin('cardContractId', TType::STRING, 2);
      $xfer += $output->writeString($this->cardContractId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_object($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::STRUCT, 3);
      $xfer += $this->attributes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractsService_fetchCardContract_result {
  static $_TSPEC;

  /**
   * @var \CardContract
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \PreconditionException
   */
  public $preconditionException = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * client_not_found - не найден клиент <br>
   * contract_not_found - не найден контракт <br>
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * @var \BackendValidationException
   */
  public $backendException = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\CardContract',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        3 => array(
          'var' => 'preconditionException',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        4 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'backendException',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        7 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['preconditionException'])) {
        $this->preconditionException = $vals['preconditionException'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['backendException'])) {
        $this->backendException = $vals['backendException'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'ContractsService_fetchCardContract_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \CardContract();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->preconditionException = new \PreconditionException();
            $xfer += $this->preconditionException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->backendException = new \BackendValidationException();
            $xfer += $this->backendException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractsService_fetchCardContract_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 2);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->preconditionException !== null) {
      $xfer += $output->writeFieldBegin('preconditionException', TType::STRUCT, 3);
      $xfer += $this->preconditionException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 4);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendException !== null) {
      $xfer += $output->writeFieldBegin('backendException', TType::STRUCT, 6);
      $xfer += $this->backendException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 7);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractsService_fetchAccountContract_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $accountContractId = null;
  /**
   * @var \Attributes
   */
  public $attributes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'accountContractId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'attributes',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['accountContractId'])) {
        $this->accountContractId = $vals['accountContractId'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
    }
  }

  public function getName() {
    return 'ContractsService_fetchAccountContract_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accountContractId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->attributes = new \Attributes();
            $xfer += $this->attributes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractsService_fetchAccountContract_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accountContractId !== null) {
      $xfer += $output->writeFieldBegin('accountContractId', TType::STRING, 2);
      $xfer += $output->writeString($this->accountContractId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_object($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::STRUCT, 3);
      $xfer += $this->attributes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractsService_fetchAccountContract_result {
  static $_TSPEC;

  /**
   * @var \AccountContract
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \PreconditionException
   */
  public $preconditionException = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * client_not_found - не найден клиент <br>
   * contract_not_found - не найден контракт <br>
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * @var \BackendValidationException
   */
  public $backendException = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\AccountContract',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        3 => array(
          'var' => 'preconditionException',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        4 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'backendException',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        7 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['preconditionException'])) {
        $this->preconditionException = $vals['preconditionException'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['backendException'])) {
        $this->backendException = $vals['backendException'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'ContractsService_fetchAccountContract_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \AccountContract();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->preconditionException = new \PreconditionException();
            $xfer += $this->preconditionException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->backendException = new \BackendValidationException();
            $xfer += $this->backendException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractsService_fetchAccountContract_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 2);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->preconditionException !== null) {
      $xfer += $output->writeFieldBegin('preconditionException', TType::STRUCT, 3);
      $xfer += $this->preconditionException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 4);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendException !== null) {
      $xfer += $output->writeFieldBegin('backendException', TType::STRUCT, 6);
      $xfer += $this->backendException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 7);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractsService_fetchCreditContract_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $creditContractId = null;
  /**
   * @var \Attributes
   */
  public $attributes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'creditContractId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'attributes',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['creditContractId'])) {
        $this->creditContractId = $vals['creditContractId'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
    }
  }

  public function getName() {
    return 'ContractsService_fetchCreditContract_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->creditContractId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->attributes = new \Attributes();
            $xfer += $this->attributes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractsService_fetchCreditContract_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creditContractId !== null) {
      $xfer += $output->writeFieldBegin('creditContractId', TType::STRING, 2);
      $xfer += $output->writeString($this->creditContractId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_object($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::STRUCT, 3);
      $xfer += $this->attributes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractsService_fetchCreditContract_result {
  static $_TSPEC;

  /**
   * @var \CreditContract
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \PreconditionException
   */
  public $preconditionException = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * client_not_found - не найден клиент <br>
   * contract_not_found - не найден контракт <br>
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * @var \BackendValidationException
   */
  public $backendException = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\CreditContract',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        3 => array(
          'var' => 'preconditionException',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        4 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'backendException',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        7 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['preconditionException'])) {
        $this->preconditionException = $vals['preconditionException'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['backendException'])) {
        $this->backendException = $vals['backendException'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'ContractsService_fetchCreditContract_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \CreditContract();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->preconditionException = new \PreconditionException();
            $xfer += $this->preconditionException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->backendException = new \BackendValidationException();
            $xfer += $this->backendException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractsService_fetchCreditContract_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 2);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->preconditionException !== null) {
      $xfer += $output->writeFieldBegin('preconditionException', TType::STRUCT, 3);
      $xfer += $this->preconditionException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 4);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendException !== null) {
      $xfer += $output->writeFieldBegin('backendException', TType::STRUCT, 6);
      $xfer += $this->backendException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 7);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractsService_fetchDepositContract_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $depositContractId = null;
  /**
   * @var \Attributes
   */
  public $attributes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'depositContractId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'attributes',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['depositContractId'])) {
        $this->depositContractId = $vals['depositContractId'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
    }
  }

  public function getName() {
    return 'ContractsService_fetchDepositContract_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->depositContractId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->attributes = new \Attributes();
            $xfer += $this->attributes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractsService_fetchDepositContract_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->depositContractId !== null) {
      $xfer += $output->writeFieldBegin('depositContractId', TType::STRING, 2);
      $xfer += $output->writeString($this->depositContractId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_object($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::STRUCT, 3);
      $xfer += $this->attributes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractsService_fetchDepositContract_result {
  static $_TSPEC;

  /**
   * @var \DepositContract
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \PreconditionException
   */
  public $preconditionException = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * client_not_found - не найден клиент <br>
   * contract_not_found - не найден контракт <br>
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * @var \BackendValidationException
   */
  public $backendException = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\DepositContract',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        3 => array(
          'var' => 'preconditionException',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        4 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'backendException',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        7 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['preconditionException'])) {
        $this->preconditionException = $vals['preconditionException'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['backendException'])) {
        $this->backendException = $vals['backendException'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'ContractsService_fetchDepositContract_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \DepositContract();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->preconditionException = new \PreconditionException();
            $xfer += $this->preconditionException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->backendException = new \BackendValidationException();
            $xfer += $this->backendException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractsService_fetchDepositContract_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 2);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->preconditionException !== null) {
      $xfer += $output->writeFieldBegin('preconditionException', TType::STRUCT, 3);
      $xfer += $this->preconditionException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 4);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendException !== null) {
      $xfer += $output->writeFieldBegin('backendException', TType::STRUCT, 6);
      $xfer += $this->backendException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 7);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractsService_fetchCardContractDetails_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $cardContractId = null;
  /**
   * In the case that details need  received only for one card or a specific list, then to the attributes must be added pairs kay / value in the next manear: <br>
   * key=cardId<sequence>, for example cardId0, cardId1 etc/. Key must start with "cardId" and must be unique <br>
   * value=<Id>, id of card which was received previusly.
   * 
   * @var \Attributes
   */
  public $attributes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cardContractId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'attributes',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['cardContractId'])) {
        $this->cardContractId = $vals['cardContractId'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
    }
  }

  public function getName() {
    return 'ContractsService_fetchCardContractDetails_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cardContractId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->attributes = new \Attributes();
            $xfer += $this->attributes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractsService_fetchCardContractDetails_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardContractId !== null) {
      $xfer += $output->writeFieldBegin('cardContractId', TType::STRING, 2);
      $xfer += $output->writeString($this->cardContractId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_object($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::STRUCT, 3);
      $xfer += $this->attributes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractsService_fetchCardContractDetails_result {
  static $_TSPEC;

  /**
   * @var \CardContract
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \PreconditionException
   */
  public $preconditionException = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * client_not_found - не найден клиент <br>
   * contract_not_found - не найден контракт <br>
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * @var \BackendValidationException
   */
  public $backendException = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\CardContract',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        3 => array(
          'var' => 'preconditionException',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        4 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'backendException',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        7 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['preconditionException'])) {
        $this->preconditionException = $vals['preconditionException'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['backendException'])) {
        $this->backendException = $vals['backendException'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'ContractsService_fetchCardContractDetails_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \CardContract();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->preconditionException = new \PreconditionException();
            $xfer += $this->preconditionException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->backendException = new \BackendValidationException();
            $xfer += $this->backendException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractsService_fetchCardContractDetails_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 2);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->preconditionException !== null) {
      $xfer += $output->writeFieldBegin('preconditionException', TType::STRUCT, 3);
      $xfer += $this->preconditionException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 4);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendException !== null) {
      $xfer += $output->writeFieldBegin('backendException', TType::STRUCT, 6);
      $xfer += $this->backendException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 7);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractsService_fetchAccountContractDetails_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $accountContractId = null;
  /**
   * @var \Attributes
   */
  public $attributes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'accountContractId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'attributes',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['accountContractId'])) {
        $this->accountContractId = $vals['accountContractId'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
    }
  }

  public function getName() {
    return 'ContractsService_fetchAccountContractDetails_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accountContractId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->attributes = new \Attributes();
            $xfer += $this->attributes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractsService_fetchAccountContractDetails_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accountContractId !== null) {
      $xfer += $output->writeFieldBegin('accountContractId', TType::STRING, 2);
      $xfer += $output->writeString($this->accountContractId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_object($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::STRUCT, 3);
      $xfer += $this->attributes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractsService_fetchAccountContractDetails_result {
  static $_TSPEC;

  /**
   * @var \AccountContract
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \PreconditionException
   */
  public $preconditionException = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * client_not_found - не найден клиент <br>
   * contract_not_found - не найден контракт <br>
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * @var \BackendValidationException
   */
  public $backendException = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\AccountContract',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        3 => array(
          'var' => 'preconditionException',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        4 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'backendException',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        7 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['preconditionException'])) {
        $this->preconditionException = $vals['preconditionException'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['backendException'])) {
        $this->backendException = $vals['backendException'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'ContractsService_fetchAccountContractDetails_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \AccountContract();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->preconditionException = new \PreconditionException();
            $xfer += $this->preconditionException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->backendException = new \BackendValidationException();
            $xfer += $this->backendException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractsService_fetchAccountContractDetails_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 2);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->preconditionException !== null) {
      $xfer += $output->writeFieldBegin('preconditionException', TType::STRUCT, 3);
      $xfer += $this->preconditionException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 4);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendException !== null) {
      $xfer += $output->writeFieldBegin('backendException', TType::STRUCT, 6);
      $xfer += $this->backendException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 7);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractsService_fetchCreditContractDetails_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $creditContractId = null;
  /**
   * @var \Attributes
   */
  public $attributes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'creditContractId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'attributes',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['creditContractId'])) {
        $this->creditContractId = $vals['creditContractId'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
    }
  }

  public function getName() {
    return 'ContractsService_fetchCreditContractDetails_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->creditContractId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->attributes = new \Attributes();
            $xfer += $this->attributes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractsService_fetchCreditContractDetails_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creditContractId !== null) {
      $xfer += $output->writeFieldBegin('creditContractId', TType::STRING, 2);
      $xfer += $output->writeString($this->creditContractId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_object($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::STRUCT, 3);
      $xfer += $this->attributes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractsService_fetchCreditContractDetails_result {
  static $_TSPEC;

  /**
   * @var \CreditContract
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \PreconditionException
   */
  public $preconditionException = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * client_not_found - не найден клиент
   * contract_not_found - не найден контракт
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * @var \BackendValidationException
   */
  public $backendException = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\CreditContract',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        3 => array(
          'var' => 'preconditionException',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        4 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'backendException',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        7 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['preconditionException'])) {
        $this->preconditionException = $vals['preconditionException'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['backendException'])) {
        $this->backendException = $vals['backendException'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'ContractsService_fetchCreditContractDetails_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \CreditContract();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->preconditionException = new \PreconditionException();
            $xfer += $this->preconditionException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->backendException = new \BackendValidationException();
            $xfer += $this->backendException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractsService_fetchCreditContractDetails_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 2);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->preconditionException !== null) {
      $xfer += $output->writeFieldBegin('preconditionException', TType::STRUCT, 3);
      $xfer += $this->preconditionException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 4);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendException !== null) {
      $xfer += $output->writeFieldBegin('backendException', TType::STRUCT, 6);
      $xfer += $this->backendException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 7);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractsService_fetchDepositContractDetails_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $depositContractId = null;
  /**
   * @var \Attributes
   */
  public $attributes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'depositContractId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'attributes',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['depositContractId'])) {
        $this->depositContractId = $vals['depositContractId'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
    }
  }

  public function getName() {
    return 'ContractsService_fetchDepositContractDetails_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->depositContractId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->attributes = new \Attributes();
            $xfer += $this->attributes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractsService_fetchDepositContractDetails_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->depositContractId !== null) {
      $xfer += $output->writeFieldBegin('depositContractId', TType::STRING, 2);
      $xfer += $output->writeString($this->depositContractId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_object($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::STRUCT, 3);
      $xfer += $this->attributes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractsService_fetchDepositContractDetails_result {
  static $_TSPEC;

  /**
   * @var \DepositContract
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \PreconditionException
   */
  public $preconditionException = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * client_not_found - не найден клиент <br>
   * contract_not_found - не найден контракт <br>
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * 
   * @var \BackendValidationException
   */
  public $backendException = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\DepositContract',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        3 => array(
          'var' => 'preconditionException',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        4 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'backendException',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        7 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['preconditionException'])) {
        $this->preconditionException = $vals['preconditionException'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['backendException'])) {
        $this->backendException = $vals['backendException'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'ContractsService_fetchDepositContractDetails_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \DepositContract();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->preconditionException = new \PreconditionException();
            $xfer += $this->preconditionException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->backendException = new \BackendValidationException();
            $xfer += $this->backendException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractsService_fetchDepositContractDetails_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 2);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->preconditionException !== null) {
      $xfer += $output->writeFieldBegin('preconditionException', TType::STRUCT, 3);
      $xfer += $this->preconditionException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 4);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendException !== null) {
      $xfer += $output->writeFieldBegin('backendException', TType::STRUCT, 6);
      $xfer += $this->backendException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 7);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


