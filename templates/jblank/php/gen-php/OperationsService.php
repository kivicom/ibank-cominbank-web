<?php
/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface OperationsServiceIf {
  /**
   * @param string $token
   * @return \OperationTemplate[]
   * @throws \WrongSessionException
   * @throws \ExecuteTemplateException
   * @throws \ExtendedAuthenticationRequired
   * @throws \IbankServerException
   * @throws \IbankIntegrationLayerException
   */
  public function findAllOperationTemplates($token);
  /**
   * @Deprecated, use executeTemplate instead
   * 
   * @param string $token
   * @param string $operationTemplateId
   * @param int $sum
   * @param \Attributes $attr
   * @return string
   * @throws \WrongSessionException
   * @throws \ExecuteTemplateException
   * @throws \ExtendedAuthenticationRequired
   * @throws \IbankServerException
   * @throws \OperationDeniedException
   */
  public function execute($token, $operationTemplateId, $sum, \Attributes $attr);
  /**
   * @Deprecated, use executeCashExpenseOperation instead
   * 
   * @param string $token
   * @param \CashExpenseOperation $operation
   * @return \CashExpenseOperation Структура определяет данные операции регистрации
   * наличных расходов (или доходов).
   * При этом операция считается как "расход" при отрицательном поле balance
   * а "доходом" при положительном балансе
   * 
   * @throws \WrongSessionException
   * @throws \OperationDeniedException
   * @throws \PreconditionException
   * @throws \IbankServerException
   * @throws \ExtendedAuthenticationRequired
   */
  public function executeOperation($token, \CashExpenseOperation $operation);
  /**
   *     * @Deprecated, use prefaceTemplateOperation + executeTemplateOperation
   * *
   * 
   * @param string $token
   * @param string $operationTemplateId
   * @param int $sum
   * @param \Attributes $attr
   * @return string
   * @throws \WrongSessionException
   * @throws \ExecuteTemplateException
   * @throws \ExtendedAuthenticationRequired
   * @throws \IbankServerException
   * @throws \OperationDeniedException
   */
  public function executeTemplate($token, $operationTemplateId, $sum, \Attributes $attr);
  /**
   * Предварительный расчет/проверка финансовой операции по шаблону.
   * Нужен шаблон, сумма и источник (договор/счет) с которого будет выполняться платеж.
   * В ответ будет отправляться заполненный документ, позволящий найти комиссию, требование
   * расширенной аутентификации, лимит, дополнительно инициированные аттрибуты и т.п. (см. FinancialOperation.operationConditions)
   * и другие заполненные аттрибуты в соответствии с шаблоном: см. обязательные аттрибуты FinancialOperation для
   * каждого типа финансовой операции (как минимум FinancialOperation.type, FinancialOperation.amount,
   * FinancialOperation.templateId, FinancialOperation.srcContractRef)
   * 
   * @param string $token
   * @param string $templateId
   * @param int $amount
   * @param \ContractReference $source
   * @param \Attributes $attributes
   * @return \FinancialOperation Иерархия финансовых операций. Состоит из сборника всех свойств всех финансовых операций.
   * Необходима из-за отсутсвия наследования и полиморфизма, в случае, когда нужно вернуть список
   * операций за период, например, а список содержит разнородные элементы: P2P, CashExpense, Contract2Contract и др.
   * 
   * 
   * @throws \WrongSessionException если неправильная или просроченная сессия
   * 
   * @throws \OperationDeniedException если не прошла проверка rules.xml:allow/deny
   * 
   * @throws \PreconditionException если не прошли другие проверки
   * 
   * @throws \IbankServerException технические/коммуникационные проблемы на стороне сервера
   * 
   * @throws \BackendValidationException
   * @throws \IbankIntegrationLayerException
   */
  public function prefaceTemplateOperation($token, $templateId, $amount, \ContractReference $source, \Attributes $attributes);
  /**
   * Выполнение финансовой операции по шаблону.
   * Нужен шаблон, сумма и источник (договор/счет) с которого будет выполняться платеж.
   * В ответ будет отправляться либо сохраненная операция с текущим статусом и прочими данными финансовой операции,
   * либо ошибки
   * 
   * @param string $token
   * @param string $templateId
   * @param int $amount
   * @param \ContractReference $source
   * @param \Attributes $attributes
   * @return \FinancialOperation Иерархия финансовых операций. Состоит из сборника всех свойств всех финансовых операций.
   * Необходима из-за отсутсвия наследования и полиморфизма, в случае, когда нужно вернуть список
   * операций за период, например, а список содержит разнородные элементы: P2P, CashExpense, Contract2Contract и др.
   * 
   * 
   * @throws \WrongSessionException если неправильная или просроченная сессия
   * 
   * @throws \OperationDeniedException если не прошла проверка rules.xml:allow/deny
   * 
   * @throws \PreconditionException если не прошли другие проверки
   * 
   * @throws \ExtendedAuthenticationRequired если операция требует сессии с расширенной аутентификацией
   * 
   * @throws \IbankServerException технические/коммуникационные проблемы на стороне сервера
   * 
   * @throws \BackendValidationException Выполнение операции (например SEPTransfer) может подразумевать ошибки валидации бэк-энда
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function executeTemplateOperation($token, $templateId, $amount, \ContractReference $source, \Attributes $attributes);
  /**
   * Предварительный расчет/проверка финансовой операции "перевод СЭП".
   * Нужна операция СЭП в виде получателя и назначения платежа,
   * сумма и источник (договор/счет) с которого будет выполняться платеж.
   * В ответ будет отправляться заполненный документ FinancialOperation, позволящий найти комиссию, требование
   * расширенной аутентификации, лимит, дополнительно инициированные аттрибуты и т.п. (см. FinancialOperation.operationConditions)
   * и другие заполненные аттрибуты: см. обязательные аттрибуты FinancialOperation для
   * этого типа финансовой операции
   * (как минимум FinancialOperation.type, FinancialOperation.amount,
   * FinancialOperation.description=@param.destinationDescription, FinancialOperation.srcContractRef,
   * FinancialOperation.subjectSEP=@param.destination)
   * 
   * @param string $token
   * @param \OperationSubject $destination
   * @param string $destinationDescription
   * @param int $amountInCents
   * @param \ContractReference $source
   * @param \Attributes $attributes
   * @return \FinancialOperation Иерархия финансовых операций. Состоит из сборника всех свойств всех финансовых операций.
   * Необходима из-за отсутсвия наследования и полиморфизма, в случае, когда нужно вернуть список
   * операций за период, например, а список содержит разнородные элементы: P2P, CashExpense, Contract2Contract и др.
   * 
   * 
   * @throws \WrongSessionException если неправильная или просроченная сессия
   * 
   * @throws \OperationDeniedException если не прошла проверка rules.xml:allow/deny
   * 
   * @throws \PreconditionException если не прошли другие проверки
   * 
   * @throws \IbankServerException технические/коммуникационные проблемы на стороне сервера
   * 
   * @throws \BackendValidationException access_forbidden - когда клиент пробует использовать
   * чужой контракт
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function prefaceSEPTransferOperation($token, \OperationSubject $destination, $destinationDescription, $amountInCents, \ContractReference $source, \Attributes $attributes);
  /**
   * Выполнение финансовой операции "перевод SEP".
   * Нужна операция СЭП в виде получателя и назначения платежа,
   * сумма и источник (договор/счет) с которого будет выполняться платеж.
   * В ответ будет отправляться либо сохраненная операция с текущим статусом и прочими данными финансовой операции,
   * либо ошибки
   * Список кодов ошибок:
   * wrong_payment_purpose
   * wrong_destination_name
   * wrong_bankid_or_account_number
   * 
   * 
   * @param string $token
   * @param \OperationSubject $destination
   * @param string $destinationDescription
   * @param int $amountInCents
   * @param \ContractReference $source
   * @param \Attributes $attributes
   * @return \FinancialOperation Иерархия финансовых операций. Состоит из сборника всех свойств всех финансовых операций.
   * Необходима из-за отсутсвия наследования и полиморфизма, в случае, когда нужно вернуть список
   * операций за период, например, а список содержит разнородные элементы: P2P, CashExpense, Contract2Contract и др.
   * 
   * 
   * @throws \WrongSessionException если неправильная или просроченная сессия
   * 
   * @throws \OperationDeniedException если не прошла проверка rules.xml:allow/deny
   * 
   * @throws \PreconditionException если не прошли другие проверки
   * 
   * @throws \ExtendedAuthenticationRequired если операция требует сессии с расширенной аутентификацией
   * 
   * @throws \IbankServerException технические/коммуникационные проблемы на стороне сервера
   * 
   * @throws \BackendValidationException например бек-энд система сообщила что целевой счет числится как "подозреваемый в мошенничестве" и т.п.
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function executeSEPTransferOperation($token, \OperationSubject $destination, $destinationDescription, $amountInCents, \ContractReference $source, \Attributes $attributes);
  /**
   * Checks intrabank operation availability.
   * It filles the operation.subject.intrabankOperationSubject.challengeRequestValue for informing
   * user to be sure if operation target is right and/or ask user for confirmation
   * (should be delivered on execute phase in destination.challengeResponseValue field)
   * 
   * @param string $token Session token
   * 
   * @param \IntrabankOperationSubject $destination Target intrabank account. Only destination.identifierType and destination.identifier are mandatory
   * 
   * @param int $amountInCents Operation amount in cents. Operation currency will be detected from source contract main account currency
   * 
   * @param \ContractReference $source Reference to source (current client's) contract
   * 
   * @return \FinancialOperation Иерархия финансовых операций. Состоит из сборника всех свойств всех финансовых операций.
   * Необходима из-за отсутсвия наследования и полиморфизма, в случае, когда нужно вернуть список
   * операций за период, например, а список содержит разнородные элементы: P2P, CashExpense, Contract2Contract и др.
   * 
   * 
   * @throws \WrongSessionException если неправильная или просроченная сессия
   * 
   * @throws \OperationDeniedException если не прошла проверка rules.xml:allow/deny
   * 
   * @throws \PreconditionException если не прошли другие проверки
   * 
   * @throws \IbankServerException технические/коммуникационные проблемы на стороне сервера
   * 
   * @throws \BackendValidationException logical integration error
   * access_forbidden - когда клиент пробует использовать
   * чужой контракт
   * 
   * @throws \IbankIntegrationLayerException technition error during processing of operation on integration level of server
   * 
   */
  public function prefaceIntrabankTransferOperation($token, \IntrabankOperationSubject $destination, $amountInCents, \ContractReference $source);
  /**
   * Executes the intrabank operation. Client must provide destination with
   * all fields from preface-call and should provide values of
   * destination.challengeRequestValue (obtained from preface call)
   * and destination.challengeResponseValue
   * 
   * @param string $token Session token
   * 
   * @param \IntrabankOperationSubject $destination Target intrabank account. Fields destination.identifierType and destination.identifier are mandatory.
   * Fields destination.challengeRequestValue and destination.challengeResponseValue may present or not depending on server settings.
   * In simpliest case they both are copied operation.challengeRequestValue obtained from preface phase.
   * 
   * @param int $amountInCents Operation amount in cents. Operation currency will be detected from source contract main account currency
   * 
   * @param \ContractReference $source Reference to source (current client's) contract
   * 
   * @return \FinancialOperation Иерархия финансовых операций. Состоит из сборника всех свойств всех финансовых операций.
   * Необходима из-за отсутсвия наследования и полиморфизма, в случае, когда нужно вернуть список
   * операций за период, например, а список содержит разнородные элементы: P2P, CashExpense, Contract2Contract и др.
   * 
   * 
   * @throws \WrongSessionException если неправильная или просроченная сессия
   * 
   * @throws \OperationDeniedException если не прошла проверка rules.xml:allow/deny
   * 
   * @throws \PreconditionException если не прошли другие проверки
   * 
   * @throws \ExtendedAuthenticationRequired если операция требует сессии с расширенной аутентификацией
   * 
   * @throws \IbankServerException технические/коммуникационные проблемы на стороне сервера
   * 
   * @throws \BackendValidationException logical integration error
   * access_forbidden - когда клиент пробует использовать
   * чужой контракт
   * 
   * @throws \IbankIntegrationLayerException technition error during processing of operation on integration level of server
   * 
   */
  public function executeIntrabankTransferOperation($token, \IntrabankOperationSubject $destination, $amountInCents, \ContractReference $source);
  /**
   * @param string $token
   * @param string $id
   * @return \FinancialOperation Иерархия финансовых операций. Состоит из сборника всех свойств всех финансовых операций.
   * Необходима из-за отсутсвия наследования и полиморфизма, в случае, когда нужно вернуть список
   * операций за период, например, а список содержит разнородные элементы: P2P, CashExpense, Contract2Contract и др.
   * 
   * 
   * @throws \WrongSessionException если неправильная или просроченная сессия
   * 
   * @throws \OperationDeniedException если не прошла проверка rules.xml:allow/deny для read_contracts
   * 
   * @throws \PreconditionException если у пользователя нет операции
   * 
   * @throws \IbankServerException
   * @throws \IbankIntegrationLayerException
   */
  public function findFinancialOperationById($token, $id);
  /**
   * Задекларировать расход (или доход) наличных средств
   * 
   * @param string $token
   * @param \CashExpenseOperation $operation
   * @return \CashExpenseOperation Структура определяет данные операции регистрации
   * наличных расходов (или доходов).
   * При этом операция считается как "расход" при отрицательном поле balance
   * а "доходом" при положительном балансе
   * 
   * @throws \WrongSessionException
   * @throws \OperationDeniedException
   * @throws \PreconditionException
   * @throws \IbankServerException
   * @throws \ExtendedAuthenticationRequired
   * @throws \IbankIntegrationLayerException
   */
  public function executeCashExpenseOperation($token, \CashExpenseOperation $operation);
  /**
   * @Deprecated, use executeContractToContractOperation()
   * Предварительный вызов операции.
   * Служит для возможности выполнить все необходимые проверки разрешена ли такая операция, включая лимиты и расчет комиссий, а также нужна ли будет расширенная аутентификация
   * 
   * @param string $token
   * @param \ContractToContractOperation $operation
   * @return \ContractToContractOperation Операция перевода между собственными счетами (договорами на банковские продукты)
   * 
   * 
   * @throws \WrongSessionException
   * @throws \OperationDeniedException
   * @throws \PreconditionException
   * @throws \IbankServerException
   * @throws \BackendValidationException
   * @throws \IbankIntegrationLayerException
   */
  public function prefaceOperation($token, \ContractToContractOperation $operation);
  /**
   * Предварительный вызов операции.
   * Запрос на выполнение операции.
   * Отличие от предыдущего только в том, что операция:
   * 1. проверяется на необходимость расширенной аутентификации
   * 2. действительно выполняется
   * 
   * @param string $token
   * @param \ContractToContractOperation $operation
   * @return \ContractToContractOperation Операция перевода между собственными счетами (договорами на банковские продукты)
   * 
   * 
   * @throws \WrongSessionException
   * @throws \OperationDeniedException
   * @throws \PreconditionException insufficient_funds - если недостаточно средств на счете-источнике
   * 
   * @throws \IbankServerException
   * @throws \ExtendedAuthenticationRequired
   * @throws \BackendValidationException например, если банковский бек-энд по собственым павилам проверил и сообщил о несовместимости перевода именно между этими счетами
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function executeContractToContractOperation($token, \ContractToContractOperation $operation);
  /**
   * Навигация по категориям каталога
   * 
   * 
   * @param string $token
   * @param string $parentCategoryId идентификатор родительской категории; если не указан, то в результате будут получены корневые категории каталога
   * 
   * @return \BillerCategory[]
   * @throws \WrongSessionException
   * @throws \PreconditionException - wrong_category_id: в случае, если в каталоге нет такой категории
   * 
   * 
   * @throws \IbankServerException Технические или коммуникационные ошибки
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function fetchBillerCategories($token, $parentCategoryId);
  /**
   * Возвращает массив категорий, которые образуют пусть к запрошенной категории.
   * Запрошенная категория всегда будет последней в этом массиве.
   * Первая категория -- корневая.
   * В случае, если запрошенна я категория и есть корневая, массив будет состоять из одного элемента (этой запрошенной категории)
   * 
   * 
   * @param string $token
   * @param string $categoryId идентификатор искомой категории; если не указан, то ошибка 'empty_category_id'
   * 
   * @return \BillerCategory[]
   * @throws \WrongSessionException
   * @throws \PreconditionException - empty_category_id: если категория не указана
   * - wrong_category_id: в случае,  если в каталоге нет такой категории
   * 
   * 
   * @throws \IbankServerException Технические или коммуникационные ошибки
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function fetchBillerCategoryPath($token, $categoryId);
  /**
   * Поиск биллеров.
   * 
   * 
   * @param string $token
   * @param string $searchQuery Строка поиска биллера по его названию или названию категории к которой он принадлежит.
   * * Поиск осуществляется по подстроке. Например если биллер "Кайф Телеком" принадлежит категории
   * * "Мобильные операторы", то этот биллер будет находиться по строкам "кай", "Кайф", "елеко" и т.д.,
   * * а также во вторую очередь по "оператор", "Опер", "бильные" и т.п.
   *  * Но при этом, сначала выдаются биллеры, поиск которых успешен по названию биллера ("первая очередь"),
   *  * только потом  те, поиск которых успешен по лишь по категории.
   *  * Если подстрока найдена и в названии биллера и в названии категории, то такой биллер выдается
   *  * в результатах в одном эксемпляре, в первой очереди.
   * *
   * 
   * @param string $categoryId Корневая категория, от которой ведетсяя поиск.
   * Может отсутствовать, тогда поиск ведется по всем биллерам.
   * Если указана, то в поиск попадают только биллеры, которые находятся в этой категории,
   * ИЛИ в любой дочерней категории, не зависимо от уровня вложенности.
   * 
   * 
   * @param string $providerId Если указан, то в результаты попадают только биллеры с указанным провайдером
   * 
   * @param int $offset * Ограничение на количество результатов поиска: offset -- смещение относительно начала полного списка,
   * * считается от нуля, limit -- максимальное количество выдаваемых результатов.
   *  * Например если всего найдено 23 биллера, а указано offset=0, limit=5, то будут выданы
   *  * 1й, 2й, 3й, 4й и 5й биллеры, в если offset=2, то 3й, 4й, 5й, 6й и 7й биллеры и т.д.
   * *
   * 
   * @param int $limit
   * @param bool $currentCategoryOnly If need only current category billers
   * 
   * @return \Biller[]
   * @throws \WrongSessionException
   * @throws \PreconditionException                         * - wrong_category_id: в случае, если в каталоге нет такой категории
   *                         * - wrong_provider_id: в случае, если в системе нет такого провайдера
   *                         * - wrong_offset: если указан отрицательный или не целочисленный offset
   *                         * - wrong_limit: если указан отрицательный или не целочисленный limit
   * *
   * 
   * @throws \IbankServerException
   * @throws \IbankIntegrationLayerException
   */
  public function findBillers($token, $searchQuery, $categoryId, $providerId, $offset, $limit, $currentCategoryOnly);
  /**
   * Find Biller by Id.
   * 
   * 
   * @param string $token
   * @param string $providerId Если указан, то в результаты попадают только биллеры с указанным провайдером
   * 
   * @param string $billerId
   * @return \Biller Biller: компания, которая может принимать платежи типа BILLER_PAYMENT
   * Компания может принадлежать "провайдеру" (компания-агрегатор, предоставляющая каталог).
   * Компания может принадлежать категории (в общем случае категория может быть как в рамках провайдера
   * так и общая для всех провайдеров).
   * 
   * 
   * @throws \WrongSessionException
   * @throws \PreconditionException                         * - wrong_category_id: в случае, если в каталоге нет такой категории
   *                         * - wrong_provider_id: в случае, если в системе нет такого провайдера
   *                         * - wrong_offset: если указан отрицательный или не целочисленный offset
   *                         * - wrong_limit: если указан отрицательный или не целочисленный limit
   * *
   * 
   * @throws \IbankServerException
   * @throws \IbankIntegrationLayerException
   */
  public function findBillerById($token, $providerId, $billerId);
  /**
   * Предварительный вызов операции платежа по биллеру.
   * На этом этапе идет проверка правильных реквизитов платежа (номер биллера, номер счета, параметров, требуемых
   * этим биллером из BillerOperationSubject.
   * В некоторых случаях сумма не нужна, будет расчитываться из параметров автоматически
   * (например счетчики электроэнергии) после выполнения preface и присваиваться в FinancialOperation на выходе.
   * Для передачи обычных "аттрибутов" использовать  BillerOperationSubject.parameters
   * 
   * 
   * @param string $token
   * @param \BillerOperationSubject $destination
   * @param int $amountInCents
   * @param \ContractReference $source
   * @return \FinancialOperation Иерархия финансовых операций. Состоит из сборника всех свойств всех финансовых операций.
   * Необходима из-за отсутсвия наследования и полиморфизма, в случае, когда нужно вернуть список
   * операций за период, например, а список содержит разнородные элементы: P2P, CashExpense, Contract2Contract и др.
   * 
   * 
   * @throws \WrongSessionException
   * @throws \OperationDeniedException
   * @throws \PreconditionException
   * @throws \IbankServerException
   * @throws \BackendValidationException
   * @throws \IbankIntegrationLayerException
   */
  public function prefaceBillPaymentOperation($token, \BillerOperationSubject $destination, $amountInCents, \ContractReference $source);
  /**
   * Запрос выполнения операции платежа по биллеру
   * На этом этапе идет выполнение операции: проверка разрешений в правилах системы Ibank,
   * проверка реквизитов биллера, создание счета, блокирование средств на счете клиента,
   * подтверждение у биллер-провайдера.
   * 
   * 
   * @param string $token
   * @param \BillerOperationSubject $destination
   * @param int $amountInCents
   * @param \ContractReference $source
   * @return \FinancialOperation Иерархия финансовых операций. Состоит из сборника всех свойств всех финансовых операций.
   * Необходима из-за отсутсвия наследования и полиморфизма, в случае, когда нужно вернуть список
   * операций за период, например, а список содержит разнородные элементы: P2P, CashExpense, Contract2Contract и др.
   * 
   * 
   * @throws \WrongSessionException
   * @throws \OperationDeniedException
   * @throws \ExtendedAuthenticationRequired
   * @throws \PreconditionException
   * @throws \IbankServerException
   * @throws \BackendValidationException
   * @throws \IbankIntegrationLayerException
   */
  public function executeBillPaymentOperation($token, \BillerOperationSubject $destination, $amountInCents, \ContractReference $source);
  /**
   * Создание шаблона с указанием реквизитов (subject).
   * 
   * 
   * @param string $token
   * @param \OperationTemplateProperties $templateProperties настройки шаблона (имя, иконка, рекомендуемые суммы и т.п.)
   * 
   * @param \FinancialOperationSubject $subject Реквизиты операции: тип + реквизиты в зависимости от типа
   * 
   * @return \OperationTemplate Шаблон финансовой операции.
   * 
   * 
   * @throws \WrongSessionException
   * @throws \PreconditionException
   * @throws \IbankServerException
   * @throws \BackendValidationException если defaultSourceContract не принадлежит пользователю
   * access_forbidden
   * 
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function createTemplate($token, \OperationTemplateProperties $templateProperties, \FinancialOperationSubject $subject);
  /**
   * @param string $token
   * @param \OperationTemplateProperties $templateProperties настройки шаблона (имя, иконка, рекомендуемые суммы и т.п.)
   * 
   * @param string $operationId операция, реквизиты которой будут использованы при создании шаблона
   * 
   * @return \OperationTemplate Шаблон финансовой операции.
   * 
   * 
   * @throws \WrongSessionException
   * @throws \PreconditionException
   * @throws \OperationDeniedException
   * @throws \IbankServerException
   * @throws \BackendValidationException если defaultSourceContract не принадлежит пользователю
   * access_forbidden
   * 
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function createTemplateFromOperation($token, \OperationTemplateProperties $templateProperties, $operationId);
  /**
   * Поиск шаблона клиента (владельца token) по идентификатору шаблона.
   * ID может быть получен из метода получения списка шаблонов: findAllOperationTemplates()
   * Метод может возвращать шаблон, даже если он "удален", т.к. по этому шаблону могла быть история операций.
   * (метод списка шаблонов НЕ возвращает удаленные шаблоны)
   * 
   * 
   * @param string $token
   * @param string $templateId id шаблона
   * 
   * @return \OperationTemplate Шаблон финансовой операции.
   * 
   * 
   * @throws \WrongSessionException
   * @throws \PreconditionException если такой шаблон не найден у клиента (но этой ошибки нет, если шаблон "удален"!)
   * 
   * @throws \IbankServerException
   * @throws \IbankIntegrationLayerException
   */
  public function findTemplateById($token, $templateId);
  /**
   * Операция позвоняет подтвердить реквизиты шаблона. Как правило (зависит от настроек бизнес-правил на сервере)
   * эта операция требует двуфакторной аутентификации (requestAuthentication() -> authenticate()), после которой
   * token будет иметь статус такого, который разрешает выполнить эту операцию.
   * Если шаблону уже был подтвержден, получаем PreconditionException("template_already_approved").
   * Метод возвращает целевой шаблон с обновленным статусом и датой последнего обновления.
   * 
   * 
   * @param string $token
   * @param string $templateId id шаблона
   * 
   * @return \OperationTemplate Шаблон финансовой операции.
   * 
   * 
   * @throws \WrongSessionException
   * @throws \PreconditionException если шаблон уже подтвежден, удален или не найден у данного клиента
   * 
   * @throws \OperationDeniedException если операция запещена бизнес-правилами allow/deny
   * 
   * @throws \ExtendedAuthenticationRequired если операцию вызвали без прохождения двуфакторной аутентификации requestAuthentication() -> authenticate()
   * 
   * @throws \IbankServerException
   * @throws \IbankIntegrationLayerException
   */
  public function approveTemplate($token, $templateId);
  /**
   * Обновление данных шаблона, но только тех, которые не относятся Реквизитов. Т.е. это изменение даных,
   * которые не повлияют на то куда будут адресованы средства при выполнении шаблона.
   * Если требуется изменить Реквизиты, то следует создать новый шаблон createTemplate (скопировав реквизиты из старого)
   * а затем подтвердить его (approveTemplate()), чтобы по нему были доступны платежи с признаком "плетж по подтвержденному шаблону".
   * Метод возвращает обновленный шаблон (с измененными свойствами и датой обновления). В результате этого обновления шаблон
   * НЕ меняет статус "approved" (подтвержден) каким бы он не был (true или false).
   * *
   * 
   * @param string $token
   * @param string $templateId id шаблона
   * 
   * @param \OperationTemplateProperties $templateProperties новые настройки шаблона (имя, иконка, рекомендуемые суммы и т.п.); ВНИМАНИЕ,
   * если будут переданы пустые поля (null или пустая строка), то и обновление
   * будет выполнено так, что эти поля у шаблона станут пустыми или будет выдана ошибка,
   * PreconditionException если поле обязательное (имя шаблона и валюта)
   * 
   * 
   * @return \OperationTemplate Шаблон финансовой операции.
   * 
   * 
   * @throws \WrongSessionException
   * @throws \PreconditionException
   * @throws \IbankServerException
   * @throws \IbankIntegrationLayerException
   */
  public function updateTemplate($token, $templateId, \OperationTemplateProperties $templateProperties);
  /**
   * * Удаление шаблона. На самом деле шаблон из системы НЕ удаляется, а лишь становится
   * * непригодным для платежей или редактирования. Также удаленный шаблон отсутствует в списке findAllOperationTemplates()
   *  * но остается доступным по findTemplateById() лишь для целей отображения привязки этого шаблона к старым операциям.
   *  * Т.к. удаленный шаблон в общем случае использоваться далее не должен, то метод возвращает void.
   * *
   * 
   * @param string $token
   * @param string $templateId id шаблона
   * 
   * @throws \WrongSessionException
   * @throws \PreconditionException Если шаблон не найден ("template_not_found"), если уже является удаленным ("template_already_deleted")
   * 
   * @throws \IbankServerException
   * @throws \IbankIntegrationLayerException
   */
  public function deleteTemplate($token, $templateId);
  /**
   * Блокировка карты
   * 
   * 
   * @param string $token
   * @param string $cardcontractId ID карточного договора
   * 
   * @param string $cardNumberMask всегда строго 4 цифры, 8 "звездочек" и 4 цифры: "5574********0233"
   * 
   * @param \Attributes $attributes Аттрибуты для возмоности передать в интеграционный слой доп-параметры
   * 
   * @return \CommonOperation Иерархия общих (чаще всего сервисных) операций.
   * Этот класс описывает операции, не относящися к финансовым (FinancialOperation) или к
   * операциям с профилем клиента (ProfileOperationHistoryItem)
   * 
   * 
   * @throws \WrongSessionException неверная, несуществующая или просроченная (session_expired) сессия
   * 
   * @throws \PreconditionException card_contract_not_found - если нет такого карт-договора
   * wrong_card_number_mask - неверный формат маски, отличный от паттерна: 4 цифры, 8 "звездочек" и 4 цифры: "5574********0233"
   * card_not_found - если нет такой карты у указанного договора
   * 
   * 
   * @throws \ExtendedAuthenticationRequired Если операция требует расширенную двуфакторную аутентификацию, а текущая сессия ей не обладает
   * 
   * @throws \OperationDeniedException Если операция не разрешена правилами *
   * 
   * @throws \IbankServerException
   * @throws \IbankIntegrationLayerException
   */
  public function lockCard($token, $cardcontractId, $cardNumberMask, \Attributes $attributes);
  /**
   * Разблокировка карты
   * 
   * 
   * @param string $token
   * @param string $cardcontractId ID карточного договора
   * 
   * @param string $cardNumberMask всегда строго 4 цифры, 8 "звездочек" и 4 цифры: "5574********0233"
   * 
   * @param \Attributes $attributes Аттрибуты для возмоности передать в интеграционный слой доп-параметры
   * 
   * @return \CommonOperation Иерархия общих (чаще всего сервисных) операций.
   * Этот класс описывает операции, не относящися к финансовым (FinancialOperation) или к
   * операциям с профилем клиента (ProfileOperationHistoryItem)
   * 
   * 
   * @throws \WrongSessionException неверная, несуществующая или просроченная (session_expired) сессия
   * 
   * @throws \PreconditionException * card_contract_not_found - если нет такого карт-договора
   * * wrong_card_number_mask - неверный формат маски, отличный от паттерна: 4 цифры, 8 "звездочек" и 4 цифры: "5574********0233"
   * * card_not_found - если нет такой карты у указанного договора
   *  *
   * 
   * @throws \ExtendedAuthenticationRequired Если операция требует расширенную двуфакторную аутентификацию, а текущая сессия ей не обладает
   * 
   * @throws \OperationDeniedException Если операция не разрешена правилами *
   * 
   * @throws \IbankServerException
   * @throws \IbankIntegrationLayerException
   */
  public function unlockCard($token, $cardcontractId, $cardNumberMask, \Attributes $attributes);
  /**
   * * @Deprecated, use changeLimits
   *    * Изменение лимита карты / счета.
   *    *
   * 
   * @param string $token
   * @param \ContractReference $contract ID карточного договора
   * 
   * @param string $cardNumberMask в случае если contract.type = CARD, всегда строго 4 цифры, 8 "звездочек" и 4 цифры: "5574********0233"
   * 
   * @param \Limit $limit устанавливаемый лимит
   * 
   * @param \Attributes $attributes Аттрибуты для возмоности передать в интеграционный слой доп-параметры
   * 
   * @return \CommonOperation Иерархия общих (чаще всего сервисных) операций.
   * Этот класс описывает операции, не относящися к финансовым (FinancialOperation) или к
   * операциям с профилем клиента (ProfileOperationHistoryItem)
   * 
   * 
   * @throws \WrongSessionException неверная, несуществующая или просроченная (session_expired) сессия
   * 
   * @throws \PreconditionException contract_not_found - если нет такого договора
   * wrong_card_number_mask - неверный формат маски, отличный от паттерна: 4 цифры, 8 "звездочек" и 4 цифры: "5574********0233"
   * card_not_found - если нет такой карты у указанного договора
   * unsupported_contract_or_card - если текущий интеграционный слой не поддерживает операцию смена лимитов для этого типа договоров или поддерживает для CARD, но только с указанием cardNumberMask, которую не передали (обычно смена поддерживается только для CARD при наличии cardNumberMask)
   * unsupported_limit_type - если текущий интеграционный слой не позволяет менять лимиты этого типа
   * unsupported_limit_value - если значение недопустимо
   * 
   * 
   * @throws \BackendValidationException Установка лимита может иметь большое разнообразие правил их установки, которые определяются настройками
   * систем в компани (банке). Чтобы эти ошибки отделять от обычных "технически-коммуникационных"
   * IbankServerException, интеграционный слой может использовать этот тип ошибки.
   * 
   * 
   * @throws \ExtendedAuthenticationRequired Если операция требует расширенную двуфакторную аутентификацию, а текущая сессия ей не обладает
   * 
   * @throws \OperationDeniedException Если операция не разрешена правилами *
   * 
   * @throws \IbankServerException Все остальные "технологические" ошибки интеграционного слоя
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function changeLimit($token, \ContractReference $contract, $cardNumberMask, \Limit $limit, \Attributes $attributes);
  /**
   * @param string $token
   * @param \ContractReference $contract ID of card contract
   * 
   * @param string $cardId Id of card, in case if IL do not have Id of card and contract.type = CARD, <br>
   * always strictly 4 digits, 8 "asterisks" and 4 digits: "5574********0233"
   * 
   * @param \Limit[] $limits list of limits to set
   * 
   * @param \Attributes $attributes Additional attributes to possible transport some additional info to IL
   * 
   * @return \CommonOperation Иерархия общих (чаще всего сервисных) операций.
   * Этот класс описывает операции, не относящися к финансовым (FinancialOperation) или к
   * операциям с профилем клиента (ProfileOperationHistoryItem)
   * 
   * 
   * @throws \WrongSessionException неверная, несуществующая или просроченная (session_expired) сессия
   * 
   * @throws \ValidationException contract_not_found - если нет такого договора
   * wrong_card_number_mask - неверный формат маски, отличный от паттерна: 4 цифры, 8 "звездочек" и 4 цифры: "5574********0233"
   * card_not_found - если нет такой карты у указанного договора
   * unsupported_contract_or_card - если текущий интеграционный слой не поддерживает операцию смена лимитов для этого типа договоров или поддерживает для CARD, но только с указанием cardNumberMask, которую не передали (обычно смена поддерживается только для CARD при наличии cardNumberMask)
   * unsupported_limit_type - если текущий интеграционный слой не позволяет менять лимиты этого типа
   * unsupported_limit_value - если значение недопустимо
   * 
   * 
   * @throws \ExtendedAuthenticationRequired Если операция требует расширенную двуфакторную аутентификацию, а текущая сессия ей не обладает
   * 
   * @throws \OperationDeniedException Если операция не разрешена правилами *
   * 
   * @throws \IbankServerException Все остальные "технологические" ошибки интеграционного слоя
   * 
   */
  public function changeLimits($token, \ContractReference $contract, $cardId, array $limits, \Attributes $attributes);
  /**
   * Изменение параметров карты / счета.
   * 
   * 
   * @param string $token
   * @param \ContractReference $contract ID карточного договора
   * 
   * @param string $cardNumberMask всегда строго 4 цифры, 8 "звездочек" и 4 цифры: "5574********0233"
   * 
   * @param \CardSettings $settings настройки карты
   * 
   * @param \Attributes $attributes Аттрибуты для возмоности передать в интеграционный слой доп-параметры
   * 
   * @return \CommonOperation Иерархия общих (чаще всего сервисных) операций.
   * Этот класс описывает операции, не относящися к финансовым (FinancialOperation) или к
   * операциям с профилем клиента (ProfileOperationHistoryItem)
   * 
   * 
   * @throws \WrongSessionException неверная, несуществующая или просроченная (session_expired) сессия
   * 
   * @throws \PreconditionException contract_not_found - если нет такого договора
   * not_card_contract - указанный контракт не карточный
   * wrong_card_number_mask - неверный формат маски, отличный от паттерна: 4 цифры, 8 "звездочек" и 4 цифры: "5574********0233"
   * card_not_found - если нет такой карты у указанного договора
   * 
   * 
   * @throws \BackendValidationException Установка настроек карты может иметь большое разнообразие правил их установки, которые определяются настройками
   * систем в компани (банке). Чтобы эти ошибки отделять от обычных "технически-коммуникационных"
   * IbankServerException, интеграционный слой может использовать этот тип ошибки.
   * unsupported_contract_or_card - если текущий интеграционный слой не поддерживает операцию смена лимитов для этого типа договоров или поддерживает для CARD, но только с указанием cardNumberMask, которую не передали (обычно смена поддерживается только для CARD при наличии cardNumberMask)
   * unsupported_settings - если переданы неверные настройки
   * 
   * 
   * @throws \ExtendedAuthenticationRequired Если операция требует расширенную двуфакторную аутентификацию, а текущая сессия ей не обладает
   * 
   * @throws \OperationDeniedException Если операция не разрешена правилами *
   * 
   * @throws \IbankServerException Все остальные "технологические" ошибки интеграционного слоя
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function changeCardSettings($token, \ContractReference $contract, $cardNumberMask, \CardSettings $settings, \Attributes $attributes);
  /**
   * Изменение настроек депозита.
   * 
   * 
   * @param string $token
   * @param \ContractReference $contract ID карточного договора
   * 
   * @param \DepositSettings $settings настройки депозита
   * 
   * @return \CommonOperation Иерархия общих (чаще всего сервисных) операций.
   * Этот класс описывает операции, не относящися к финансовым (FinancialOperation) или к
   * операциям с профилем клиента (ProfileOperationHistoryItem)
   * 
   * 
   * @throws \WrongSessionException неверная, несуществующая или просроченная (session_expired) сессия
   * 
   * @throws \PreconditionException contract_not_found - если нет такого договора
   * not_deposit_contract - указанный контракт не карточный
   * 
   * 
   * @throws \BackendValidationException Установка настроек депозита может иметь большое разнообразие правил их установки,
   * которые определяются настройками систем в компани (банке).
   * Чтобы эти ошибки отделять от обычных "технически-коммуникационных"
   * IbankServerException, интеграционный слой может использовать этот тип ошибки.
   * unsupported_contract - если текущий интеграционный слой не поддерживает операцию смена лимитов для этого типа договоров или поддерживает для CARD, но только с указанием cardNumberMask, которую не передали (обычно смена поддерживается только для CARD при наличии cardNumberMask)
   * unsupported_settings - если переданы неверные настройки
   * 
   * 
   * @throws \ExtendedAuthenticationRequired Если операция требует расширенную двуфакторную аутентификацию, а текущая сессия ей не обладает
   * 
   * @throws \OperationDeniedException Если операция не разрешена правилами *
   * 
   * @throws \IbankServerException Все остальные "технологические" ошибки интеграционного слоя
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function changeDepositSettings($token, \ContractReference $contract, \DepositSettings $settings);
  /**
   * Открытие депозитной сделки.
   * 
   * 
   * @param string $token
   * @param \DepositConditions $deposit Условия открываемого депозита
   * 
   * @param int $amountInCents Сумма открываемого депозита в валюте указанной в deposit (или если нет, по умолчанию валюта счета источника)
   * 
   * @param \ContractReference $source Счет источник
   * 
   * @return \FinancialOperation Иерархия финансовых операций. Состоит из сборника всех свойств всех финансовых операций.
   * Необходима из-за отсутсвия наследования и полиморфизма, в случае, когда нужно вернуть список
   * операций за период, например, а список содержит разнородные элементы: P2P, CashExpense, Contract2Contract и др.
   * 
   * 
   * @throws \WrongSessionException
   * @throws \OperationDeniedException
   * @throws \ExtendedAuthenticationRequired
   * @throws \PreconditionException wrong_product_id -- если идентификатор продукта не присутствует в справочнике, предоставляемом интеграционным слоем банка
   * wrong_source -- если счет источник не найден для данного клиента
   * wrong_source_type -- если тип исчтосника депозит или кредит (разрешить только карт-счета или текущие)
   * wrong_destination, wrong_destination_type -- то же самое, но для счета DepositConditions.destinationContract если он указан
   * wrong_start_date -- если дата раньше чем "сегодя"
   * 
   * 
   * @throws \IbankServerException
   * @throws \BackendValidationException product_id_not_allowed -- если открытие такого продукта невозможно по каким-то причинам (возможно для этого типа пользователей и т.п.)
   * deposit_conditions_not_allowed -- если были переданы неверные с точки зрения банка условия продукта
   * wrong_condition_.... -- если интеграционный слой хочет уточнить какой атрибут неверный, возможна подстановка параметра (фиксированный набор ENUM в бизнес-логике), который н удовлетворил проверку в банке из списка имен аттрибутов, например wrong_condition_capitalization или wrong_condition_earlyWithdrawlAllowed
   * 
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function makeDeposit($token, \DepositConditions $deposit, $amountInCents, \ContractReference $source);
  /**
   * Starts contract closing.
   * Usually closing contract has some non-zero account balance, so it demands the contractToCompensate contract,
   * which will be charged or filled to compensate contractToClose's balance to zero before closing.
   * 
   * 
   * @param string $token
   * @param \ContractReference $contractToClose Contract which want to close
   * 
   * @param \ContractReference $contracToCompensate Contract for compensation can be at different cases as contract from which
   * contract to close will compensata and contract to which will.
   * 
   * @param \Attributes $attributes Attributes to provide possibility to send additional data to IL
   * 
   * @return \FinancialOperation Иерархия финансовых операций. Состоит из сборника всех свойств всех финансовых операций.
   * Необходима из-за отсутсвия наследования и полиморфизма, в случае, когда нужно вернуть список
   * операций за период, например, а список содержит разнородные элементы: P2P, CashExpense, Contract2Contract и др.
   * 
   * 
   * @throws \WrongSessionException
   * @throws \OperationDeniedException
   * @throws \ExtendedAuthenticationRequired
   * @throws \ValidationException Any validation issues: cards data, expiry date, contract reference, not existing card id, etc.
   * 
   * @throws \IbankServerException internal server error: should be reported to vendor and administrator
   * 
   * @throws \IbankIntegrationLayerException integration layer error: should be reported to administrator
   * 
   */
  public function enrollContractClosing($token, \ContractReference $contractToClose, \ContractReference $contracToCompensate, \Attributes $attributes);
  /**
   * Finalizes the contract closing. Generally it demands only enrolledOperationId.
   * Depending on integration layer implementation, it could demand additional commit-phase attributes,
   * e.g. flag that user has accepted closing terms and conditions, etc.
   * 
   * 
   * @param string $token
   * @param string $enrolledOperationId operation ID of previousely enrolled transaction
   * 
   * @param \Attributes $attributes Attributes to provide possibility to send additional data to IL
   * 
   * @return \FinancialOperation Иерархия финансовых операций. Состоит из сборника всех свойств всех финансовых операций.
   * Необходима из-за отсутсвия наследования и полиморфизма, в случае, когда нужно вернуть список
   * операций за период, например, а список содержит разнородные элементы: P2P, CashExpense, Contract2Contract и др.
   * 
   * 
   * @throws \WrongSessionException
   * @throws \OperationDeniedException
   * @throws \ExtendedAuthenticationRequired
   * @throws \ValidationException Any validation issues
   * 
   * @throws \IbankServerException internal server error: should be reported to vendor and administrator
   * 
   * @throws \IbankIntegrationLayerException integration layer error: should be reported to administrator
   * 
   */
  public function commitContractClosing($token, $enrolledOperationId, \Attributes $attributes);
  /**
   * Custom operation. There could be many kinds of operations not mentioned in API directly.
   * It allows to roll-out servicing any new type of operations quickly and without API changes.
   * The Custom operation must contain customType and may contain free attributes list (name-value).
   * The subject.customType must be supported on integration layer implementation.
   * 
   * 
   * @param string $token
   * @param \CustomOpeartionSubject $subject Operation custom type and free set of values
   * 
   * @param \ContractReference $sourceReference Optional source contract reference, e.g. for charging commission or as contract will be manipulated some other way specific for this type of operation
   * 
   * @param int $amountInCents Optional amount of operation
   * 
   * @param string $currency Currency of given optional amount. Optional if no amount given
   * 
   * @return \FinancialOperation Иерархия финансовых операций. Состоит из сборника всех свойств всех финансовых операций.
   * Необходима из-за отсутсвия наследования и полиморфизма, в случае, когда нужно вернуть список
   * операций за период, например, а список содержит разнородные элементы: P2P, CashExpense, Contract2Contract и др.
   * 
   * 
   * @throws \WrongSessionException
   * @throws \OperationDeniedException
   * @throws \ExtendedAuthenticationRequired
   * @throws \ValidationException Any validation issues: cards data, expiry date, contract reference, not existing card id, etc.
   * 
   * @throws \IbankServerException internal server error: should be reported to vendor and administrator
   * 
   * @throws \IbankIntegrationLayerException integration layer error: should be reported to administrator
   * 
   */
  public function enrollCustomOperation($token, \CustomOpeartionSubject $subject, \ContractReference $sourceReference, $amountInCents, $currency);
  /**
   * Finalizes enrolled custom operation. Requires enrolled operation ID.
   * Depending on integration layer implementation, it could demand additional commit-phase attributes.
   * 
   * 
   * @param string $token
   * @param string $enrolledOperationId operation.id of previousely prefaced transaction
   * 
   * @param \Attributes $attributes
   * @return \FinancialOperation Иерархия финансовых операций. Состоит из сборника всех свойств всех финансовых операций.
   * Необходима из-за отсутсвия наследования и полиморфизма, в случае, когда нужно вернуть список
   * операций за период, например, а список содержит разнородные элементы: P2P, CashExpense, Contract2Contract и др.
   * 
   * 
   * @throws \WrongSessionException
   * @throws \OperationDeniedException
   * @throws \ExtendedAuthenticationRequired
   * @throws \ValidationException Any validation issues: cards data, expiry date, contract reference, not existing card id, etc.
   * 
   * @throws \IbankServerException internal server error: should be reported to vendor and administrator
   * 
   * @throws \IbankIntegrationLayerException integration layer error: should be reported to administrator
   * 
   */
  public function commmitCustomOperation($token, $enrolledOperationId, \Attributes $attributes);
  /**
   * * Задает счет по умолчанию
   *  * поддеживается только типы ACCOUNT и CARD, при этом у продуктов должны быть доступны операции платежа (проверяет по простейшему прототипу платежа через rules.xml)
   * 
   * @param string $token
   * @param int $contractType
   * @param string $contractId
   * @param \Attributes $attributes
   * @throws \WrongSessionException
   * @throws \ProductDoesNotSupportedException
   * @throws \WrongContractIdException
   * @throws \IbankServerException
   * @throws \ExtendedAuthenticationRequired
   * @throws \BackendValidationException
   * @throws \IbankIntegrationLayerException
   */
  public function setDefaultProduct($token, $contractType, $contractId, \Attributes $attributes);
  /**
   * @param string $token
   * @param \OperationHistoryFilter $operationHistoryFilter
   * @param int $dateFrom
   * @param int $dateTo
   * @return \FinancialOperation[]
   * @throws \WrongSessionException
   * @throws \PeriodIsLargeException
   * @throws \OperationDeniedException
   * @throws \IbankServerException
   * @throws \IbankIntegrationLayerException
   */
  public function fetchFinancialOperations($token, \OperationHistoryFilter $operationHistoryFilter, $dateFrom, $dateTo);
  /**
   * Получение списка операций, не являющихся финансовыми
   * (нет суммы и перевода средств, например блокировка карты, изменение лимита и прочие, см. CommonOperationType).
   * 
   * 
   * @param string $token
   * @param \OperationHistoryFilter $operationHistoryFilter Фильтр поиска по подстроке. Каждая операция может иметь свой набор данных,
   * включаемых в текст, по которому этот поиск происходит.
   * В любом случае туда попадает содержимое name, и description.
   * 
   * 
   * @param int $dateFrom Диапазон в который должен попадать период между датами created и processed у искомых операций.
   *  Если интервал между dateFrom и dateTo пересекается с интервалом между created и processed, то
   *  операция находится этим методом.
   * *
   * 
   * @param int $dateTo
   * @return \CommonOperation[]
   * @throws \WrongSessionException
   * @throws \PeriodIsLargeException
   * @throws \OperationDeniedException в случае если чтение данных контрактов не позволено текущей сессии (т.к. данные об операциях содержат ссылки на контракты клиента)
   * 
   * @throws \IbankServerException
   * @throws \IbankIntegrationLayerException
   */
  public function fetchCommonOperations($token, \OperationHistoryFilter $operationHistoryFilter, $dateFrom, $dateTo);
  /**
   * Begins card to card transfer operation.
   * It tries to enroll 3DSecure transaction using senderCard.<br/>
   * As result client should detect:
   * <ul>
   * <li>if <code>operation.subject.subjectCardToCard.secure3DRequest.enrolled</code>: write web-form to go to ACS to obtain paRes after redirect to term-url (or using own term-url)
   * <li>if <code>operation.subject.subjectCardToCard.otpRequired</code>: ask user for otp (have to be sent from card-to-card provider when enrolling)
   * </ul>
   * 
   * @param string $token Session auth token
   * 
   * @param \CardReference $senderCard Source card as external card data or as internal card reference
   * 
   * @param \CardReference $receiverCard Target card as external card data or as internal card reference
   * 
   * @param int $amountInCents Transfer amount in cents
   * 
   * @param string $currency Transfer currency: in most cases the national local currency
   * 
   * @param \Attributes $att Additional attributes for quick functional extending
   * 
   * @return \FinancialOperation Иерархия финансовых операций. Состоит из сборника всех свойств всех финансовых операций.
   * Необходима из-за отсутсвия наследования и полиморфизма, в случае, когда нужно вернуть список
   * операций за период, например, а список содержит разнородные элементы: P2P, CashExpense, Contract2Contract и др.
   * 
   * 
   * @throws \WrongSessionException if session is wrong, expired, etc.
   * 
   * @throws \OperationDeniedException if session is correct but operation is denied for current user role or session type
   * 
   * @throws \ExtendedAuthenticationRequired if session is correct but operation requires extending the authentication level, use requestExtendedAuthentication()
   * 
   * @throws \ValidationException Any validation issues: cards data, expiry date, contract reference, not existing card id, etc.
   * 
   * @throws \IbankServerException internal server error: should be reported to vendor and administrator
   * 
   * @throws \IbankIntegrationLayerException integration layer error: should be reported to administrator
   * 
   */
  public function enrollCardToCardTransfer($token, \CardReference $senderCard, \CardReference $receiverCard, $amountInCents, $currency, \Attributes $att);
  /**
   * Commiting card to card trnsaction enrolled before. <br/>
   * Accepts both OTP or paRes (obtained from term-url listener) and OTP.<br/>
   * Even if paRes provided, method could throw ValidationException with key "otp_required"
   * (despite of operation.subject.subjectCardToCard.otpRequired was false at enrollment step).<br/>
   * In this case client should repeat commit with OTP
   * (have to be sent to customer when previous commit fails).
   * 
   * @param string $token Session auth token
   * 
   * @param string $enrolledOperationId operation.id of previousely enrolled transaction
   * 
   * @param string $paRes if operation.subject.subjectCardToCard.secure3DRequest.enrolled, paRes shoud be provided from term-url listener/handler
   * 
   * @param string $md if operation.subject.subjectCardToCard.secure3DRequest.enrolled, md shoud be provided from term-url listener/handler or just copied from operation.subject.subjectCardToCard.secure3DRequest.md
   * 
   * @param string $otp if operation.subject.subjectCardToCard.otpRequired was true or previous commit threw the ValidationException("otp_required")
   * 
   * @param string $secureCode sender card secure code (CVV/CVC): required again for some implementation of card-to-card providers
   * 
   * @param \Attributes $att additional attributes for quick functional extending
   * 
   * @return \FinancialOperation Иерархия финансовых операций. Состоит из сборника всех свойств всех финансовых операций.
   * Необходима из-за отсутсвия наследования и полиморфизма, в случае, когда нужно вернуть список
   * операций за период, например, а список содержит разнородные элементы: P2P, CashExpense, Contract2Contract и др.
   * 
   * 
   * @throws \WrongSessionException if session is wrong, expired, etc.
   * 
   * @throws \OperationDeniedException if session is correct but operation is denied for current user role or session type
   * 
   * @throws \ExtendedAuthenticationRequired if session is correct but operation requires extending the authentication level, use requestExtendedAuthentication()
   * 
   * @throws \ValidationException Any validation issues: especially "otp_required", "pares_required", "wrong_pares", "wrong_otp", etc.
   * 
   * @throws \IbankServerException internal server error: should be reported to vendor and administrator
   * 
   * @throws \IbankIntegrationLayerException integration layer error: should be reported to administrator
   * 
   */
  public function commitCardToCardTransfer($token, $enrolledOperationId, $paRes, $md, $otp, $secureCode, \Attributes $att);
  /**
   * Begins card to card transfer operation.
   * It tries to enroll 3DSecure transaction using senderCard.<br/>
   * As result client should detect:
   * <ul>
   * <li>if <code>operation.subject.subjectCardToCard.secure3DRequest.enrolled</code>: write web-form to go to ACS to obtain paRes after redirect to term-url (or using own term-url)
   * <li>if <code>operation.subject.subjectCardToCard.otpRequired</code>: ask user for otp (have to be sent from card-to-card provider when enrolling)
   * </ul>
   * 
   * @param string $token Session auth token
   * 
   * @param \CardReference $senderCard Source card as external card data or as internal card reference
   * 
   * @param \ContractReference $receiverContract Target contract reference
   * 
   * @param int $amountInCents Transfer amount in cents
   * 
   * @param string $currency Transfer currency: in most cases the national local currency
   * 
   * @param \Attributes $att Additional attributes for quick functional extending
   * 
   * @return \FinancialOperation Иерархия финансовых операций. Состоит из сборника всех свойств всех финансовых операций.
   * Необходима из-за отсутсвия наследования и полиморфизма, в случае, когда нужно вернуть список
   * операций за период, например, а список содержит разнородные элементы: P2P, CashExpense, Contract2Contract и др.
   * 
   * 
   * @throws \WrongSessionException if session is wrong, expired, etc.
   * 
   * @throws \OperationDeniedException if session is correct but operation is denied for current user role or session type
   * 
   * @throws \ExtendedAuthenticationRequired if session is correct but operation requires extending the authentication level, use requestExtendedAuthentication()
   * 
   * @throws \ValidationException Any validation issues: cards data, expiry date, contract reference, not existing card id, etc.
   * 
   * @throws \IbankServerException internal server error: should be reported to vendor and administrator
   * 
   * @throws \IbankIntegrationLayerException integration layer error: should be reported to administrator
   * 
   */
  public function enrollCardToContractTransfer($token, \CardReference $senderCard, \ContractReference $receiverContract, $amountInCents, $currency, \Attributes $att);
  /**
   * Commiting card to card trnsaction enrolled before. <br/>
   * Accepts both OTP or paRes (obtained from term-url listener) and OTP.<br/>
   * Even if paRes provided, method could throw ValidationException with key "otp_required"
   * (despite of operation.subject.subjectCardToCard.otpRequired was false at enrollment step).<br/>
   * In this case client should repeat commit with OTP
   * (have to be sent to customer when previous commit fails).
   * 
   * @param string $token Session auth token
   * 
   * @param string $enrolledOperationId operation.id of previousely enrolled transaction
   * 
   * @param string $paRes if operation.subject.subjectCardToCard.secure3DRequest.enrolled, paRes shoud be provided from term-url listener/handler
   * 
   * @param string $md if operation.subject.subjectCardToCard.secure3DRequest.enrolled, md shoud be provided from term-url listener/handler or just copied from operation.subject.subjectCardToCard.secure3DRequest.md
   * 
   * @param string $otp if operation.subject.subjectCardToCard.otpRequired was true or previous commit threw the ValidationException("otp_required")
   * 
   * @param string $secureCode sender card secure code (CVV/CVC): required again for some implementation of card-to-card providers
   * 
   * @param \Attributes $att additional attributes for quick functional extending
   * 
   * @return \FinancialOperation Иерархия финансовых операций. Состоит из сборника всех свойств всех финансовых операций.
   * Необходима из-за отсутсвия наследования и полиморфизма, в случае, когда нужно вернуть список
   * операций за период, например, а список содержит разнородные элементы: P2P, CashExpense, Contract2Contract и др.
   * 
   * 
   * @throws \WrongSessionException if session is wrong, expired, etc.
   * 
   * @throws \OperationDeniedException if session is correct but operation is denied for current user role or session type
   * 
   * @throws \ExtendedAuthenticationRequired if session is correct but operation requires extending the authentication level, use requestExtendedAuthentication()
   * 
   * @throws \ValidationException Any validation issues: especially "otp_required", "pares_required", "wrong_pares", "wrong_otp", etc.
   * 
   * @throws \IbankServerException internal server error: should be reported to vendor and administrator
   * 
   * @throws \IbankIntegrationLayerException integration layer error: should be reported to administrator
   * 
   */
  public function commitCardToContractTransfer($token, $enrolledOperationId, $paRes, $md, $otp, $secureCode, \Attributes $att);
}


class OperationsServiceClient implements \OperationsServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function findAllOperationTemplates($token)
  {
    $this->send_findAllOperationTemplates($token);
    return $this->recv_findAllOperationTemplates();
  }

  public function send_findAllOperationTemplates($token)
  {
    $args = new \OperationsService_findAllOperationTemplates_args();
    $args->token = $token;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findAllOperationTemplates', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findAllOperationTemplates', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findAllOperationTemplates()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_findAllOperationTemplates_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_findAllOperationTemplates_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->error !== null) {
      throw $result->error;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("findAllOperationTemplates failed: unknown result");
  }

  public function execute($token, $operationTemplateId, $sum, \Attributes $attr)
  {
    $this->send_execute($token, $operationTemplateId, $sum, $attr);
    return $this->recv_execute();
  }

  public function send_execute($token, $operationTemplateId, $sum, \Attributes $attr)
  {
    $args = new \OperationsService_execute_args();
    $args->token = $token;
    $args->operationTemplateId = $operationTemplateId;
    $args->sum = $sum;
    $args->attr = $attr;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'execute', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('execute', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_execute()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_execute_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_execute_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->error !== null) {
      throw $result->error;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    throw new \Exception("execute failed: unknown result");
  }

  public function executeOperation($token, \CashExpenseOperation $operation)
  {
    $this->send_executeOperation($token, $operation);
    return $this->recv_executeOperation();
  }

  public function send_executeOperation($token, \CashExpenseOperation $operation)
  {
    $args = new \OperationsService_executeOperation_args();
    $args->token = $token;
    $args->operation = $operation;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'executeOperation', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('executeOperation', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_executeOperation()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_executeOperation_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_executeOperation_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->validError !== null) {
      throw $result->validError;
    }
    if ($result->error !== null) {
      throw $result->error;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    throw new \Exception("executeOperation failed: unknown result");
  }

  public function executeTemplate($token, $operationTemplateId, $sum, \Attributes $attr)
  {
    $this->send_executeTemplate($token, $operationTemplateId, $sum, $attr);
    return $this->recv_executeTemplate();
  }

  public function send_executeTemplate($token, $operationTemplateId, $sum, \Attributes $attr)
  {
    $args = new \OperationsService_executeTemplate_args();
    $args->token = $token;
    $args->operationTemplateId = $operationTemplateId;
    $args->sum = $sum;
    $args->attr = $attr;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'executeTemplate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('executeTemplate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_executeTemplate()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_executeTemplate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_executeTemplate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->error !== null) {
      throw $result->error;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    throw new \Exception("executeTemplate failed: unknown result");
  }

  public function prefaceTemplateOperation($token, $templateId, $amount, \ContractReference $source, \Attributes $attributes)
  {
    $this->send_prefaceTemplateOperation($token, $templateId, $amount, $source, $attributes);
    return $this->recv_prefaceTemplateOperation();
  }

  public function send_prefaceTemplateOperation($token, $templateId, $amount, \ContractReference $source, \Attributes $attributes)
  {
    $args = new \OperationsService_prefaceTemplateOperation_args();
    $args->token = $token;
    $args->templateId = $templateId;
    $args->amount = $amount;
    $args->source = $source;
    $args->attributes = $attributes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'prefaceTemplateOperation', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('prefaceTemplateOperation', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_prefaceTemplateOperation()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_prefaceTemplateOperation_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_prefaceTemplateOperation_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->validationError !== null) {
      throw $result->validationError;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->backendValidationException !== null) {
      throw $result->backendValidationException;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("prefaceTemplateOperation failed: unknown result");
  }

  public function executeTemplateOperation($token, $templateId, $amount, \ContractReference $source, \Attributes $attributes)
  {
    $this->send_executeTemplateOperation($token, $templateId, $amount, $source, $attributes);
    return $this->recv_executeTemplateOperation();
  }

  public function send_executeTemplateOperation($token, $templateId, $amount, \ContractReference $source, \Attributes $attributes)
  {
    $args = new \OperationsService_executeTemplateOperation_args();
    $args->token = $token;
    $args->templateId = $templateId;
    $args->amount = $amount;
    $args->source = $source;
    $args->attributes = $attributes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'executeTemplateOperation', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('executeTemplateOperation', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_executeTemplateOperation()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_executeTemplateOperation_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_executeTemplateOperation_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->validationError !== null) {
      throw $result->validationError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->backendError !== null) {
      throw $result->backendError;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("executeTemplateOperation failed: unknown result");
  }

  public function prefaceSEPTransferOperation($token, \OperationSubject $destination, $destinationDescription, $amountInCents, \ContractReference $source, \Attributes $attributes)
  {
    $this->send_prefaceSEPTransferOperation($token, $destination, $destinationDescription, $amountInCents, $source, $attributes);
    return $this->recv_prefaceSEPTransferOperation();
  }

  public function send_prefaceSEPTransferOperation($token, \OperationSubject $destination, $destinationDescription, $amountInCents, \ContractReference $source, \Attributes $attributes)
  {
    $args = new \OperationsService_prefaceSEPTransferOperation_args();
    $args->token = $token;
    $args->destination = $destination;
    $args->destinationDescription = $destinationDescription;
    $args->amountInCents = $amountInCents;
    $args->source = $source;
    $args->attributes = $attributes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'prefaceSEPTransferOperation', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('prefaceSEPTransferOperation', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_prefaceSEPTransferOperation()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_prefaceSEPTransferOperation_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_prefaceSEPTransferOperation_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->validationError !== null) {
      throw $result->validationError;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->backendValidationException !== null) {
      throw $result->backendValidationException;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("prefaceSEPTransferOperation failed: unknown result");
  }

  public function executeSEPTransferOperation($token, \OperationSubject $destination, $destinationDescription, $amountInCents, \ContractReference $source, \Attributes $attributes)
  {
    $this->send_executeSEPTransferOperation($token, $destination, $destinationDescription, $amountInCents, $source, $attributes);
    return $this->recv_executeSEPTransferOperation();
  }

  public function send_executeSEPTransferOperation($token, \OperationSubject $destination, $destinationDescription, $amountInCents, \ContractReference $source, \Attributes $attributes)
  {
    $args = new \OperationsService_executeSEPTransferOperation_args();
    $args->token = $token;
    $args->destination = $destination;
    $args->destinationDescription = $destinationDescription;
    $args->amountInCents = $amountInCents;
    $args->source = $source;
    $args->attributes = $attributes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'executeSEPTransferOperation', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('executeSEPTransferOperation', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_executeSEPTransferOperation()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_executeSEPTransferOperation_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_executeSEPTransferOperation_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->validationError !== null) {
      throw $result->validationError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->backendError !== null) {
      throw $result->backendError;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("executeSEPTransferOperation failed: unknown result");
  }

  public function prefaceIntrabankTransferOperation($token, \IntrabankOperationSubject $destination, $amountInCents, \ContractReference $source)
  {
    $this->send_prefaceIntrabankTransferOperation($token, $destination, $amountInCents, $source);
    return $this->recv_prefaceIntrabankTransferOperation();
  }

  public function send_prefaceIntrabankTransferOperation($token, \IntrabankOperationSubject $destination, $amountInCents, \ContractReference $source)
  {
    $args = new \OperationsService_prefaceIntrabankTransferOperation_args();
    $args->token = $token;
    $args->destination = $destination;
    $args->amountInCents = $amountInCents;
    $args->source = $source;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'prefaceIntrabankTransferOperation', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('prefaceIntrabankTransferOperation', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_prefaceIntrabankTransferOperation()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_prefaceIntrabankTransferOperation_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_prefaceIntrabankTransferOperation_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->validationError !== null) {
      throw $result->validationError;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->backendValidationException !== null) {
      throw $result->backendValidationException;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("prefaceIntrabankTransferOperation failed: unknown result");
  }

  public function executeIntrabankTransferOperation($token, \IntrabankOperationSubject $destination, $amountInCents, \ContractReference $source)
  {
    $this->send_executeIntrabankTransferOperation($token, $destination, $amountInCents, $source);
    return $this->recv_executeIntrabankTransferOperation();
  }

  public function send_executeIntrabankTransferOperation($token, \IntrabankOperationSubject $destination, $amountInCents, \ContractReference $source)
  {
    $args = new \OperationsService_executeIntrabankTransferOperation_args();
    $args->token = $token;
    $args->destination = $destination;
    $args->amountInCents = $amountInCents;
    $args->source = $source;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'executeIntrabankTransferOperation', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('executeIntrabankTransferOperation', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_executeIntrabankTransferOperation()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_executeIntrabankTransferOperation_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_executeIntrabankTransferOperation_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->validationError !== null) {
      throw $result->validationError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->backendValidationException !== null) {
      throw $result->backendValidationException;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("executeIntrabankTransferOperation failed: unknown result");
  }

  public function findFinancialOperationById($token, $id)
  {
    $this->send_findFinancialOperationById($token, $id);
    return $this->recv_findFinancialOperationById();
  }

  public function send_findFinancialOperationById($token, $id)
  {
    $args = new \OperationsService_findFinancialOperationById_args();
    $args->token = $token;
    $args->id = $id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findFinancialOperationById', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findFinancialOperationById', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findFinancialOperationById()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_findFinancialOperationById_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_findFinancialOperationById_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->validError !== null) {
      throw $result->validError;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("findFinancialOperationById failed: unknown result");
  }

  public function executeCashExpenseOperation($token, \CashExpenseOperation $operation)
  {
    $this->send_executeCashExpenseOperation($token, $operation);
    return $this->recv_executeCashExpenseOperation();
  }

  public function send_executeCashExpenseOperation($token, \CashExpenseOperation $operation)
  {
    $args = new \OperationsService_executeCashExpenseOperation_args();
    $args->token = $token;
    $args->operation = $operation;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'executeCashExpenseOperation', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('executeCashExpenseOperation', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_executeCashExpenseOperation()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_executeCashExpenseOperation_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_executeCashExpenseOperation_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->validError !== null) {
      throw $result->validError;
    }
    if ($result->error !== null) {
      throw $result->error;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("executeCashExpenseOperation failed: unknown result");
  }

  public function prefaceOperation($token, \ContractToContractOperation $operation)
  {
    $this->send_prefaceOperation($token, $operation);
    return $this->recv_prefaceOperation();
  }

  public function send_prefaceOperation($token, \ContractToContractOperation $operation)
  {
    $args = new \OperationsService_prefaceOperation_args();
    $args->token = $token;
    $args->operation = $operation;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'prefaceOperation', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('prefaceOperation', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_prefaceOperation()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_prefaceOperation_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_prefaceOperation_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->validError !== null) {
      throw $result->validError;
    }
    if ($result->error !== null) {
      throw $result->error;
    }
    if ($result->backendValidationException !== null) {
      throw $result->backendValidationException;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("prefaceOperation failed: unknown result");
  }

  public function executeContractToContractOperation($token, \ContractToContractOperation $operation)
  {
    $this->send_executeContractToContractOperation($token, $operation);
    return $this->recv_executeContractToContractOperation();
  }

  public function send_executeContractToContractOperation($token, \ContractToContractOperation $operation)
  {
    $args = new \OperationsService_executeContractToContractOperation_args();
    $args->token = $token;
    $args->operation = $operation;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'executeContractToContractOperation', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('executeContractToContractOperation', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_executeContractToContractOperation()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_executeContractToContractOperation_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_executeContractToContractOperation_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->validError !== null) {
      throw $result->validError;
    }
    if ($result->error !== null) {
      throw $result->error;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->backendError !== null) {
      throw $result->backendError;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("executeContractToContractOperation failed: unknown result");
  }

  public function fetchBillerCategories($token, $parentCategoryId)
  {
    $this->send_fetchBillerCategories($token, $parentCategoryId);
    return $this->recv_fetchBillerCategories();
  }

  public function send_fetchBillerCategories($token, $parentCategoryId)
  {
    $args = new \OperationsService_fetchBillerCategories_args();
    $args->token = $token;
    $args->parentCategoryId = $parentCategoryId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'fetchBillerCategories', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('fetchBillerCategories', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_fetchBillerCategories()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_fetchBillerCategories_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_fetchBillerCategories_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->validError !== null) {
      throw $result->validError;
    }
    if ($result->error !== null) {
      throw $result->error;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("fetchBillerCategories failed: unknown result");
  }

  public function fetchBillerCategoryPath($token, $categoryId)
  {
    $this->send_fetchBillerCategoryPath($token, $categoryId);
    return $this->recv_fetchBillerCategoryPath();
  }

  public function send_fetchBillerCategoryPath($token, $categoryId)
  {
    $args = new \OperationsService_fetchBillerCategoryPath_args();
    $args->token = $token;
    $args->categoryId = $categoryId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'fetchBillerCategoryPath', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('fetchBillerCategoryPath', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_fetchBillerCategoryPath()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_fetchBillerCategoryPath_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_fetchBillerCategoryPath_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->validError !== null) {
      throw $result->validError;
    }
    if ($result->error !== null) {
      throw $result->error;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("fetchBillerCategoryPath failed: unknown result");
  }

  public function findBillers($token, $searchQuery, $categoryId, $providerId, $offset, $limit, $currentCategoryOnly)
  {
    $this->send_findBillers($token, $searchQuery, $categoryId, $providerId, $offset, $limit, $currentCategoryOnly);
    return $this->recv_findBillers();
  }

  public function send_findBillers($token, $searchQuery, $categoryId, $providerId, $offset, $limit, $currentCategoryOnly)
  {
    $args = new \OperationsService_findBillers_args();
    $args->token = $token;
    $args->searchQuery = $searchQuery;
    $args->categoryId = $categoryId;
    $args->providerId = $providerId;
    $args->offset = $offset;
    $args->limit = $limit;
    $args->currentCategoryOnly = $currentCategoryOnly;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findBillers', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findBillers', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findBillers()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_findBillers_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_findBillers_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->validError !== null) {
      throw $result->validError;
    }
    if ($result->error !== null) {
      throw $result->error;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("findBillers failed: unknown result");
  }

  public function findBillerById($token, $providerId, $billerId)
  {
    $this->send_findBillerById($token, $providerId, $billerId);
    return $this->recv_findBillerById();
  }

  public function send_findBillerById($token, $providerId, $billerId)
  {
    $args = new \OperationsService_findBillerById_args();
    $args->token = $token;
    $args->providerId = $providerId;
    $args->billerId = $billerId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findBillerById', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findBillerById', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findBillerById()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_findBillerById_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_findBillerById_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->validError !== null) {
      throw $result->validError;
    }
    if ($result->error !== null) {
      throw $result->error;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("findBillerById failed: unknown result");
  }

  public function prefaceBillPaymentOperation($token, \BillerOperationSubject $destination, $amountInCents, \ContractReference $source)
  {
    $this->send_prefaceBillPaymentOperation($token, $destination, $amountInCents, $source);
    return $this->recv_prefaceBillPaymentOperation();
  }

  public function send_prefaceBillPaymentOperation($token, \BillerOperationSubject $destination, $amountInCents, \ContractReference $source)
  {
    $args = new \OperationsService_prefaceBillPaymentOperation_args();
    $args->token = $token;
    $args->destination = $destination;
    $args->amountInCents = $amountInCents;
    $args->source = $source;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'prefaceBillPaymentOperation', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('prefaceBillPaymentOperation', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_prefaceBillPaymentOperation()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_prefaceBillPaymentOperation_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_prefaceBillPaymentOperation_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->validError !== null) {
      throw $result->validError;
    }
    if ($result->error !== null) {
      throw $result->error;
    }
    if ($result->backendError !== null) {
      throw $result->backendError;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("prefaceBillPaymentOperation failed: unknown result");
  }

  public function executeBillPaymentOperation($token, \BillerOperationSubject $destination, $amountInCents, \ContractReference $source)
  {
    $this->send_executeBillPaymentOperation($token, $destination, $amountInCents, $source);
    return $this->recv_executeBillPaymentOperation();
  }

  public function send_executeBillPaymentOperation($token, \BillerOperationSubject $destination, $amountInCents, \ContractReference $source)
  {
    $args = new \OperationsService_executeBillPaymentOperation_args();
    $args->token = $token;
    $args->destination = $destination;
    $args->amountInCents = $amountInCents;
    $args->source = $source;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'executeBillPaymentOperation', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('executeBillPaymentOperation', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_executeBillPaymentOperation()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_executeBillPaymentOperation_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_executeBillPaymentOperation_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->validError !== null) {
      throw $result->validError;
    }
    if ($result->error !== null) {
      throw $result->error;
    }
    if ($result->backendError !== null) {
      throw $result->backendError;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("executeBillPaymentOperation failed: unknown result");
  }

  public function createTemplate($token, \OperationTemplateProperties $templateProperties, \FinancialOperationSubject $subject)
  {
    $this->send_createTemplate($token, $templateProperties, $subject);
    return $this->recv_createTemplate();
  }

  public function send_createTemplate($token, \OperationTemplateProperties $templateProperties, \FinancialOperationSubject $subject)
  {
    $args = new \OperationsService_createTemplate_args();
    $args->token = $token;
    $args->templateProperties = $templateProperties;
    $args->subject = $subject;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'createTemplate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('createTemplate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_createTemplate()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_createTemplate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_createTemplate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->validError !== null) {
      throw $result->validError;
    }
    if ($result->error !== null) {
      throw $result->error;
    }
    if ($result->forbidden !== null) {
      throw $result->forbidden;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("createTemplate failed: unknown result");
  }

  public function createTemplateFromOperation($token, \OperationTemplateProperties $templateProperties, $operationId)
  {
    $this->send_createTemplateFromOperation($token, $templateProperties, $operationId);
    return $this->recv_createTemplateFromOperation();
  }

  public function send_createTemplateFromOperation($token, \OperationTemplateProperties $templateProperties, $operationId)
  {
    $args = new \OperationsService_createTemplateFromOperation_args();
    $args->token = $token;
    $args->templateProperties = $templateProperties;
    $args->operationId = $operationId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'createTemplateFromOperation', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('createTemplateFromOperation', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_createTemplateFromOperation()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_createTemplateFromOperation_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_createTemplateFromOperation_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->validError !== null) {
      throw $result->validError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->error !== null) {
      throw $result->error;
    }
    if ($result->forbidden !== null) {
      throw $result->forbidden;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("createTemplateFromOperation failed: unknown result");
  }

  public function findTemplateById($token, $templateId)
  {
    $this->send_findTemplateById($token, $templateId);
    return $this->recv_findTemplateById();
  }

  public function send_findTemplateById($token, $templateId)
  {
    $args = new \OperationsService_findTemplateById_args();
    $args->token = $token;
    $args->templateId = $templateId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findTemplateById', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findTemplateById', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findTemplateById()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_findTemplateById_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_findTemplateById_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->validError !== null) {
      throw $result->validError;
    }
    if ($result->error !== null) {
      throw $result->error;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("findTemplateById failed: unknown result");
  }

  public function approveTemplate($token, $templateId)
  {
    $this->send_approveTemplate($token, $templateId);
    return $this->recv_approveTemplate();
  }

  public function send_approveTemplate($token, $templateId)
  {
    $args = new \OperationsService_approveTemplate_args();
    $args->token = $token;
    $args->templateId = $templateId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'approveTemplate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('approveTemplate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_approveTemplate()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_approveTemplate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_approveTemplate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->validError !== null) {
      throw $result->validError;
    }
    if ($result->operationDenied !== null) {
      throw $result->operationDenied;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->error !== null) {
      throw $result->error;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("approveTemplate failed: unknown result");
  }

  public function updateTemplate($token, $templateId, \OperationTemplateProperties $templateProperties)
  {
    $this->send_updateTemplate($token, $templateId, $templateProperties);
    return $this->recv_updateTemplate();
  }

  public function send_updateTemplate($token, $templateId, \OperationTemplateProperties $templateProperties)
  {
    $args = new \OperationsService_updateTemplate_args();
    $args->token = $token;
    $args->templateId = $templateId;
    $args->templateProperties = $templateProperties;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateTemplate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateTemplate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateTemplate()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_updateTemplate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_updateTemplate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->validError !== null) {
      throw $result->validError;
    }
    if ($result->error !== null) {
      throw $result->error;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("updateTemplate failed: unknown result");
  }

  public function deleteTemplate($token, $templateId)
  {
    $this->send_deleteTemplate($token, $templateId);
    $this->recv_deleteTemplate();
  }

  public function send_deleteTemplate($token, $templateId)
  {
    $args = new \OperationsService_deleteTemplate_args();
    $args->token = $token;
    $args->templateId = $templateId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteTemplate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteTemplate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteTemplate()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_deleteTemplate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_deleteTemplate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->validError !== null) {
      throw $result->validError;
    }
    if ($result->error !== null) {
      throw $result->error;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    return;
  }

  public function lockCard($token, $cardcontractId, $cardNumberMask, \Attributes $attributes)
  {
    $this->send_lockCard($token, $cardcontractId, $cardNumberMask, $attributes);
    return $this->recv_lockCard();
  }

  public function send_lockCard($token, $cardcontractId, $cardNumberMask, \Attributes $attributes)
  {
    $args = new \OperationsService_lockCard_args();
    $args->token = $token;
    $args->cardcontractId = $cardcontractId;
    $args->cardNumberMask = $cardNumberMask;
    $args->attributes = $attributes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lockCard', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lockCard', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lockCard()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_lockCard_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_lockCard_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->validError !== null) {
      throw $result->validError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->operationDenied !== null) {
      throw $result->operationDenied;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("lockCard failed: unknown result");
  }

  public function unlockCard($token, $cardcontractId, $cardNumberMask, \Attributes $attributes)
  {
    $this->send_unlockCard($token, $cardcontractId, $cardNumberMask, $attributes);
    return $this->recv_unlockCard();
  }

  public function send_unlockCard($token, $cardcontractId, $cardNumberMask, \Attributes $attributes)
  {
    $args = new \OperationsService_unlockCard_args();
    $args->token = $token;
    $args->cardcontractId = $cardcontractId;
    $args->cardNumberMask = $cardNumberMask;
    $args->attributes = $attributes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'unlockCard', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('unlockCard', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_unlockCard()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_unlockCard_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_unlockCard_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->validError !== null) {
      throw $result->validError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->operationDenied !== null) {
      throw $result->operationDenied;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("unlockCard failed: unknown result");
  }

  public function changeLimit($token, \ContractReference $contract, $cardNumberMask, \Limit $limit, \Attributes $attributes)
  {
    $this->send_changeLimit($token, $contract, $cardNumberMask, $limit, $attributes);
    return $this->recv_changeLimit();
  }

  public function send_changeLimit($token, \ContractReference $contract, $cardNumberMask, \Limit $limit, \Attributes $attributes)
  {
    $args = new \OperationsService_changeLimit_args();
    $args->token = $token;
    $args->contract = $contract;
    $args->cardNumberMask = $cardNumberMask;
    $args->limit = $limit;
    $args->attributes = $attributes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'changeLimit', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('changeLimit', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_changeLimit()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_changeLimit_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_changeLimit_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->validError !== null) {
      throw $result->validError;
    }
    if ($result->backendError !== null) {
      throw $result->backendError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->operationDenied !== null) {
      throw $result->operationDenied;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("changeLimit failed: unknown result");
  }

  public function changeLimits($token, \ContractReference $contract, $cardId, array $limits, \Attributes $attributes)
  {
    $this->send_changeLimits($token, $contract, $cardId, $limits, $attributes);
    return $this->recv_changeLimits();
  }

  public function send_changeLimits($token, \ContractReference $contract, $cardId, array $limits, \Attributes $attributes)
  {
    $args = new \OperationsService_changeLimits_args();
    $args->token = $token;
    $args->contract = $contract;
    $args->cardId = $cardId;
    $args->limits = $limits;
    $args->attributes = $attributes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'changeLimits', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('changeLimits', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_changeLimits()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_changeLimits_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_changeLimits_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->validError !== null) {
      throw $result->validError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->operationDenied !== null) {
      throw $result->operationDenied;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    throw new \Exception("changeLimits failed: unknown result");
  }

  public function changeCardSettings($token, \ContractReference $contract, $cardNumberMask, \CardSettings $settings, \Attributes $attributes)
  {
    $this->send_changeCardSettings($token, $contract, $cardNumberMask, $settings, $attributes);
    return $this->recv_changeCardSettings();
  }

  public function send_changeCardSettings($token, \ContractReference $contract, $cardNumberMask, \CardSettings $settings, \Attributes $attributes)
  {
    $args = new \OperationsService_changeCardSettings_args();
    $args->token = $token;
    $args->contract = $contract;
    $args->cardNumberMask = $cardNumberMask;
    $args->settings = $settings;
    $args->attributes = $attributes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'changeCardSettings', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('changeCardSettings', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_changeCardSettings()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_changeCardSettings_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_changeCardSettings_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->validError !== null) {
      throw $result->validError;
    }
    if ($result->backendError !== null) {
      throw $result->backendError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->operationDenied !== null) {
      throw $result->operationDenied;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("changeCardSettings failed: unknown result");
  }

  public function changeDepositSettings($token, \ContractReference $contract, \DepositSettings $settings)
  {
    $this->send_changeDepositSettings($token, $contract, $settings);
    return $this->recv_changeDepositSettings();
  }

  public function send_changeDepositSettings($token, \ContractReference $contract, \DepositSettings $settings)
  {
    $args = new \OperationsService_changeDepositSettings_args();
    $args->token = $token;
    $args->contract = $contract;
    $args->settings = $settings;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'changeDepositSettings', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('changeDepositSettings', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_changeDepositSettings()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_changeDepositSettings_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_changeDepositSettings_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->validError !== null) {
      throw $result->validError;
    }
    if ($result->backendError !== null) {
      throw $result->backendError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->operationDenied !== null) {
      throw $result->operationDenied;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("changeDepositSettings failed: unknown result");
  }

  public function makeDeposit($token, \DepositConditions $deposit, $amountInCents, \ContractReference $source)
  {
    $this->send_makeDeposit($token, $deposit, $amountInCents, $source);
    return $this->recv_makeDeposit();
  }

  public function send_makeDeposit($token, \DepositConditions $deposit, $amountInCents, \ContractReference $source)
  {
    $args = new \OperationsService_makeDeposit_args();
    $args->token = $token;
    $args->deposit = $deposit;
    $args->amountInCents = $amountInCents;
    $args->source = $source;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'makeDeposit', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('makeDeposit', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_makeDeposit()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_makeDeposit_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_makeDeposit_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->validError !== null) {
      throw $result->validError;
    }
    if ($result->error !== null) {
      throw $result->error;
    }
    if ($result->backendError !== null) {
      throw $result->backendError;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("makeDeposit failed: unknown result");
  }

  public function enrollContractClosing($token, \ContractReference $contractToClose, \ContractReference $contracToCompensate, \Attributes $attributes)
  {
    $this->send_enrollContractClosing($token, $contractToClose, $contracToCompensate, $attributes);
    return $this->recv_enrollContractClosing();
  }

  public function send_enrollContractClosing($token, \ContractReference $contractToClose, \ContractReference $contracToCompensate, \Attributes $attributes)
  {
    $args = new \OperationsService_enrollContractClosing_args();
    $args->token = $token;
    $args->contractToClose = $contractToClose;
    $args->contracToCompensate = $contracToCompensate;
    $args->attributes = $attributes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'enrollContractClosing', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('enrollContractClosing', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_enrollContractClosing()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_enrollContractClosing_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_enrollContractClosing_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->validationError !== null) {
      throw $result->validationError;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("enrollContractClosing failed: unknown result");
  }

  public function commitContractClosing($token, $enrolledOperationId, \Attributes $attributes)
  {
    $this->send_commitContractClosing($token, $enrolledOperationId, $attributes);
    return $this->recv_commitContractClosing();
  }

  public function send_commitContractClosing($token, $enrolledOperationId, \Attributes $attributes)
  {
    $args = new \OperationsService_commitContractClosing_args();
    $args->token = $token;
    $args->enrolledOperationId = $enrolledOperationId;
    $args->attributes = $attributes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'commitContractClosing', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('commitContractClosing', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_commitContractClosing()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_commitContractClosing_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_commitContractClosing_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->validationError !== null) {
      throw $result->validationError;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("commitContractClosing failed: unknown result");
  }

  public function enrollCustomOperation($token, \CustomOpeartionSubject $subject, \ContractReference $sourceReference, $amountInCents, $currency)
  {
    $this->send_enrollCustomOperation($token, $subject, $sourceReference, $amountInCents, $currency);
    return $this->recv_enrollCustomOperation();
  }

  public function send_enrollCustomOperation($token, \CustomOpeartionSubject $subject, \ContractReference $sourceReference, $amountInCents, $currency)
  {
    $args = new \OperationsService_enrollCustomOperation_args();
    $args->token = $token;
    $args->subject = $subject;
    $args->sourceReference = $sourceReference;
    $args->amountInCents = $amountInCents;
    $args->currency = $currency;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'enrollCustomOperation', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('enrollCustomOperation', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_enrollCustomOperation()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_enrollCustomOperation_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_enrollCustomOperation_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->validationError !== null) {
      throw $result->validationError;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("enrollCustomOperation failed: unknown result");
  }

  public function commmitCustomOperation($token, $enrolledOperationId, \Attributes $attributes)
  {
    $this->send_commmitCustomOperation($token, $enrolledOperationId, $attributes);
    return $this->recv_commmitCustomOperation();
  }

  public function send_commmitCustomOperation($token, $enrolledOperationId, \Attributes $attributes)
  {
    $args = new \OperationsService_commmitCustomOperation_args();
    $args->token = $token;
    $args->enrolledOperationId = $enrolledOperationId;
    $args->attributes = $attributes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'commmitCustomOperation', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('commmitCustomOperation', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_commmitCustomOperation()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_commmitCustomOperation_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_commmitCustomOperation_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->validationError !== null) {
      throw $result->validationError;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("commmitCustomOperation failed: unknown result");
  }

  public function setDefaultProduct($token, $contractType, $contractId, \Attributes $attributes)
  {
    $this->send_setDefaultProduct($token, $contractType, $contractId, $attributes);
    $this->recv_setDefaultProduct();
  }

  public function send_setDefaultProduct($token, $contractType, $contractId, \Attributes $attributes)
  {
    $args = new \OperationsService_setDefaultProduct_args();
    $args->token = $token;
    $args->contractType = $contractType;
    $args->contractId = $contractId;
    $args->attributes = $attributes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setDefaultProduct', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setDefaultProduct', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setDefaultProduct()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_setDefaultProduct_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_setDefaultProduct_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->wrongSessionException !== null) {
      throw $result->wrongSessionException;
    }
    if ($result->productDoesNotSupportedException !== null) {
      throw $result->productDoesNotSupportedException;
    }
    if ($result->wrongContractIdException !== null) {
      throw $result->wrongContractIdException;
    }
    if ($result->error !== null) {
      throw $result->error;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->backendValidationException !== null) {
      throw $result->backendValidationException;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    return;
  }

  public function fetchFinancialOperations($token, \OperationHistoryFilter $operationHistoryFilter, $dateFrom, $dateTo)
  {
    $this->send_fetchFinancialOperations($token, $operationHistoryFilter, $dateFrom, $dateTo);
    return $this->recv_fetchFinancialOperations();
  }

  public function send_fetchFinancialOperations($token, \OperationHistoryFilter $operationHistoryFilter, $dateFrom, $dateTo)
  {
    $args = new \OperationsService_fetchFinancialOperations_args();
    $args->token = $token;
    $args->operationHistoryFilter = $operationHistoryFilter;
    $args->dateFrom = $dateFrom;
    $args->dateTo = $dateTo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'fetchFinancialOperations', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('fetchFinancialOperations', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_fetchFinancialOperations()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_fetchFinancialOperations_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_fetchFinancialOperations_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->periodError !== null) {
      throw $result->periodError;
    }
    if ($result->denyOperstion !== null) {
      throw $result->denyOperstion;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("fetchFinancialOperations failed: unknown result");
  }

  public function fetchCommonOperations($token, \OperationHistoryFilter $operationHistoryFilter, $dateFrom, $dateTo)
  {
    $this->send_fetchCommonOperations($token, $operationHistoryFilter, $dateFrom, $dateTo);
    return $this->recv_fetchCommonOperations();
  }

  public function send_fetchCommonOperations($token, \OperationHistoryFilter $operationHistoryFilter, $dateFrom, $dateTo)
  {
    $args = new \OperationsService_fetchCommonOperations_args();
    $args->token = $token;
    $args->operationHistoryFilter = $operationHistoryFilter;
    $args->dateFrom = $dateFrom;
    $args->dateTo = $dateTo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'fetchCommonOperations', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('fetchCommonOperations', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_fetchCommonOperations()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_fetchCommonOperations_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_fetchCommonOperations_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->periodError !== null) {
      throw $result->periodError;
    }
    if ($result->denyOperstion !== null) {
      throw $result->denyOperstion;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("fetchCommonOperations failed: unknown result");
  }

  public function enrollCardToCardTransfer($token, \CardReference $senderCard, \CardReference $receiverCard, $amountInCents, $currency, \Attributes $att)
  {
    $this->send_enrollCardToCardTransfer($token, $senderCard, $receiverCard, $amountInCents, $currency, $att);
    return $this->recv_enrollCardToCardTransfer();
  }

  public function send_enrollCardToCardTransfer($token, \CardReference $senderCard, \CardReference $receiverCard, $amountInCents, $currency, \Attributes $att)
  {
    $args = new \OperationsService_enrollCardToCardTransfer_args();
    $args->token = $token;
    $args->senderCard = $senderCard;
    $args->receiverCard = $receiverCard;
    $args->amountInCents = $amountInCents;
    $args->currency = $currency;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'enrollCardToCardTransfer', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('enrollCardToCardTransfer', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_enrollCardToCardTransfer()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_enrollCardToCardTransfer_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_enrollCardToCardTransfer_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->deniedError !== null) {
      throw $result->deniedError;
    }
    if ($result->extendedAuthError !== null) {
      throw $result->extendedAuthError;
    }
    if ($result->validationError !== null) {
      throw $result->validationError;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("enrollCardToCardTransfer failed: unknown result");
  }

  public function commitCardToCardTransfer($token, $enrolledOperationId, $paRes, $md, $otp, $secureCode, \Attributes $att)
  {
    $this->send_commitCardToCardTransfer($token, $enrolledOperationId, $paRes, $md, $otp, $secureCode, $att);
    return $this->recv_commitCardToCardTransfer();
  }

  public function send_commitCardToCardTransfer($token, $enrolledOperationId, $paRes, $md, $otp, $secureCode, \Attributes $att)
  {
    $args = new \OperationsService_commitCardToCardTransfer_args();
    $args->token = $token;
    $args->enrolledOperationId = $enrolledOperationId;
    $args->paRes = $paRes;
    $args->md = $md;
    $args->otp = $otp;
    $args->secureCode = $secureCode;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'commitCardToCardTransfer', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('commitCardToCardTransfer', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_commitCardToCardTransfer()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_commitCardToCardTransfer_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_commitCardToCardTransfer_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->deniedError !== null) {
      throw $result->deniedError;
    }
    if ($result->extendedAuthError !== null) {
      throw $result->extendedAuthError;
    }
    if ($result->validationError !== null) {
      throw $result->validationError;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("commitCardToCardTransfer failed: unknown result");
  }

  public function enrollCardToContractTransfer($token, \CardReference $senderCard, \ContractReference $receiverContract, $amountInCents, $currency, \Attributes $att)
  {
    $this->send_enrollCardToContractTransfer($token, $senderCard, $receiverContract, $amountInCents, $currency, $att);
    return $this->recv_enrollCardToContractTransfer();
  }

  public function send_enrollCardToContractTransfer($token, \CardReference $senderCard, \ContractReference $receiverContract, $amountInCents, $currency, \Attributes $att)
  {
    $args = new \OperationsService_enrollCardToContractTransfer_args();
    $args->token = $token;
    $args->senderCard = $senderCard;
    $args->receiverContract = $receiverContract;
    $args->amountInCents = $amountInCents;
    $args->currency = $currency;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'enrollCardToContractTransfer', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('enrollCardToContractTransfer', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_enrollCardToContractTransfer()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_enrollCardToContractTransfer_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_enrollCardToContractTransfer_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->deniedError !== null) {
      throw $result->deniedError;
    }
    if ($result->extendedAuthError !== null) {
      throw $result->extendedAuthError;
    }
    if ($result->validationError !== null) {
      throw $result->validationError;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("enrollCardToContractTransfer failed: unknown result");
  }

  public function commitCardToContractTransfer($token, $enrolledOperationId, $paRes, $md, $otp, $secureCode, \Attributes $att)
  {
    $this->send_commitCardToContractTransfer($token, $enrolledOperationId, $paRes, $md, $otp, $secureCode, $att);
    return $this->recv_commitCardToContractTransfer();
  }

  public function send_commitCardToContractTransfer($token, $enrolledOperationId, $paRes, $md, $otp, $secureCode, \Attributes $att)
  {
    $args = new \OperationsService_commitCardToContractTransfer_args();
    $args->token = $token;
    $args->enrolledOperationId = $enrolledOperationId;
    $args->paRes = $paRes;
    $args->md = $md;
    $args->otp = $otp;
    $args->secureCode = $secureCode;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'commitCardToContractTransfer', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('commitCardToContractTransfer', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_commitCardToContractTransfer()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OperationsService_commitCardToContractTransfer_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OperationsService_commitCardToContractTransfer_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->deniedError !== null) {
      throw $result->deniedError;
    }
    if ($result->extendedAuthError !== null) {
      throw $result->extendedAuthError;
    }
    if ($result->validationError !== null) {
      throw $result->validationError;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("commitCardToContractTransfer failed: unknown result");
  }

}


// HELPER FUNCTIONS AND STRUCTURES

class OperationsService_findAllOperationTemplates_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_findAllOperationTemplates_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_findAllOperationTemplates_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_findAllOperationTemplates_result {
  static $_TSPEC;

  /**
   * @var \OperationTemplate[]
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \ExecuteTemplateException
   */
  public $error = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\OperationTemplate',
            ),
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => '\ExecuteTemplateException',
          ),
        3 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        4 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        5 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_findAllOperationTemplates_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size311 = 0;
            $_etype314 = 0;
            $xfer += $input->readListBegin($_etype314, $_size311);
            for ($_i315 = 0; $_i315 < $_size311; ++$_i315)
            {
              $elem316 = null;
              $elem316 = new \OperationTemplate();
              $xfer += $elem316->read($input);
              $this->success []= $elem316;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new \ExecuteTemplateException();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_findAllOperationTemplates_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter317)
          {
            $xfer += $iter317->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 3);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 4);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 5);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_execute_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $operationTemplateId = null;
  /**
   * @var int
   */
  public $sum = null;
  /**
   * @var \Attributes
   */
  public $attr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'operationTemplateId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'sum',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'attr',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['operationTemplateId'])) {
        $this->operationTemplateId = $vals['operationTemplateId'];
      }
      if (isset($vals['sum'])) {
        $this->sum = $vals['sum'];
      }
      if (isset($vals['attr'])) {
        $this->attr = $vals['attr'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_execute_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->operationTemplateId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->sum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->attr = new \Attributes();
            $xfer += $this->attr->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_execute_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operationTemplateId !== null) {
      $xfer += $output->writeFieldBegin('operationTemplateId', TType::STRING, 2);
      $xfer += $output->writeString($this->operationTemplateId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sum !== null) {
      $xfer += $output->writeFieldBegin('sum', TType::I64, 3);
      $xfer += $output->writeI64($this->sum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attr !== null) {
      if (!is_object($this->attr)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attr', TType::STRUCT, 4);
      $xfer += $this->attr->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_execute_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \ExecuteTemplateException
   */
  public $error = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => '\ExecuteTemplateException',
          ),
        3 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        4 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        5 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_execute_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new \ExecuteTemplateException();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_execute_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 3);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 4);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 5);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_executeOperation_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var \CashExpenseOperation
   */
  public $operation = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'operation',
          'type' => TType::STRUCT,
          'class' => '\CashExpenseOperation',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['operation'])) {
        $this->operation = $vals['operation'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_executeOperation_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->operation = new \CashExpenseOperation();
            $xfer += $this->operation->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_executeOperation_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operation !== null) {
      if (!is_object($this->operation)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('operation', TType::STRUCT, 2);
      $xfer += $this->operation->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_executeOperation_result {
  static $_TSPEC;

  /**
   * @var \CashExpenseOperation
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \PreconditionException
   */
  public $validError = null;
  /**
   * @var \IbankServerException
   */
  public $error = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\CashExpenseOperation',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        3 => array(
          'var' => 'validError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        4 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        5 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['validError'])) {
        $this->validError = $vals['validError'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_executeOperation_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \CashExpenseOperation();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->validError = new \PreconditionException();
            $xfer += $this->validError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->error = new \IbankServerException();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_executeOperation_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 2);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validError !== null) {
      $xfer += $output->writeFieldBegin('validError', TType::STRUCT, 3);
      $xfer += $this->validError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 4);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 5);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_executeTemplate_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $operationTemplateId = null;
  /**
   * @var int
   */
  public $sum = null;
  /**
   * @var \Attributes
   */
  public $attr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'operationTemplateId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'sum',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'attr',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['operationTemplateId'])) {
        $this->operationTemplateId = $vals['operationTemplateId'];
      }
      if (isset($vals['sum'])) {
        $this->sum = $vals['sum'];
      }
      if (isset($vals['attr'])) {
        $this->attr = $vals['attr'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_executeTemplate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->operationTemplateId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->sum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->attr = new \Attributes();
            $xfer += $this->attr->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_executeTemplate_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operationTemplateId !== null) {
      $xfer += $output->writeFieldBegin('operationTemplateId', TType::STRING, 2);
      $xfer += $output->writeString($this->operationTemplateId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sum !== null) {
      $xfer += $output->writeFieldBegin('sum', TType::I64, 3);
      $xfer += $output->writeI64($this->sum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attr !== null) {
      if (!is_object($this->attr)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attr', TType::STRUCT, 4);
      $xfer += $this->attr->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_executeTemplate_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \ExecuteTemplateException
   */
  public $error = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => '\ExecuteTemplateException',
          ),
        3 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        4 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        5 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_executeTemplate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new \ExecuteTemplateException();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_executeTemplate_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 3);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 4);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 5);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_prefaceTemplateOperation_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $templateId = null;
  /**
   * @var int
   */
  public $amount = null;
  /**
   * @var \ContractReference
   */
  public $source = null;
  /**
   * @var \Attributes
   */
  public $attributes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'templateId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'amount',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'source',
          'type' => TType::STRUCT,
          'class' => '\ContractReference',
          ),
        5 => array(
          'var' => 'attributes',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['templateId'])) {
        $this->templateId = $vals['templateId'];
      }
      if (isset($vals['amount'])) {
        $this->amount = $vals['amount'];
      }
      if (isset($vals['source'])) {
        $this->source = $vals['source'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_prefaceTemplateOperation_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->templateId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->amount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->source = new \ContractReference();
            $xfer += $this->source->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->attributes = new \Attributes();
            $xfer += $this->attributes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_prefaceTemplateOperation_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->templateId !== null) {
      $xfer += $output->writeFieldBegin('templateId', TType::STRING, 2);
      $xfer += $output->writeString($this->templateId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amount !== null) {
      $xfer += $output->writeFieldBegin('amount', TType::I64, 3);
      $xfer += $output->writeI64($this->amount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source !== null) {
      if (!is_object($this->source)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('source', TType::STRUCT, 4);
      $xfer += $this->source->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_object($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::STRUCT, 5);
      $xfer += $this->attributes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_prefaceTemplateOperation_result {
  static $_TSPEC;

  /**
   * @var \FinancialOperation
   */
  public $success = null;
  /**
   * если неправильная или просроченная сессия
   * 
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * если не прошла проверка rules.xml:allow/deny
   * 
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * если не прошли другие проверки
   * 
   * @var \PreconditionException
   */
  public $validationError = null;
  /**
   * технические/коммуникационные проблемы на стороне сервера
   * 
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * @var \BackendValidationException
   */
  public $backendValidationException = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\FinancialOperation',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        3 => array(
          'var' => 'validationError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        4 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        5 => array(
          'var' => 'backendValidationException',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        6 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['validationError'])) {
        $this->validationError = $vals['validationError'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['backendValidationException'])) {
        $this->backendValidationException = $vals['backendValidationException'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_prefaceTemplateOperation_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \FinancialOperation();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->validationError = new \PreconditionException();
            $xfer += $this->validationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->backendValidationException = new \BackendValidationException();
            $xfer += $this->backendValidationException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_prefaceTemplateOperation_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 2);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validationError !== null) {
      $xfer += $output->writeFieldBegin('validationError', TType::STRUCT, 3);
      $xfer += $this->validationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 4);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendValidationException !== null) {
      $xfer += $output->writeFieldBegin('backendValidationException', TType::STRUCT, 5);
      $xfer += $this->backendValidationException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 6);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_executeTemplateOperation_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $templateId = null;
  /**
   * @var int
   */
  public $amount = null;
  /**
   * @var \ContractReference
   */
  public $source = null;
  /**
   * @var \Attributes
   */
  public $attributes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'templateId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'amount',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'source',
          'type' => TType::STRUCT,
          'class' => '\ContractReference',
          ),
        5 => array(
          'var' => 'attributes',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['templateId'])) {
        $this->templateId = $vals['templateId'];
      }
      if (isset($vals['amount'])) {
        $this->amount = $vals['amount'];
      }
      if (isset($vals['source'])) {
        $this->source = $vals['source'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_executeTemplateOperation_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->templateId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->amount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->source = new \ContractReference();
            $xfer += $this->source->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->attributes = new \Attributes();
            $xfer += $this->attributes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_executeTemplateOperation_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->templateId !== null) {
      $xfer += $output->writeFieldBegin('templateId', TType::STRING, 2);
      $xfer += $output->writeString($this->templateId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amount !== null) {
      $xfer += $output->writeFieldBegin('amount', TType::I64, 3);
      $xfer += $output->writeI64($this->amount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source !== null) {
      if (!is_object($this->source)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('source', TType::STRUCT, 4);
      $xfer += $this->source->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_object($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::STRUCT, 5);
      $xfer += $this->attributes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_executeTemplateOperation_result {
  static $_TSPEC;

  /**
   * @var \FinancialOperation
   */
  public $success = null;
  /**
   * если неправильная или просроченная сессия
   * 
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * если не прошла проверка rules.xml:allow/deny
   * 
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * если не прошли другие проверки
   * 
   * @var \PreconditionException
   */
  public $validationError = null;
  /**
   * если операция требует сессии с расширенной аутентификацией
   * 
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * технические/коммуникационные проблемы на стороне сервера
   * 
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * Выполнение операции (например SEPTransfer) может подразумевать ошибки валидации бэк-энда
   * 
   * @var \BackendValidationException
   */
  public $backendError = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\FinancialOperation',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        3 => array(
          'var' => 'validationError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        4 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'backendError',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        7 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['validationError'])) {
        $this->validationError = $vals['validationError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['backendError'])) {
        $this->backendError = $vals['backendError'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_executeTemplateOperation_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \FinancialOperation();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->validationError = new \PreconditionException();
            $xfer += $this->validationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->backendError = new \BackendValidationException();
            $xfer += $this->backendError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_executeTemplateOperation_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 2);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validationError !== null) {
      $xfer += $output->writeFieldBegin('validationError', TType::STRUCT, 3);
      $xfer += $this->validationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 4);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendError !== null) {
      $xfer += $output->writeFieldBegin('backendError', TType::STRUCT, 6);
      $xfer += $this->backendError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 7);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_prefaceSEPTransferOperation_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var \OperationSubject
   */
  public $destination = null;
  /**
   * @var string
   */
  public $destinationDescription = null;
  /**
   * @var int
   */
  public $amountInCents = null;
  /**
   * @var \ContractReference
   */
  public $source = null;
  /**
   * @var \Attributes
   */
  public $attributes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'destination',
          'type' => TType::STRUCT,
          'class' => '\OperationSubject',
          ),
        3 => array(
          'var' => 'destinationDescription',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'amountInCents',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'source',
          'type' => TType::STRUCT,
          'class' => '\ContractReference',
          ),
        6 => array(
          'var' => 'attributes',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['destination'])) {
        $this->destination = $vals['destination'];
      }
      if (isset($vals['destinationDescription'])) {
        $this->destinationDescription = $vals['destinationDescription'];
      }
      if (isset($vals['amountInCents'])) {
        $this->amountInCents = $vals['amountInCents'];
      }
      if (isset($vals['source'])) {
        $this->source = $vals['source'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_prefaceSEPTransferOperation_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->destination = new \OperationSubject();
            $xfer += $this->destination->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->destinationDescription);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->amountInCents);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->source = new \ContractReference();
            $xfer += $this->source->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->attributes = new \Attributes();
            $xfer += $this->attributes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_prefaceSEPTransferOperation_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->destination !== null) {
      if (!is_object($this->destination)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('destination', TType::STRUCT, 2);
      $xfer += $this->destination->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->destinationDescription !== null) {
      $xfer += $output->writeFieldBegin('destinationDescription', TType::STRING, 3);
      $xfer += $output->writeString($this->destinationDescription);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amountInCents !== null) {
      $xfer += $output->writeFieldBegin('amountInCents', TType::I64, 4);
      $xfer += $output->writeI64($this->amountInCents);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source !== null) {
      if (!is_object($this->source)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('source', TType::STRUCT, 5);
      $xfer += $this->source->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_object($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::STRUCT, 6);
      $xfer += $this->attributes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_prefaceSEPTransferOperation_result {
  static $_TSPEC;

  /**
   * @var \FinancialOperation
   */
  public $success = null;
  /**
   * если неправильная или просроченная сессия
   * 
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * если не прошла проверка rules.xml:allow/deny
   * 
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * если не прошли другие проверки
   * 
   * @var \PreconditionException
   */
  public $validationError = null;
  /**
   * технические/коммуникационные проблемы на стороне сервера
   * 
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * access_forbidden - когда клиент пробует использовать
   * чужой контракт
   * 
   * @var \BackendValidationException
   */
  public $backendValidationException = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\FinancialOperation',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        3 => array(
          'var' => 'validationError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        4 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        5 => array(
          'var' => 'backendValidationException',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        6 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['validationError'])) {
        $this->validationError = $vals['validationError'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['backendValidationException'])) {
        $this->backendValidationException = $vals['backendValidationException'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_prefaceSEPTransferOperation_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \FinancialOperation();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->validationError = new \PreconditionException();
            $xfer += $this->validationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->backendValidationException = new \BackendValidationException();
            $xfer += $this->backendValidationException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_prefaceSEPTransferOperation_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 2);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validationError !== null) {
      $xfer += $output->writeFieldBegin('validationError', TType::STRUCT, 3);
      $xfer += $this->validationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 4);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendValidationException !== null) {
      $xfer += $output->writeFieldBegin('backendValidationException', TType::STRUCT, 5);
      $xfer += $this->backendValidationException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 6);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_executeSEPTransferOperation_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var \OperationSubject
   */
  public $destination = null;
  /**
   * @var string
   */
  public $destinationDescription = null;
  /**
   * @var int
   */
  public $amountInCents = null;
  /**
   * @var \ContractReference
   */
  public $source = null;
  /**
   * @var \Attributes
   */
  public $attributes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'destination',
          'type' => TType::STRUCT,
          'class' => '\OperationSubject',
          ),
        3 => array(
          'var' => 'destinationDescription',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'amountInCents',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'source',
          'type' => TType::STRUCT,
          'class' => '\ContractReference',
          ),
        6 => array(
          'var' => 'attributes',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['destination'])) {
        $this->destination = $vals['destination'];
      }
      if (isset($vals['destinationDescription'])) {
        $this->destinationDescription = $vals['destinationDescription'];
      }
      if (isset($vals['amountInCents'])) {
        $this->amountInCents = $vals['amountInCents'];
      }
      if (isset($vals['source'])) {
        $this->source = $vals['source'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_executeSEPTransferOperation_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->destination = new \OperationSubject();
            $xfer += $this->destination->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->destinationDescription);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->amountInCents);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->source = new \ContractReference();
            $xfer += $this->source->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->attributes = new \Attributes();
            $xfer += $this->attributes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_executeSEPTransferOperation_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->destination !== null) {
      if (!is_object($this->destination)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('destination', TType::STRUCT, 2);
      $xfer += $this->destination->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->destinationDescription !== null) {
      $xfer += $output->writeFieldBegin('destinationDescription', TType::STRING, 3);
      $xfer += $output->writeString($this->destinationDescription);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amountInCents !== null) {
      $xfer += $output->writeFieldBegin('amountInCents', TType::I64, 4);
      $xfer += $output->writeI64($this->amountInCents);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source !== null) {
      if (!is_object($this->source)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('source', TType::STRUCT, 5);
      $xfer += $this->source->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_object($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::STRUCT, 6);
      $xfer += $this->attributes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_executeSEPTransferOperation_result {
  static $_TSPEC;

  /**
   * @var \FinancialOperation
   */
  public $success = null;
  /**
   * если неправильная или просроченная сессия
   * 
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * если не прошла проверка rules.xml:allow/deny
   * 
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * если не прошли другие проверки
   * 
   * @var \PreconditionException
   */
  public $validationError = null;
  /**
   * если операция требует сессии с расширенной аутентификацией
   * 
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * технические/коммуникационные проблемы на стороне сервера
   * 
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * например бек-энд система сообщила что целевой счет числится как "подозреваемый в мошенничестве" и т.п.
   * 
   * @var \BackendValidationException
   */
  public $backendError = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\FinancialOperation',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        3 => array(
          'var' => 'validationError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        4 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'backendError',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        7 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['validationError'])) {
        $this->validationError = $vals['validationError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['backendError'])) {
        $this->backendError = $vals['backendError'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_executeSEPTransferOperation_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \FinancialOperation();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->validationError = new \PreconditionException();
            $xfer += $this->validationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->backendError = new \BackendValidationException();
            $xfer += $this->backendError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_executeSEPTransferOperation_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 2);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validationError !== null) {
      $xfer += $output->writeFieldBegin('validationError', TType::STRUCT, 3);
      $xfer += $this->validationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 4);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendError !== null) {
      $xfer += $output->writeFieldBegin('backendError', TType::STRUCT, 6);
      $xfer += $this->backendError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 7);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_prefaceIntrabankTransferOperation_args {
  static $_TSPEC;

  /**
   * Session token
   * 
   * @var string
   */
  public $token = null;
  /**
   * Target intrabank account. Only destination.identifierType and destination.identifier are mandatory
   * 
   * @var \IntrabankOperationSubject
   */
  public $destination = null;
  /**
   * Operation amount in cents. Operation currency will be detected from source contract main account currency
   * 
   * @var int
   */
  public $amountInCents = null;
  /**
   * Reference to source (current client's) contract
   * 
   * @var \ContractReference
   */
  public $source = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'destination',
          'type' => TType::STRUCT,
          'class' => '\IntrabankOperationSubject',
          ),
        3 => array(
          'var' => 'amountInCents',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'source',
          'type' => TType::STRUCT,
          'class' => '\ContractReference',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['destination'])) {
        $this->destination = $vals['destination'];
      }
      if (isset($vals['amountInCents'])) {
        $this->amountInCents = $vals['amountInCents'];
      }
      if (isset($vals['source'])) {
        $this->source = $vals['source'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_prefaceIntrabankTransferOperation_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->destination = new \IntrabankOperationSubject();
            $xfer += $this->destination->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->amountInCents);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->source = new \ContractReference();
            $xfer += $this->source->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_prefaceIntrabankTransferOperation_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->destination !== null) {
      if (!is_object($this->destination)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('destination', TType::STRUCT, 2);
      $xfer += $this->destination->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amountInCents !== null) {
      $xfer += $output->writeFieldBegin('amountInCents', TType::I64, 3);
      $xfer += $output->writeI64($this->amountInCents);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source !== null) {
      if (!is_object($this->source)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('source', TType::STRUCT, 4);
      $xfer += $this->source->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_prefaceIntrabankTransferOperation_result {
  static $_TSPEC;

  /**
   * @var \FinancialOperation
   */
  public $success = null;
  /**
   * если неправильная или просроченная сессия
   * 
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * если не прошла проверка rules.xml:allow/deny
   * 
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * если не прошли другие проверки
   * 
   * @var \PreconditionException
   */
  public $validationError = null;
  /**
   * технические/коммуникационные проблемы на стороне сервера
   * 
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * logical integration error
   * access_forbidden - когда клиент пробует использовать
   * чужой контракт
   * 
   * @var \BackendValidationException
   */
  public $backendValidationException = null;
  /**
   * technition error during processing of operation on integration level of server
   * 
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\FinancialOperation',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        3 => array(
          'var' => 'validationError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        4 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        5 => array(
          'var' => 'backendValidationException',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        6 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['validationError'])) {
        $this->validationError = $vals['validationError'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['backendValidationException'])) {
        $this->backendValidationException = $vals['backendValidationException'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_prefaceIntrabankTransferOperation_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \FinancialOperation();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->validationError = new \PreconditionException();
            $xfer += $this->validationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->backendValidationException = new \BackendValidationException();
            $xfer += $this->backendValidationException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_prefaceIntrabankTransferOperation_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 2);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validationError !== null) {
      $xfer += $output->writeFieldBegin('validationError', TType::STRUCT, 3);
      $xfer += $this->validationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 4);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendValidationException !== null) {
      $xfer += $output->writeFieldBegin('backendValidationException', TType::STRUCT, 5);
      $xfer += $this->backendValidationException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 6);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_executeIntrabankTransferOperation_args {
  static $_TSPEC;

  /**
   * Session token
   * 
   * @var string
   */
  public $token = null;
  /**
   * Target intrabank account. Fields destination.identifierType and destination.identifier are mandatory.
   * Fields destination.challengeRequestValue and destination.challengeResponseValue may present or not depending on server settings.
   * In simpliest case they both are copied operation.challengeRequestValue obtained from preface phase.
   * 
   * @var \IntrabankOperationSubject
   */
  public $destination = null;
  /**
   * Operation amount in cents. Operation currency will be detected from source contract main account currency
   * 
   * @var int
   */
  public $amountInCents = null;
  /**
   * Reference to source (current client's) contract
   * 
   * @var \ContractReference
   */
  public $source = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'destination',
          'type' => TType::STRUCT,
          'class' => '\IntrabankOperationSubject',
          ),
        3 => array(
          'var' => 'amountInCents',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'source',
          'type' => TType::STRUCT,
          'class' => '\ContractReference',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['destination'])) {
        $this->destination = $vals['destination'];
      }
      if (isset($vals['amountInCents'])) {
        $this->amountInCents = $vals['amountInCents'];
      }
      if (isset($vals['source'])) {
        $this->source = $vals['source'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_executeIntrabankTransferOperation_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->destination = new \IntrabankOperationSubject();
            $xfer += $this->destination->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->amountInCents);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->source = new \ContractReference();
            $xfer += $this->source->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_executeIntrabankTransferOperation_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->destination !== null) {
      if (!is_object($this->destination)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('destination', TType::STRUCT, 2);
      $xfer += $this->destination->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amountInCents !== null) {
      $xfer += $output->writeFieldBegin('amountInCents', TType::I64, 3);
      $xfer += $output->writeI64($this->amountInCents);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source !== null) {
      if (!is_object($this->source)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('source', TType::STRUCT, 4);
      $xfer += $this->source->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_executeIntrabankTransferOperation_result {
  static $_TSPEC;

  /**
   * @var \FinancialOperation
   */
  public $success = null;
  /**
   * если неправильная или просроченная сессия
   * 
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * если не прошла проверка rules.xml:allow/deny
   * 
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * если не прошли другие проверки
   * 
   * @var \PreconditionException
   */
  public $validationError = null;
  /**
   * если операция требует сессии с расширенной аутентификацией
   * 
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * технические/коммуникационные проблемы на стороне сервера
   * 
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * logical integration error
   * access_forbidden - когда клиент пробует использовать
   * чужой контракт
   * 
   * @var \BackendValidationException
   */
  public $backendValidationException = null;
  /**
   * technition error during processing of operation on integration level of server
   * 
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\FinancialOperation',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        3 => array(
          'var' => 'validationError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        4 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'backendValidationException',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        7 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['validationError'])) {
        $this->validationError = $vals['validationError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['backendValidationException'])) {
        $this->backendValidationException = $vals['backendValidationException'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_executeIntrabankTransferOperation_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \FinancialOperation();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->validationError = new \PreconditionException();
            $xfer += $this->validationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->backendValidationException = new \BackendValidationException();
            $xfer += $this->backendValidationException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_executeIntrabankTransferOperation_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 2);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validationError !== null) {
      $xfer += $output->writeFieldBegin('validationError', TType::STRUCT, 3);
      $xfer += $this->validationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 4);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendValidationException !== null) {
      $xfer += $output->writeFieldBegin('backendValidationException', TType::STRUCT, 6);
      $xfer += $this->backendValidationException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 7);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_findFinancialOperationById_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_findFinancialOperationById_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_findFinancialOperationById_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 2);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_findFinancialOperationById_result {
  static $_TSPEC;

  /**
   * @var \FinancialOperation
   */
  public $success = null;
  /**
   * если неправильная или просроченная сессия
   * 
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * если не прошла проверка rules.xml:allow/deny для read_contracts
   * 
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * если у пользователя нет операции
   * 
   * @var \PreconditionException
   */
  public $validError = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\FinancialOperation',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        3 => array(
          'var' => 'validError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        4 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        5 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['validError'])) {
        $this->validError = $vals['validError'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_findFinancialOperationById_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \FinancialOperation();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->validError = new \PreconditionException();
            $xfer += $this->validError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_findFinancialOperationById_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 2);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validError !== null) {
      $xfer += $output->writeFieldBegin('validError', TType::STRUCT, 3);
      $xfer += $this->validError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 4);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 5);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_executeCashExpenseOperation_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var \CashExpenseOperation
   */
  public $operation = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'operation',
          'type' => TType::STRUCT,
          'class' => '\CashExpenseOperation',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['operation'])) {
        $this->operation = $vals['operation'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_executeCashExpenseOperation_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->operation = new \CashExpenseOperation();
            $xfer += $this->operation->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_executeCashExpenseOperation_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operation !== null) {
      if (!is_object($this->operation)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('operation', TType::STRUCT, 2);
      $xfer += $this->operation->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_executeCashExpenseOperation_result {
  static $_TSPEC;

  /**
   * @var \CashExpenseOperation
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \PreconditionException
   */
  public $validError = null;
  /**
   * @var \IbankServerException
   */
  public $error = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\CashExpenseOperation',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        3 => array(
          'var' => 'validError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        4 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        5 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        6 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['validError'])) {
        $this->validError = $vals['validError'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_executeCashExpenseOperation_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \CashExpenseOperation();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->validError = new \PreconditionException();
            $xfer += $this->validError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->error = new \IbankServerException();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_executeCashExpenseOperation_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 2);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validError !== null) {
      $xfer += $output->writeFieldBegin('validError', TType::STRUCT, 3);
      $xfer += $this->validError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 4);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 5);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 6);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_prefaceOperation_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var \ContractToContractOperation
   */
  public $operation = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'operation',
          'type' => TType::STRUCT,
          'class' => '\ContractToContractOperation',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['operation'])) {
        $this->operation = $vals['operation'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_prefaceOperation_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->operation = new \ContractToContractOperation();
            $xfer += $this->operation->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_prefaceOperation_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operation !== null) {
      if (!is_object($this->operation)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('operation', TType::STRUCT, 2);
      $xfer += $this->operation->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_prefaceOperation_result {
  static $_TSPEC;

  /**
   * @var \ContractToContractOperation
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \PreconditionException
   */
  public $validError = null;
  /**
   * @var \IbankServerException
   */
  public $error = null;
  /**
   * @var \BackendValidationException
   */
  public $backendValidationException = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\ContractToContractOperation',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        3 => array(
          'var' => 'validError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        4 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        5 => array(
          'var' => 'backendValidationException',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        6 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['validError'])) {
        $this->validError = $vals['validError'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['backendValidationException'])) {
        $this->backendValidationException = $vals['backendValidationException'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_prefaceOperation_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \ContractToContractOperation();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->validError = new \PreconditionException();
            $xfer += $this->validError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->error = new \IbankServerException();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->backendValidationException = new \BackendValidationException();
            $xfer += $this->backendValidationException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_prefaceOperation_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 2);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validError !== null) {
      $xfer += $output->writeFieldBegin('validError', TType::STRUCT, 3);
      $xfer += $this->validError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 4);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendValidationException !== null) {
      $xfer += $output->writeFieldBegin('backendValidationException', TType::STRUCT, 5);
      $xfer += $this->backendValidationException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 6);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_executeContractToContractOperation_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var \ContractToContractOperation
   */
  public $operation = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'operation',
          'type' => TType::STRUCT,
          'class' => '\ContractToContractOperation',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['operation'])) {
        $this->operation = $vals['operation'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_executeContractToContractOperation_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->operation = new \ContractToContractOperation();
            $xfer += $this->operation->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_executeContractToContractOperation_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operation !== null) {
      if (!is_object($this->operation)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('operation', TType::STRUCT, 2);
      $xfer += $this->operation->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_executeContractToContractOperation_result {
  static $_TSPEC;

  /**
   * @var \ContractToContractOperation
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * insufficient_funds - если недостаточно средств на счете-источнике
   * 
   * @var \PreconditionException
   */
  public $validError = null;
  /**
   * @var \IbankServerException
   */
  public $error = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * например, если банковский бек-энд по собственым павилам проверил и сообщил о несовместимости перевода именно между этими счетами
   * 
   * @var \BackendValidationException
   */
  public $backendError = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\ContractToContractOperation',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        3 => array(
          'var' => 'validError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        4 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        5 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        6 => array(
          'var' => 'backendError',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        7 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['validError'])) {
        $this->validError = $vals['validError'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['backendError'])) {
        $this->backendError = $vals['backendError'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_executeContractToContractOperation_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \ContractToContractOperation();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->validError = new \PreconditionException();
            $xfer += $this->validError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->error = new \IbankServerException();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->backendError = new \BackendValidationException();
            $xfer += $this->backendError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_executeContractToContractOperation_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 2);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validError !== null) {
      $xfer += $output->writeFieldBegin('validError', TType::STRUCT, 3);
      $xfer += $this->validError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 4);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 5);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendError !== null) {
      $xfer += $output->writeFieldBegin('backendError', TType::STRUCT, 6);
      $xfer += $this->backendError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 7);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_fetchBillerCategories_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * идентификатор родительской категории; если не указан, то в результате будут получены корневые категории каталога
   * 
   * @var string
   */
  public $parentCategoryId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parentCategoryId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['parentCategoryId'])) {
        $this->parentCategoryId = $vals['parentCategoryId'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_fetchBillerCategories_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parentCategoryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_fetchBillerCategories_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parentCategoryId !== null) {
      $xfer += $output->writeFieldBegin('parentCategoryId', TType::STRING, 2);
      $xfer += $output->writeString($this->parentCategoryId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_fetchBillerCategories_result {
  static $_TSPEC;

  /**
   * @var \BillerCategory[]
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * - wrong_category_id: в случае, если в каталоге нет такой категории
   * 
   * 
   * @var \PreconditionException
   */
  public $validError = null;
  /**
   * Технические или коммуникационные ошибки
   * 
   * @var \IbankServerException
   */
  public $error = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\BillerCategory',
            ),
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'validError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        4 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        5 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['validError'])) {
        $this->validError = $vals['validError'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_fetchBillerCategories_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size318 = 0;
            $_etype321 = 0;
            $xfer += $input->readListBegin($_etype321, $_size318);
            for ($_i322 = 0; $_i322 < $_size318; ++$_i322)
            {
              $elem323 = null;
              $elem323 = new \BillerCategory();
              $xfer += $elem323->read($input);
              $this->success []= $elem323;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->validError = new \PreconditionException();
            $xfer += $this->validError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->error = new \IbankServerException();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_fetchBillerCategories_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter324)
          {
            $xfer += $iter324->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validError !== null) {
      $xfer += $output->writeFieldBegin('validError', TType::STRUCT, 2);
      $xfer += $this->validError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 4);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 5);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_fetchBillerCategoryPath_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * идентификатор искомой категории; если не указан, то ошибка 'empty_category_id'
   * 
   * @var string
   */
  public $categoryId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'categoryId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['categoryId'])) {
        $this->categoryId = $vals['categoryId'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_fetchBillerCategoryPath_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->categoryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_fetchBillerCategoryPath_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->categoryId !== null) {
      $xfer += $output->writeFieldBegin('categoryId', TType::STRING, 2);
      $xfer += $output->writeString($this->categoryId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_fetchBillerCategoryPath_result {
  static $_TSPEC;

  /**
   * @var \BillerCategory[]
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * - empty_category_id: если категория не указана
   * - wrong_category_id: в случае,  если в каталоге нет такой категории
   * 
   * 
   * @var \PreconditionException
   */
  public $validError = null;
  /**
   * Технические или коммуникационные ошибки
   * 
   * @var \IbankServerException
   */
  public $error = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\BillerCategory',
            ),
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'validError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        4 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        5 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['validError'])) {
        $this->validError = $vals['validError'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_fetchBillerCategoryPath_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size325 = 0;
            $_etype328 = 0;
            $xfer += $input->readListBegin($_etype328, $_size325);
            for ($_i329 = 0; $_i329 < $_size325; ++$_i329)
            {
              $elem330 = null;
              $elem330 = new \BillerCategory();
              $xfer += $elem330->read($input);
              $this->success []= $elem330;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->validError = new \PreconditionException();
            $xfer += $this->validError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->error = new \IbankServerException();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_fetchBillerCategoryPath_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter331)
          {
            $xfer += $iter331->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validError !== null) {
      $xfer += $output->writeFieldBegin('validError', TType::STRUCT, 2);
      $xfer += $this->validError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 4);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 5);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_findBillers_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * Строка поиска биллера по его названию или названию категории к которой он принадлежит.
   * * Поиск осуществляется по подстроке. Например если биллер "Кайф Телеком" принадлежит категории
   * * "Мобильные операторы", то этот биллер будет находиться по строкам "кай", "Кайф", "елеко" и т.д.,
   * * а также во вторую очередь по "оператор", "Опер", "бильные" и т.п.
   *  * Но при этом, сначала выдаются биллеры, поиск которых успешен по названию биллера ("первая очередь"),
   *  * только потом  те, поиск которых успешен по лишь по категории.
   *  * Если подстрока найдена и в названии биллера и в названии категории, то такой биллер выдается
   *  * в результатах в одном эксемпляре, в первой очереди.
   * *
   * 
   * @var string
   */
  public $searchQuery = null;
  /**
   * Корневая категория, от которой ведетсяя поиск.
   * Может отсутствовать, тогда поиск ведется по всем биллерам.
   * Если указана, то в поиск попадают только биллеры, которые находятся в этой категории,
   * ИЛИ в любой дочерней категории, не зависимо от уровня вложенности.
   * 
   * 
   * @var string
   */
  public $categoryId = null;
  /**
   * Если указан, то в результаты попадают только биллеры с указанным провайдером
   * 
   * @var string
   */
  public $providerId = null;
  /**
   * * Ограничение на количество результатов поиска: offset -- смещение относительно начала полного списка,
   * * считается от нуля, limit -- максимальное количество выдаваемых результатов.
   *  * Например если всего найдено 23 биллера, а указано offset=0, limit=5, то будут выданы
   *  * 1й, 2й, 3й, 4й и 5й биллеры, в если offset=2, то 3й, 4й, 5й, 6й и 7й биллеры и т.д.
   * *
   * 
   * @var int
   */
  public $offset = null;
  /**
   * @var int
   */
  public $limit = null;
  /**
   * If need only current category billers
   * 
   * @var bool
   */
  public $currentCategoryOnly = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'searchQuery',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'categoryId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'providerId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'currentCategoryOnly',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['searchQuery'])) {
        $this->searchQuery = $vals['searchQuery'];
      }
      if (isset($vals['categoryId'])) {
        $this->categoryId = $vals['categoryId'];
      }
      if (isset($vals['providerId'])) {
        $this->providerId = $vals['providerId'];
      }
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['currentCategoryOnly'])) {
        $this->currentCategoryOnly = $vals['currentCategoryOnly'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_findBillers_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->searchQuery);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->categoryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->providerId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->currentCategoryOnly);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_findBillers_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->searchQuery !== null) {
      $xfer += $output->writeFieldBegin('searchQuery', TType::STRING, 2);
      $xfer += $output->writeString($this->searchQuery);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->categoryId !== null) {
      $xfer += $output->writeFieldBegin('categoryId', TType::STRING, 3);
      $xfer += $output->writeString($this->categoryId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->providerId !== null) {
      $xfer += $output->writeFieldBegin('providerId', TType::STRING, 4);
      $xfer += $output->writeString($this->providerId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 5);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 6);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currentCategoryOnly !== null) {
      $xfer += $output->writeFieldBegin('currentCategoryOnly', TType::BOOL, 7);
      $xfer += $output->writeBool($this->currentCategoryOnly);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_findBillers_result {
  static $_TSPEC;

  /**
   * @var \Biller[]
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   *                         * - wrong_category_id: в случае, если в каталоге нет такой категории
   *                         * - wrong_provider_id: в случае, если в системе нет такого провайдера
   *                         * - wrong_offset: если указан отрицательный или не целочисленный offset
   *                         * - wrong_limit: если указан отрицательный или не целочисленный limit
   * *
   * 
   * @var \PreconditionException
   */
  public $validError = null;
  /**
   * @var \IbankServerException
   */
  public $error = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Biller',
            ),
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'validError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        4 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        5 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['validError'])) {
        $this->validError = $vals['validError'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_findBillers_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size332 = 0;
            $_etype335 = 0;
            $xfer += $input->readListBegin($_etype335, $_size332);
            for ($_i336 = 0; $_i336 < $_size332; ++$_i336)
            {
              $elem337 = null;
              $elem337 = new \Biller();
              $xfer += $elem337->read($input);
              $this->success []= $elem337;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->validError = new \PreconditionException();
            $xfer += $this->validError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->error = new \IbankServerException();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_findBillers_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter338)
          {
            $xfer += $iter338->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validError !== null) {
      $xfer += $output->writeFieldBegin('validError', TType::STRUCT, 2);
      $xfer += $this->validError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 4);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 5);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_findBillerById_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * Если указан, то в результаты попадают только биллеры с указанным провайдером
   * 
   * @var string
   */
  public $providerId = null;
  /**
   * @var string
   */
  public $billerId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'providerId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'billerId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['providerId'])) {
        $this->providerId = $vals['providerId'];
      }
      if (isset($vals['billerId'])) {
        $this->billerId = $vals['billerId'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_findBillerById_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->providerId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->billerId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_findBillerById_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->providerId !== null) {
      $xfer += $output->writeFieldBegin('providerId', TType::STRING, 2);
      $xfer += $output->writeString($this->providerId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->billerId !== null) {
      $xfer += $output->writeFieldBegin('billerId', TType::STRING, 3);
      $xfer += $output->writeString($this->billerId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_findBillerById_result {
  static $_TSPEC;

  /**
   * @var \Biller
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   *                         * - wrong_category_id: в случае, если в каталоге нет такой категории
   *                         * - wrong_provider_id: в случае, если в системе нет такого провайдера
   *                         * - wrong_offset: если указан отрицательный или не целочисленный offset
   *                         * - wrong_limit: если указан отрицательный или не целочисленный limit
   * *
   * 
   * @var \PreconditionException
   */
  public $validError = null;
  /**
   * @var \IbankServerException
   */
  public $error = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Biller',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'validError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        4 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        5 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['validError'])) {
        $this->validError = $vals['validError'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_findBillerById_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Biller();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->validError = new \PreconditionException();
            $xfer += $this->validError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->error = new \IbankServerException();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_findBillerById_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validError !== null) {
      $xfer += $output->writeFieldBegin('validError', TType::STRUCT, 2);
      $xfer += $this->validError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 4);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 5);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_prefaceBillPaymentOperation_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var \BillerOperationSubject
   */
  public $destination = null;
  /**
   * @var int
   */
  public $amountInCents = null;
  /**
   * @var \ContractReference
   */
  public $source = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'destination',
          'type' => TType::STRUCT,
          'class' => '\BillerOperationSubject',
          ),
        3 => array(
          'var' => 'amountInCents',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'source',
          'type' => TType::STRUCT,
          'class' => '\ContractReference',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['destination'])) {
        $this->destination = $vals['destination'];
      }
      if (isset($vals['amountInCents'])) {
        $this->amountInCents = $vals['amountInCents'];
      }
      if (isset($vals['source'])) {
        $this->source = $vals['source'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_prefaceBillPaymentOperation_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->destination = new \BillerOperationSubject();
            $xfer += $this->destination->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->amountInCents);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->source = new \ContractReference();
            $xfer += $this->source->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_prefaceBillPaymentOperation_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->destination !== null) {
      if (!is_object($this->destination)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('destination', TType::STRUCT, 2);
      $xfer += $this->destination->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amountInCents !== null) {
      $xfer += $output->writeFieldBegin('amountInCents', TType::I64, 3);
      $xfer += $output->writeI64($this->amountInCents);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source !== null) {
      if (!is_object($this->source)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('source', TType::STRUCT, 4);
      $xfer += $this->source->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_prefaceBillPaymentOperation_result {
  static $_TSPEC;

  /**
   * @var \FinancialOperation
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \PreconditionException
   */
  public $validError = null;
  /**
   * @var \IbankServerException
   */
  public $error = null;
  /**
   * @var \BackendValidationException
   */
  public $backendError = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\FinancialOperation',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        3 => array(
          'var' => 'validError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        4 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        5 => array(
          'var' => 'backendError',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        6 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['validError'])) {
        $this->validError = $vals['validError'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['backendError'])) {
        $this->backendError = $vals['backendError'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_prefaceBillPaymentOperation_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \FinancialOperation();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->validError = new \PreconditionException();
            $xfer += $this->validError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->error = new \IbankServerException();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->backendError = new \BackendValidationException();
            $xfer += $this->backendError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_prefaceBillPaymentOperation_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 2);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validError !== null) {
      $xfer += $output->writeFieldBegin('validError', TType::STRUCT, 3);
      $xfer += $this->validError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 4);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendError !== null) {
      $xfer += $output->writeFieldBegin('backendError', TType::STRUCT, 5);
      $xfer += $this->backendError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 6);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_executeBillPaymentOperation_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var \BillerOperationSubject
   */
  public $destination = null;
  /**
   * @var int
   */
  public $amountInCents = null;
  /**
   * @var \ContractReference
   */
  public $source = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'destination',
          'type' => TType::STRUCT,
          'class' => '\BillerOperationSubject',
          ),
        3 => array(
          'var' => 'amountInCents',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'source',
          'type' => TType::STRUCT,
          'class' => '\ContractReference',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['destination'])) {
        $this->destination = $vals['destination'];
      }
      if (isset($vals['amountInCents'])) {
        $this->amountInCents = $vals['amountInCents'];
      }
      if (isset($vals['source'])) {
        $this->source = $vals['source'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_executeBillPaymentOperation_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->destination = new \BillerOperationSubject();
            $xfer += $this->destination->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->amountInCents);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->source = new \ContractReference();
            $xfer += $this->source->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_executeBillPaymentOperation_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->destination !== null) {
      if (!is_object($this->destination)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('destination', TType::STRUCT, 2);
      $xfer += $this->destination->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amountInCents !== null) {
      $xfer += $output->writeFieldBegin('amountInCents', TType::I64, 3);
      $xfer += $output->writeI64($this->amountInCents);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source !== null) {
      if (!is_object($this->source)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('source', TType::STRUCT, 4);
      $xfer += $this->source->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_executeBillPaymentOperation_result {
  static $_TSPEC;

  /**
   * @var \FinancialOperation
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \PreconditionException
   */
  public $validError = null;
  /**
   * @var \IbankServerException
   */
  public $error = null;
  /**
   * @var \BackendValidationException
   */
  public $backendError = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\FinancialOperation',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        3 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        4 => array(
          'var' => 'validError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        5 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'backendError',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        7 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['validError'])) {
        $this->validError = $vals['validError'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['backendError'])) {
        $this->backendError = $vals['backendError'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_executeBillPaymentOperation_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \FinancialOperation();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->validError = new \PreconditionException();
            $xfer += $this->validError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->error = new \IbankServerException();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->backendError = new \BackendValidationException();
            $xfer += $this->backendError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_executeBillPaymentOperation_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 2);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 3);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validError !== null) {
      $xfer += $output->writeFieldBegin('validError', TType::STRUCT, 4);
      $xfer += $this->validError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 5);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendError !== null) {
      $xfer += $output->writeFieldBegin('backendError', TType::STRUCT, 6);
      $xfer += $this->backendError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 7);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_createTemplate_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * настройки шаблона (имя, иконка, рекомендуемые суммы и т.п.)
   * 
   * @var \OperationTemplateProperties
   */
  public $templateProperties = null;
  /**
   * Реквизиты операции: тип + реквизиты в зависимости от типа
   * 
   * @var \FinancialOperationSubject
   */
  public $subject = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'templateProperties',
          'type' => TType::STRUCT,
          'class' => '\OperationTemplateProperties',
          ),
        4 => array(
          'var' => 'subject',
          'type' => TType::STRUCT,
          'class' => '\FinancialOperationSubject',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['templateProperties'])) {
        $this->templateProperties = $vals['templateProperties'];
      }
      if (isset($vals['subject'])) {
        $this->subject = $vals['subject'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_createTemplate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->templateProperties = new \OperationTemplateProperties();
            $xfer += $this->templateProperties->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->subject = new \FinancialOperationSubject();
            $xfer += $this->subject->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_createTemplate_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->templateProperties !== null) {
      if (!is_object($this->templateProperties)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('templateProperties', TType::STRUCT, 2);
      $xfer += $this->templateProperties->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->subject !== null) {
      if (!is_object($this->subject)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('subject', TType::STRUCT, 4);
      $xfer += $this->subject->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_createTemplate_result {
  static $_TSPEC;

  /**
   * @var \OperationTemplate
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \PreconditionException
   */
  public $validError = null;
  /**
   * @var \IbankServerException
   */
  public $error = null;
  /**
   * если defaultSourceContract не принадлежит пользователю
   * access_forbidden
   * 
   * 
   * @var \BackendValidationException
   */
  public $forbidden = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\OperationTemplate',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'validError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        3 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        4 => array(
          'var' => 'forbidden',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        5 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['validError'])) {
        $this->validError = $vals['validError'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['forbidden'])) {
        $this->forbidden = $vals['forbidden'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_createTemplate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \OperationTemplate();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->validError = new \PreconditionException();
            $xfer += $this->validError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->error = new \IbankServerException();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->forbidden = new \BackendValidationException();
            $xfer += $this->forbidden->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_createTemplate_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validError !== null) {
      $xfer += $output->writeFieldBegin('validError', TType::STRUCT, 2);
      $xfer += $this->validError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 3);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forbidden !== null) {
      $xfer += $output->writeFieldBegin('forbidden', TType::STRUCT, 4);
      $xfer += $this->forbidden->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 5);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_createTemplateFromOperation_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * настройки шаблона (имя, иконка, рекомендуемые суммы и т.п.)
   * 
   * @var \OperationTemplateProperties
   */
  public $templateProperties = null;
  /**
   * операция, реквизиты которой будут использованы при создании шаблона
   * 
   * @var string
   */
  public $operationId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'templateProperties',
          'type' => TType::STRUCT,
          'class' => '\OperationTemplateProperties',
          ),
        3 => array(
          'var' => 'operationId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['templateProperties'])) {
        $this->templateProperties = $vals['templateProperties'];
      }
      if (isset($vals['operationId'])) {
        $this->operationId = $vals['operationId'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_createTemplateFromOperation_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->templateProperties = new \OperationTemplateProperties();
            $xfer += $this->templateProperties->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->operationId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_createTemplateFromOperation_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->templateProperties !== null) {
      if (!is_object($this->templateProperties)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('templateProperties', TType::STRUCT, 2);
      $xfer += $this->templateProperties->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operationId !== null) {
      $xfer += $output->writeFieldBegin('operationId', TType::STRING, 3);
      $xfer += $output->writeString($this->operationId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_createTemplateFromOperation_result {
  static $_TSPEC;

  /**
   * @var \OperationTemplate
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \PreconditionException
   */
  public $validError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \IbankServerException
   */
  public $error = null;
  /**
   * если defaultSourceContract не принадлежит пользователю
   * access_forbidden
   * 
   * 
   * @var \BackendValidationException
   */
  public $forbidden = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\OperationTemplate',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'validError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        3 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        4 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        5 => array(
          'var' => 'forbidden',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        6 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['validError'])) {
        $this->validError = $vals['validError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['forbidden'])) {
        $this->forbidden = $vals['forbidden'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_createTemplateFromOperation_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \OperationTemplate();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->validError = new \PreconditionException();
            $xfer += $this->validError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->error = new \IbankServerException();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->forbidden = new \BackendValidationException();
            $xfer += $this->forbidden->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_createTemplateFromOperation_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validError !== null) {
      $xfer += $output->writeFieldBegin('validError', TType::STRUCT, 2);
      $xfer += $this->validError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 3);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 4);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forbidden !== null) {
      $xfer += $output->writeFieldBegin('forbidden', TType::STRUCT, 5);
      $xfer += $this->forbidden->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 6);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_findTemplateById_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * id шаблона
   * 
   * @var string
   */
  public $templateId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'templateId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['templateId'])) {
        $this->templateId = $vals['templateId'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_findTemplateById_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->templateId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_findTemplateById_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->templateId !== null) {
      $xfer += $output->writeFieldBegin('templateId', TType::STRING, 2);
      $xfer += $output->writeString($this->templateId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_findTemplateById_result {
  static $_TSPEC;

  /**
   * @var \OperationTemplate
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * если такой шаблон не найден у клиента (но этой ошибки нет, если шаблон "удален"!)
   * 
   * @var \PreconditionException
   */
  public $validError = null;
  /**
   * @var \IbankServerException
   */
  public $error = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\OperationTemplate',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'validError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        3 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        4 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['validError'])) {
        $this->validError = $vals['validError'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_findTemplateById_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \OperationTemplate();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->validError = new \PreconditionException();
            $xfer += $this->validError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->error = new \IbankServerException();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_findTemplateById_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validError !== null) {
      $xfer += $output->writeFieldBegin('validError', TType::STRUCT, 2);
      $xfer += $this->validError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 3);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 4);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_approveTemplate_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * id шаблона
   * 
   * @var string
   */
  public $templateId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'templateId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['templateId'])) {
        $this->templateId = $vals['templateId'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_approveTemplate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->templateId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_approveTemplate_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->templateId !== null) {
      $xfer += $output->writeFieldBegin('templateId', TType::STRING, 2);
      $xfer += $output->writeString($this->templateId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_approveTemplate_result {
  static $_TSPEC;

  /**
   * @var \OperationTemplate
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * если шаблон уже подтвежден, удален или не найден у данного клиента
   * 
   * @var \PreconditionException
   */
  public $validError = null;
  /**
   * если операция запещена бизнес-правилами allow/deny
   * 
   * @var \OperationDeniedException
   */
  public $operationDenied = null;
  /**
   * если операцию вызвали без прохождения двуфакторной аутентификации requestAuthentication() -> authenticate()
   * 
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankServerException
   */
  public $error = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\OperationTemplate',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'validError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        3 => array(
          'var' => 'operationDenied',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        4 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        5 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['validError'])) {
        $this->validError = $vals['validError'];
      }
      if (isset($vals['operationDenied'])) {
        $this->operationDenied = $vals['operationDenied'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_approveTemplate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \OperationTemplate();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->validError = new \PreconditionException();
            $xfer += $this->validError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->operationDenied = new \OperationDeniedException();
            $xfer += $this->operationDenied->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->error = new \IbankServerException();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_approveTemplate_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validError !== null) {
      $xfer += $output->writeFieldBegin('validError', TType::STRUCT, 2);
      $xfer += $this->validError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operationDenied !== null) {
      $xfer += $output->writeFieldBegin('operationDenied', TType::STRUCT, 3);
      $xfer += $this->operationDenied->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 4);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 5);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 6);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_updateTemplate_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * id шаблона
   * 
   * @var string
   */
  public $templateId = null;
  /**
   * новые настройки шаблона (имя, иконка, рекомендуемые суммы и т.п.); ВНИМАНИЕ,
   * если будут переданы пустые поля (null или пустая строка), то и обновление
   * будет выполнено так, что эти поля у шаблона станут пустыми или будет выдана ошибка,
   * PreconditionException если поле обязательное (имя шаблона и валюта)
   * 
   * 
   * @var \OperationTemplateProperties
   */
  public $templateProperties = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'templateId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'templateProperties',
          'type' => TType::STRUCT,
          'class' => '\OperationTemplateProperties',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['templateId'])) {
        $this->templateId = $vals['templateId'];
      }
      if (isset($vals['templateProperties'])) {
        $this->templateProperties = $vals['templateProperties'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_updateTemplate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->templateId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->templateProperties = new \OperationTemplateProperties();
            $xfer += $this->templateProperties->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_updateTemplate_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->templateId !== null) {
      $xfer += $output->writeFieldBegin('templateId', TType::STRING, 2);
      $xfer += $output->writeString($this->templateId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->templateProperties !== null) {
      if (!is_object($this->templateProperties)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('templateProperties', TType::STRUCT, 3);
      $xfer += $this->templateProperties->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_updateTemplate_result {
  static $_TSPEC;

  /**
   * @var \OperationTemplate
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \PreconditionException
   */
  public $validError = null;
  /**
   * @var \IbankServerException
   */
  public $error = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\OperationTemplate',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'validError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        3 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        4 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['validError'])) {
        $this->validError = $vals['validError'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_updateTemplate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \OperationTemplate();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->validError = new \PreconditionException();
            $xfer += $this->validError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->error = new \IbankServerException();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_updateTemplate_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validError !== null) {
      $xfer += $output->writeFieldBegin('validError', TType::STRUCT, 2);
      $xfer += $this->validError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 3);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 4);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_deleteTemplate_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * id шаблона
   * 
   * @var string
   */
  public $templateId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'templateId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['templateId'])) {
        $this->templateId = $vals['templateId'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_deleteTemplate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->templateId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_deleteTemplate_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->templateId !== null) {
      $xfer += $output->writeFieldBegin('templateId', TType::STRING, 2);
      $xfer += $output->writeString($this->templateId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_deleteTemplate_result {
  static $_TSPEC;

  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * Если шаблон не найден ("template_not_found"), если уже является удаленным ("template_already_deleted")
   * 
   * @var \PreconditionException
   */
  public $validError = null;
  /**
   * @var \IbankServerException
   */
  public $error = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'validError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        3 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        4 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['validError'])) {
        $this->validError = $vals['validError'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_deleteTemplate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->validError = new \PreconditionException();
            $xfer += $this->validError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->error = new \IbankServerException();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_deleteTemplate_result');
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validError !== null) {
      $xfer += $output->writeFieldBegin('validError', TType::STRUCT, 2);
      $xfer += $this->validError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 3);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 4);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_lockCard_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * ID карточного договора
   * 
   * @var string
   */
  public $cardcontractId = null;
  /**
   * всегда строго 4 цифры, 8 "звездочек" и 4 цифры: "5574********0233"
   * 
   * @var string
   */
  public $cardNumberMask = null;
  /**
   * Аттрибуты для возмоности передать в интеграционный слой доп-параметры
   * 
   * @var \Attributes
   */
  public $attributes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cardcontractId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'cardNumberMask',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'attributes',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['cardcontractId'])) {
        $this->cardcontractId = $vals['cardcontractId'];
      }
      if (isset($vals['cardNumberMask'])) {
        $this->cardNumberMask = $vals['cardNumberMask'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_lockCard_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cardcontractId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cardNumberMask);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->attributes = new \Attributes();
            $xfer += $this->attributes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_lockCard_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardcontractId !== null) {
      $xfer += $output->writeFieldBegin('cardcontractId', TType::STRING, 2);
      $xfer += $output->writeString($this->cardcontractId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardNumberMask !== null) {
      $xfer += $output->writeFieldBegin('cardNumberMask', TType::STRING, 3);
      $xfer += $output->writeString($this->cardNumberMask);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_object($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::STRUCT, 4);
      $xfer += $this->attributes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_lockCard_result {
  static $_TSPEC;

  /**
   * @var \CommonOperation
   */
  public $success = null;
  /**
   * неверная, несуществующая или просроченная (session_expired) сессия
   * 
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * card_contract_not_found - если нет такого карт-договора
   * wrong_card_number_mask - неверный формат маски, отличный от паттерна: 4 цифры, 8 "звездочек" и 4 цифры: "5574********0233"
   * card_not_found - если нет такой карты у указанного договора
   * 
   * 
   * @var \PreconditionException
   */
  public $validError = null;
  /**
   * Если операция требует расширенную двуфакторную аутентификацию, а текущая сессия ей не обладает
   * 
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * Если операция не разрешена правилами *
   * 
   * @var \OperationDeniedException
   */
  public $operationDenied = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\CommonOperation',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'validError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        3 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        4 => array(
          'var' => 'operationDenied',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['validError'])) {
        $this->validError = $vals['validError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['operationDenied'])) {
        $this->operationDenied = $vals['operationDenied'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_lockCard_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \CommonOperation();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->validError = new \PreconditionException();
            $xfer += $this->validError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->operationDenied = new \OperationDeniedException();
            $xfer += $this->operationDenied->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_lockCard_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validError !== null) {
      $xfer += $output->writeFieldBegin('validError', TType::STRUCT, 2);
      $xfer += $this->validError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 3);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operationDenied !== null) {
      $xfer += $output->writeFieldBegin('operationDenied', TType::STRUCT, 4);
      $xfer += $this->operationDenied->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 6);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_unlockCard_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * ID карточного договора
   * 
   * @var string
   */
  public $cardcontractId = null;
  /**
   * всегда строго 4 цифры, 8 "звездочек" и 4 цифры: "5574********0233"
   * 
   * @var string
   */
  public $cardNumberMask = null;
  /**
   * Аттрибуты для возмоности передать в интеграционный слой доп-параметры
   * 
   * @var \Attributes
   */
  public $attributes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cardcontractId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'cardNumberMask',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'attributes',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['cardcontractId'])) {
        $this->cardcontractId = $vals['cardcontractId'];
      }
      if (isset($vals['cardNumberMask'])) {
        $this->cardNumberMask = $vals['cardNumberMask'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_unlockCard_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cardcontractId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cardNumberMask);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->attributes = new \Attributes();
            $xfer += $this->attributes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_unlockCard_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardcontractId !== null) {
      $xfer += $output->writeFieldBegin('cardcontractId', TType::STRING, 2);
      $xfer += $output->writeString($this->cardcontractId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardNumberMask !== null) {
      $xfer += $output->writeFieldBegin('cardNumberMask', TType::STRING, 3);
      $xfer += $output->writeString($this->cardNumberMask);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_object($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::STRUCT, 4);
      $xfer += $this->attributes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_unlockCard_result {
  static $_TSPEC;

  /**
   * @var \CommonOperation
   */
  public $success = null;
  /**
   * неверная, несуществующая или просроченная (session_expired) сессия
   * 
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * * card_contract_not_found - если нет такого карт-договора
   * * wrong_card_number_mask - неверный формат маски, отличный от паттерна: 4 цифры, 8 "звездочек" и 4 цифры: "5574********0233"
   * * card_not_found - если нет такой карты у указанного договора
   *  *
   * 
   * @var \PreconditionException
   */
  public $validError = null;
  /**
   * Если операция требует расширенную двуфакторную аутентификацию, а текущая сессия ей не обладает
   * 
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * Если операция не разрешена правилами *
   * 
   * @var \OperationDeniedException
   */
  public $operationDenied = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\CommonOperation',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'validError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        3 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        4 => array(
          'var' => 'operationDenied',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['validError'])) {
        $this->validError = $vals['validError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['operationDenied'])) {
        $this->operationDenied = $vals['operationDenied'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_unlockCard_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \CommonOperation();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->validError = new \PreconditionException();
            $xfer += $this->validError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->operationDenied = new \OperationDeniedException();
            $xfer += $this->operationDenied->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_unlockCard_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validError !== null) {
      $xfer += $output->writeFieldBegin('validError', TType::STRUCT, 2);
      $xfer += $this->validError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 3);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operationDenied !== null) {
      $xfer += $output->writeFieldBegin('operationDenied', TType::STRUCT, 4);
      $xfer += $this->operationDenied->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 6);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_changeLimit_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * ID карточного договора
   * 
   * @var \ContractReference
   */
  public $contract = null;
  /**
   * в случае если contract.type = CARD, всегда строго 4 цифры, 8 "звездочек" и 4 цифры: "5574********0233"
   * 
   * @var string
   */
  public $cardNumberMask = null;
  /**
   * устанавливаемый лимит
   * 
   * @var \Limit
   */
  public $limit = null;
  /**
   * Аттрибуты для возмоности передать в интеграционный слой доп-параметры
   * 
   * @var \Attributes
   */
  public $attributes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'contract',
          'type' => TType::STRUCT,
          'class' => '\ContractReference',
          ),
        3 => array(
          'var' => 'cardNumberMask',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'limit',
          'type' => TType::STRUCT,
          'class' => '\Limit',
          ),
        5 => array(
          'var' => 'attributes',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['contract'])) {
        $this->contract = $vals['contract'];
      }
      if (isset($vals['cardNumberMask'])) {
        $this->cardNumberMask = $vals['cardNumberMask'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_changeLimit_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->contract = new \ContractReference();
            $xfer += $this->contract->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cardNumberMask);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->limit = new \Limit();
            $xfer += $this->limit->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->attributes = new \Attributes();
            $xfer += $this->attributes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_changeLimit_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contract !== null) {
      if (!is_object($this->contract)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('contract', TType::STRUCT, 2);
      $xfer += $this->contract->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardNumberMask !== null) {
      $xfer += $output->writeFieldBegin('cardNumberMask', TType::STRING, 3);
      $xfer += $output->writeString($this->cardNumberMask);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      if (!is_object($this->limit)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('limit', TType::STRUCT, 4);
      $xfer += $this->limit->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_object($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::STRUCT, 5);
      $xfer += $this->attributes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_changeLimit_result {
  static $_TSPEC;

  /**
   * @var \CommonOperation
   */
  public $success = null;
  /**
   * неверная, несуществующая или просроченная (session_expired) сессия
   * 
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * contract_not_found - если нет такого договора
   * wrong_card_number_mask - неверный формат маски, отличный от паттерна: 4 цифры, 8 "звездочек" и 4 цифры: "5574********0233"
   * card_not_found - если нет такой карты у указанного договора
   * unsupported_contract_or_card - если текущий интеграционный слой не поддерживает операцию смена лимитов для этого типа договоров или поддерживает для CARD, но только с указанием cardNumberMask, которую не передали (обычно смена поддерживается только для CARD при наличии cardNumberMask)
   * unsupported_limit_type - если текущий интеграционный слой не позволяет менять лимиты этого типа
   * unsupported_limit_value - если значение недопустимо
   * 
   * 
   * @var \PreconditionException
   */
  public $validError = null;
  /**
   * Установка лимита может иметь большое разнообразие правил их установки, которые определяются настройками
   * систем в компани (банке). Чтобы эти ошибки отделять от обычных "технически-коммуникационных"
   * IbankServerException, интеграционный слой может использовать этот тип ошибки.
   * 
   * 
   * @var \BackendValidationException
   */
  public $backendError = null;
  /**
   * Если операция требует расширенную двуфакторную аутентификацию, а текущая сессия ей не обладает
   * 
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * Если операция не разрешена правилами *
   * 
   * @var \OperationDeniedException
   */
  public $operationDenied = null;
  /**
   * Все остальные "технологические" ошибки интеграционного слоя
   * 
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\CommonOperation',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'validError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        3 => array(
          'var' => 'backendError',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        4 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        5 => array(
          'var' => 'operationDenied',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        6 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        7 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['validError'])) {
        $this->validError = $vals['validError'];
      }
      if (isset($vals['backendError'])) {
        $this->backendError = $vals['backendError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['operationDenied'])) {
        $this->operationDenied = $vals['operationDenied'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_changeLimit_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \CommonOperation();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->validError = new \PreconditionException();
            $xfer += $this->validError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->backendError = new \BackendValidationException();
            $xfer += $this->backendError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->operationDenied = new \OperationDeniedException();
            $xfer += $this->operationDenied->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_changeLimit_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validError !== null) {
      $xfer += $output->writeFieldBegin('validError', TType::STRUCT, 2);
      $xfer += $this->validError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendError !== null) {
      $xfer += $output->writeFieldBegin('backendError', TType::STRUCT, 3);
      $xfer += $this->backendError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 4);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operationDenied !== null) {
      $xfer += $output->writeFieldBegin('operationDenied', TType::STRUCT, 5);
      $xfer += $this->operationDenied->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 6);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 7);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_changeLimits_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * ID of card contract
   * 
   * @var \ContractReference
   */
  public $contract = null;
  /**
   * Id of card, in case if IL do not have Id of card and contract.type = CARD, <br>
   * always strictly 4 digits, 8 "asterisks" and 4 digits: "5574********0233"
   * 
   * @var string
   */
  public $cardId = null;
  /**
   * list of limits to set
   * 
   * @var \Limit[]
   */
  public $limits = null;
  /**
   * Additional attributes to possible transport some additional info to IL
   * 
   * @var \Attributes
   */
  public $attributes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'contract',
          'type' => TType::STRUCT,
          'class' => '\ContractReference',
          ),
        3 => array(
          'var' => 'cardId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'limits',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Limit',
            ),
          ),
        99 => array(
          'var' => 'attributes',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['contract'])) {
        $this->contract = $vals['contract'];
      }
      if (isset($vals['cardId'])) {
        $this->cardId = $vals['cardId'];
      }
      if (isset($vals['limits'])) {
        $this->limits = $vals['limits'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_changeLimits_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->contract = new \ContractReference();
            $xfer += $this->contract->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cardId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->limits = array();
            $_size339 = 0;
            $_etype342 = 0;
            $xfer += $input->readListBegin($_etype342, $_size339);
            for ($_i343 = 0; $_i343 < $_size339; ++$_i343)
            {
              $elem344 = null;
              $elem344 = new \Limit();
              $xfer += $elem344->read($input);
              $this->limits []= $elem344;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 99:
          if ($ftype == TType::STRUCT) {
            $this->attributes = new \Attributes();
            $xfer += $this->attributes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_changeLimits_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contract !== null) {
      if (!is_object($this->contract)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('contract', TType::STRUCT, 2);
      $xfer += $this->contract->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardId !== null) {
      $xfer += $output->writeFieldBegin('cardId', TType::STRING, 3);
      $xfer += $output->writeString($this->cardId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limits !== null) {
      if (!is_array($this->limits)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('limits', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->limits));
        {
          foreach ($this->limits as $iter345)
          {
            $xfer += $iter345->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_object($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::STRUCT, 99);
      $xfer += $this->attributes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_changeLimits_result {
  static $_TSPEC;

  /**
   * @var \CommonOperation
   */
  public $success = null;
  /**
   * неверная, несуществующая или просроченная (session_expired) сессия
   * 
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * contract_not_found - если нет такого договора
   * wrong_card_number_mask - неверный формат маски, отличный от паттерна: 4 цифры, 8 "звездочек" и 4 цифры: "5574********0233"
   * card_not_found - если нет такой карты у указанного договора
   * unsupported_contract_or_card - если текущий интеграционный слой не поддерживает операцию смена лимитов для этого типа договоров или поддерживает для CARD, но только с указанием cardNumberMask, которую не передали (обычно смена поддерживается только для CARD при наличии cardNumberMask)
   * unsupported_limit_type - если текущий интеграционный слой не позволяет менять лимиты этого типа
   * unsupported_limit_value - если значение недопустимо
   * 
   * 
   * @var \ValidationException
   */
  public $validError = null;
  /**
   * Если операция требует расширенную двуфакторную аутентификацию, а текущая сессия ей не обладает
   * 
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * Если операция не разрешена правилами *
   * 
   * @var \OperationDeniedException
   */
  public $operationDenied = null;
  /**
   * Все остальные "технологические" ошибки интеграционного слоя
   * 
   * @var \IbankServerException
   */
  public $serverError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\CommonOperation',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'validError',
          'type' => TType::STRUCT,
          'class' => '\ValidationException',
          ),
        3 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        4 => array(
          'var' => 'operationDenied',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['validError'])) {
        $this->validError = $vals['validError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['operationDenied'])) {
        $this->operationDenied = $vals['operationDenied'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_changeLimits_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \CommonOperation();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->validError = new \ValidationException();
            $xfer += $this->validError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->operationDenied = new \OperationDeniedException();
            $xfer += $this->operationDenied->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_changeLimits_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validError !== null) {
      $xfer += $output->writeFieldBegin('validError', TType::STRUCT, 2);
      $xfer += $this->validError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 3);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operationDenied !== null) {
      $xfer += $output->writeFieldBegin('operationDenied', TType::STRUCT, 4);
      $xfer += $this->operationDenied->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_changeCardSettings_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * ID карточного договора
   * 
   * @var \ContractReference
   */
  public $contract = null;
  /**
   * всегда строго 4 цифры, 8 "звездочек" и 4 цифры: "5574********0233"
   * 
   * @var string
   */
  public $cardNumberMask = null;
  /**
   * настройки карты
   * 
   * @var \CardSettings
   */
  public $settings = null;
  /**
   * Аттрибуты для возмоности передать в интеграционный слой доп-параметры
   * 
   * @var \Attributes
   */
  public $attributes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'contract',
          'type' => TType::STRUCT,
          'class' => '\ContractReference',
          ),
        3 => array(
          'var' => 'cardNumberMask',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'settings',
          'type' => TType::STRUCT,
          'class' => '\CardSettings',
          ),
        5 => array(
          'var' => 'attributes',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['contract'])) {
        $this->contract = $vals['contract'];
      }
      if (isset($vals['cardNumberMask'])) {
        $this->cardNumberMask = $vals['cardNumberMask'];
      }
      if (isset($vals['settings'])) {
        $this->settings = $vals['settings'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_changeCardSettings_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->contract = new \ContractReference();
            $xfer += $this->contract->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cardNumberMask);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->settings = new \CardSettings();
            $xfer += $this->settings->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->attributes = new \Attributes();
            $xfer += $this->attributes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_changeCardSettings_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contract !== null) {
      if (!is_object($this->contract)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('contract', TType::STRUCT, 2);
      $xfer += $this->contract->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardNumberMask !== null) {
      $xfer += $output->writeFieldBegin('cardNumberMask', TType::STRING, 3);
      $xfer += $output->writeString($this->cardNumberMask);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->settings !== null) {
      if (!is_object($this->settings)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('settings', TType::STRUCT, 4);
      $xfer += $this->settings->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_object($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::STRUCT, 5);
      $xfer += $this->attributes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_changeCardSettings_result {
  static $_TSPEC;

  /**
   * @var \CommonOperation
   */
  public $success = null;
  /**
   * неверная, несуществующая или просроченная (session_expired) сессия
   * 
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * contract_not_found - если нет такого договора
   * not_card_contract - указанный контракт не карточный
   * wrong_card_number_mask - неверный формат маски, отличный от паттерна: 4 цифры, 8 "звездочек" и 4 цифры: "5574********0233"
   * card_not_found - если нет такой карты у указанного договора
   * 
   * 
   * @var \PreconditionException
   */
  public $validError = null;
  /**
   * Установка настроек карты может иметь большое разнообразие правил их установки, которые определяются настройками
   * систем в компани (банке). Чтобы эти ошибки отделять от обычных "технически-коммуникационных"
   * IbankServerException, интеграционный слой может использовать этот тип ошибки.
   * unsupported_contract_or_card - если текущий интеграционный слой не поддерживает операцию смена лимитов для этого типа договоров или поддерживает для CARD, но только с указанием cardNumberMask, которую не передали (обычно смена поддерживается только для CARD при наличии cardNumberMask)
   * unsupported_settings - если переданы неверные настройки
   * 
   * 
   * @var \BackendValidationException
   */
  public $backendError = null;
  /**
   * Если операция требует расширенную двуфакторную аутентификацию, а текущая сессия ей не обладает
   * 
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * Если операция не разрешена правилами *
   * 
   * @var \OperationDeniedException
   */
  public $operationDenied = null;
  /**
   * Все остальные "технологические" ошибки интеграционного слоя
   * 
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\CommonOperation',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'validError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        3 => array(
          'var' => 'backendError',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        4 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        5 => array(
          'var' => 'operationDenied',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        6 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        7 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['validError'])) {
        $this->validError = $vals['validError'];
      }
      if (isset($vals['backendError'])) {
        $this->backendError = $vals['backendError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['operationDenied'])) {
        $this->operationDenied = $vals['operationDenied'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_changeCardSettings_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \CommonOperation();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->validError = new \PreconditionException();
            $xfer += $this->validError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->backendError = new \BackendValidationException();
            $xfer += $this->backendError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->operationDenied = new \OperationDeniedException();
            $xfer += $this->operationDenied->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_changeCardSettings_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validError !== null) {
      $xfer += $output->writeFieldBegin('validError', TType::STRUCT, 2);
      $xfer += $this->validError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendError !== null) {
      $xfer += $output->writeFieldBegin('backendError', TType::STRUCT, 3);
      $xfer += $this->backendError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 4);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operationDenied !== null) {
      $xfer += $output->writeFieldBegin('operationDenied', TType::STRUCT, 5);
      $xfer += $this->operationDenied->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 6);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 7);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_changeDepositSettings_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * ID карточного договора
   * 
   * @var \ContractReference
   */
  public $contract = null;
  /**
   * настройки депозита
   * 
   * @var \DepositSettings
   */
  public $settings = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'contract',
          'type' => TType::STRUCT,
          'class' => '\ContractReference',
          ),
        3 => array(
          'var' => 'settings',
          'type' => TType::STRUCT,
          'class' => '\DepositSettings',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['contract'])) {
        $this->contract = $vals['contract'];
      }
      if (isset($vals['settings'])) {
        $this->settings = $vals['settings'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_changeDepositSettings_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->contract = new \ContractReference();
            $xfer += $this->contract->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->settings = new \DepositSettings();
            $xfer += $this->settings->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_changeDepositSettings_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contract !== null) {
      if (!is_object($this->contract)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('contract', TType::STRUCT, 2);
      $xfer += $this->contract->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->settings !== null) {
      if (!is_object($this->settings)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('settings', TType::STRUCT, 3);
      $xfer += $this->settings->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_changeDepositSettings_result {
  static $_TSPEC;

  /**
   * @var \CommonOperation
   */
  public $success = null;
  /**
   * неверная, несуществующая или просроченная (session_expired) сессия
   * 
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * contract_not_found - если нет такого договора
   * not_deposit_contract - указанный контракт не карточный
   * 
   * 
   * @var \PreconditionException
   */
  public $validError = null;
  /**
   * Установка настроек депозита может иметь большое разнообразие правил их установки,
   * которые определяются настройками систем в компани (банке).
   * Чтобы эти ошибки отделять от обычных "технически-коммуникационных"
   * IbankServerException, интеграционный слой может использовать этот тип ошибки.
   * unsupported_contract - если текущий интеграционный слой не поддерживает операцию смена лимитов для этого типа договоров или поддерживает для CARD, но только с указанием cardNumberMask, которую не передали (обычно смена поддерживается только для CARD при наличии cardNumberMask)
   * unsupported_settings - если переданы неверные настройки
   * 
   * 
   * @var \BackendValidationException
   */
  public $backendError = null;
  /**
   * Если операция требует расширенную двуфакторную аутентификацию, а текущая сессия ей не обладает
   * 
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * Если операция не разрешена правилами *
   * 
   * @var \OperationDeniedException
   */
  public $operationDenied = null;
  /**
   * Все остальные "технологические" ошибки интеграционного слоя
   * 
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\CommonOperation',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'validError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        3 => array(
          'var' => 'backendError',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        4 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        5 => array(
          'var' => 'operationDenied',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        6 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        7 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['validError'])) {
        $this->validError = $vals['validError'];
      }
      if (isset($vals['backendError'])) {
        $this->backendError = $vals['backendError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['operationDenied'])) {
        $this->operationDenied = $vals['operationDenied'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_changeDepositSettings_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \CommonOperation();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->validError = new \PreconditionException();
            $xfer += $this->validError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->backendError = new \BackendValidationException();
            $xfer += $this->backendError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->operationDenied = new \OperationDeniedException();
            $xfer += $this->operationDenied->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_changeDepositSettings_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validError !== null) {
      $xfer += $output->writeFieldBegin('validError', TType::STRUCT, 2);
      $xfer += $this->validError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendError !== null) {
      $xfer += $output->writeFieldBegin('backendError', TType::STRUCT, 3);
      $xfer += $this->backendError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 4);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operationDenied !== null) {
      $xfer += $output->writeFieldBegin('operationDenied', TType::STRUCT, 5);
      $xfer += $this->operationDenied->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 6);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 7);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_makeDeposit_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * Условия открываемого депозита
   * 
   * @var \DepositConditions
   */
  public $deposit = null;
  /**
   * Сумма открываемого депозита в валюте указанной в deposit (или если нет, по умолчанию валюта счета источника)
   * 
   * @var int
   */
  public $amountInCents = null;
  /**
   * Счет источник
   * 
   * @var \ContractReference
   */
  public $source = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'deposit',
          'type' => TType::STRUCT,
          'class' => '\DepositConditions',
          ),
        3 => array(
          'var' => 'amountInCents',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'source',
          'type' => TType::STRUCT,
          'class' => '\ContractReference',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['deposit'])) {
        $this->deposit = $vals['deposit'];
      }
      if (isset($vals['amountInCents'])) {
        $this->amountInCents = $vals['amountInCents'];
      }
      if (isset($vals['source'])) {
        $this->source = $vals['source'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_makeDeposit_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->deposit = new \DepositConditions();
            $xfer += $this->deposit->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->amountInCents);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->source = new \ContractReference();
            $xfer += $this->source->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_makeDeposit_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deposit !== null) {
      if (!is_object($this->deposit)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('deposit', TType::STRUCT, 2);
      $xfer += $this->deposit->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amountInCents !== null) {
      $xfer += $output->writeFieldBegin('amountInCents', TType::I64, 3);
      $xfer += $output->writeI64($this->amountInCents);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source !== null) {
      if (!is_object($this->source)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('source', TType::STRUCT, 4);
      $xfer += $this->source->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_makeDeposit_result {
  static $_TSPEC;

  /**
   * @var \FinancialOperation
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * wrong_product_id -- если идентификатор продукта не присутствует в справочнике, предоставляемом интеграционным слоем банка
   * wrong_source -- если счет источник не найден для данного клиента
   * wrong_source_type -- если тип исчтосника депозит или кредит (разрешить только карт-счета или текущие)
   * wrong_destination, wrong_destination_type -- то же самое, но для счета DepositConditions.destinationContract если он указан
   * wrong_start_date -- если дата раньше чем "сегодя"
   * 
   * 
   * @var \PreconditionException
   */
  public $validError = null;
  /**
   * @var \IbankServerException
   */
  public $error = null;
  /**
   * product_id_not_allowed -- если открытие такого продукта невозможно по каким-то причинам (возможно для этого типа пользователей и т.п.)
   * deposit_conditions_not_allowed -- если были переданы неверные с точки зрения банка условия продукта
   * wrong_condition_.... -- если интеграционный слой хочет уточнить какой атрибут неверный, возможна подстановка параметра (фиксированный набор ENUM в бизнес-логике), который н удовлетворил проверку в банке из списка имен аттрибутов, например wrong_condition_capitalization или wrong_condition_earlyWithdrawlAllowed
   * 
   * 
   * @var \BackendValidationException
   */
  public $backendError = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\FinancialOperation',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        3 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        4 => array(
          'var' => 'validError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        5 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'backendError',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        7 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['validError'])) {
        $this->validError = $vals['validError'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['backendError'])) {
        $this->backendError = $vals['backendError'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_makeDeposit_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \FinancialOperation();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->validError = new \PreconditionException();
            $xfer += $this->validError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->error = new \IbankServerException();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->backendError = new \BackendValidationException();
            $xfer += $this->backendError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_makeDeposit_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 2);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 3);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validError !== null) {
      $xfer += $output->writeFieldBegin('validError', TType::STRUCT, 4);
      $xfer += $this->validError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 5);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendError !== null) {
      $xfer += $output->writeFieldBegin('backendError', TType::STRUCT, 6);
      $xfer += $this->backendError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 7);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_enrollContractClosing_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * Contract which want to close
   * 
   * @var \ContractReference
   */
  public $contractToClose = null;
  /**
   * Contract for compensation can be at different cases as contract from which
   * contract to close will compensata and contract to which will.
   * 
   * @var \ContractReference
   */
  public $contracToCompensate = null;
  /**
   * Attributes to provide possibility to send additional data to IL
   * 
   * @var \Attributes
   */
  public $attributes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'contractToClose',
          'type' => TType::STRUCT,
          'class' => '\ContractReference',
          ),
        3 => array(
          'var' => 'contracToCompensate',
          'type' => TType::STRUCT,
          'class' => '\ContractReference',
          ),
        99 => array(
          'var' => 'attributes',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['contractToClose'])) {
        $this->contractToClose = $vals['contractToClose'];
      }
      if (isset($vals['contracToCompensate'])) {
        $this->contracToCompensate = $vals['contracToCompensate'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_enrollContractClosing_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->contractToClose = new \ContractReference();
            $xfer += $this->contractToClose->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->contracToCompensate = new \ContractReference();
            $xfer += $this->contracToCompensate->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 99:
          if ($ftype == TType::STRUCT) {
            $this->attributes = new \Attributes();
            $xfer += $this->attributes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_enrollContractClosing_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contractToClose !== null) {
      if (!is_object($this->contractToClose)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('contractToClose', TType::STRUCT, 2);
      $xfer += $this->contractToClose->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contracToCompensate !== null) {
      if (!is_object($this->contracToCompensate)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('contracToCompensate', TType::STRUCT, 3);
      $xfer += $this->contracToCompensate->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_object($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::STRUCT, 99);
      $xfer += $this->attributes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_enrollContractClosing_result {
  static $_TSPEC;

  /**
   * @var \FinancialOperation
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * Any validation issues: cards data, expiry date, contract reference, not existing card id, etc.
   * 
   * @var \ValidationException
   */
  public $validationError = null;
  /**
   * internal server error: should be reported to vendor and administrator
   * 
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * integration layer error: should be reported to administrator
   * 
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\FinancialOperation',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        3 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        4 => array(
          'var' => 'validationError',
          'type' => TType::STRUCT,
          'class' => '\ValidationException',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['validationError'])) {
        $this->validationError = $vals['validationError'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_enrollContractClosing_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \FinancialOperation();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->validationError = new \ValidationException();
            $xfer += $this->validationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_enrollContractClosing_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 2);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 3);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validationError !== null) {
      $xfer += $output->writeFieldBegin('validationError', TType::STRUCT, 4);
      $xfer += $this->validationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 6);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_commitContractClosing_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * operation ID of previousely enrolled transaction
   * 
   * @var string
   */
  public $enrolledOperationId = null;
  /**
   * Attributes to provide possibility to send additional data to IL
   * 
   * @var \Attributes
   */
  public $attributes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'enrolledOperationId',
          'type' => TType::STRING,
          ),
        99 => array(
          'var' => 'attributes',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['enrolledOperationId'])) {
        $this->enrolledOperationId = $vals['enrolledOperationId'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_commitContractClosing_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->enrolledOperationId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 99:
          if ($ftype == TType::STRUCT) {
            $this->attributes = new \Attributes();
            $xfer += $this->attributes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_commitContractClosing_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->enrolledOperationId !== null) {
      $xfer += $output->writeFieldBegin('enrolledOperationId', TType::STRING, 2);
      $xfer += $output->writeString($this->enrolledOperationId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_object($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::STRUCT, 99);
      $xfer += $this->attributes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_commitContractClosing_result {
  static $_TSPEC;

  /**
   * @var \FinancialOperation
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * Any validation issues
   * 
   * @var \ValidationException
   */
  public $validationError = null;
  /**
   * internal server error: should be reported to vendor and administrator
   * 
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * integration layer error: should be reported to administrator
   * 
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\FinancialOperation',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        3 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        4 => array(
          'var' => 'validationError',
          'type' => TType::STRUCT,
          'class' => '\ValidationException',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['validationError'])) {
        $this->validationError = $vals['validationError'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_commitContractClosing_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \FinancialOperation();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->validationError = new \ValidationException();
            $xfer += $this->validationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_commitContractClosing_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 2);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 3);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validationError !== null) {
      $xfer += $output->writeFieldBegin('validationError', TType::STRUCT, 4);
      $xfer += $this->validationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 6);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_enrollCustomOperation_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * Operation custom type and free set of values
   * 
   * @var \CustomOpeartionSubject
   */
  public $subject = null;
  /**
   * Optional source contract reference, e.g. for charging commission or as contract will be manipulated some other way specific for this type of operation
   * 
   * @var \ContractReference
   */
  public $sourceReference = null;
  /**
   * Optional amount of operation
   * 
   * @var int
   */
  public $amountInCents = null;
  /**
   * Currency of given optional amount. Optional if no amount given
   * 
   * @var string
   */
  public $currency = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'subject',
          'type' => TType::STRUCT,
          'class' => '\CustomOpeartionSubject',
          ),
        3 => array(
          'var' => 'sourceReference',
          'type' => TType::STRUCT,
          'class' => '\ContractReference',
          ),
        4 => array(
          'var' => 'amountInCents',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'currency',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['subject'])) {
        $this->subject = $vals['subject'];
      }
      if (isset($vals['sourceReference'])) {
        $this->sourceReference = $vals['sourceReference'];
      }
      if (isset($vals['amountInCents'])) {
        $this->amountInCents = $vals['amountInCents'];
      }
      if (isset($vals['currency'])) {
        $this->currency = $vals['currency'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_enrollCustomOperation_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->subject = new \CustomOpeartionSubject();
            $xfer += $this->subject->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->sourceReference = new \ContractReference();
            $xfer += $this->sourceReference->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->amountInCents);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->currency);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_enrollCustomOperation_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->subject !== null) {
      if (!is_object($this->subject)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('subject', TType::STRUCT, 2);
      $xfer += $this->subject->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sourceReference !== null) {
      if (!is_object($this->sourceReference)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('sourceReference', TType::STRUCT, 3);
      $xfer += $this->sourceReference->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amountInCents !== null) {
      $xfer += $output->writeFieldBegin('amountInCents', TType::I64, 4);
      $xfer += $output->writeI64($this->amountInCents);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currency !== null) {
      $xfer += $output->writeFieldBegin('currency', TType::STRING, 5);
      $xfer += $output->writeString($this->currency);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_enrollCustomOperation_result {
  static $_TSPEC;

  /**
   * @var \FinancialOperation
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * Any validation issues: cards data, expiry date, contract reference, not existing card id, etc.
   * 
   * @var \ValidationException
   */
  public $validationError = null;
  /**
   * internal server error: should be reported to vendor and administrator
   * 
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * integration layer error: should be reported to administrator
   * 
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\FinancialOperation',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        3 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        4 => array(
          'var' => 'validationError',
          'type' => TType::STRUCT,
          'class' => '\ValidationException',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['validationError'])) {
        $this->validationError = $vals['validationError'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_enrollCustomOperation_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \FinancialOperation();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->validationError = new \ValidationException();
            $xfer += $this->validationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_enrollCustomOperation_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 2);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 3);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validationError !== null) {
      $xfer += $output->writeFieldBegin('validationError', TType::STRUCT, 4);
      $xfer += $this->validationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 6);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_commmitCustomOperation_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * operation.id of previousely prefaced transaction
   * 
   * @var string
   */
  public $enrolledOperationId = null;
  /**
   * @var \Attributes
   */
  public $attributes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'enrolledOperationId',
          'type' => TType::STRING,
          ),
        99 => array(
          'var' => 'attributes',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['enrolledOperationId'])) {
        $this->enrolledOperationId = $vals['enrolledOperationId'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_commmitCustomOperation_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->enrolledOperationId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 99:
          if ($ftype == TType::STRUCT) {
            $this->attributes = new \Attributes();
            $xfer += $this->attributes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_commmitCustomOperation_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->enrolledOperationId !== null) {
      $xfer += $output->writeFieldBegin('enrolledOperationId', TType::STRING, 2);
      $xfer += $output->writeString($this->enrolledOperationId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_object($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::STRUCT, 99);
      $xfer += $this->attributes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_commmitCustomOperation_result {
  static $_TSPEC;

  /**
   * @var \FinancialOperation
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * Any validation issues: cards data, expiry date, contract reference, not existing card id, etc.
   * 
   * @var \ValidationException
   */
  public $validationError = null;
  /**
   * internal server error: should be reported to vendor and administrator
   * 
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * integration layer error: should be reported to administrator
   * 
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\FinancialOperation',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        3 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        4 => array(
          'var' => 'validationError',
          'type' => TType::STRUCT,
          'class' => '\ValidationException',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['validationError'])) {
        $this->validationError = $vals['validationError'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_commmitCustomOperation_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \FinancialOperation();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->validationError = new \ValidationException();
            $xfer += $this->validationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_commmitCustomOperation_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 2);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 3);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validationError !== null) {
      $xfer += $output->writeFieldBegin('validationError', TType::STRUCT, 4);
      $xfer += $this->validationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 6);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_setDefaultProduct_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var int
   */
  public $contractType = null;
  /**
   * @var string
   */
  public $contractId = null;
  /**
   * @var \Attributes
   */
  public $attributes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'contractType',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'contractId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'attributes',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['contractType'])) {
        $this->contractType = $vals['contractType'];
      }
      if (isset($vals['contractId'])) {
        $this->contractId = $vals['contractId'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_setDefaultProduct_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->contractType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contractId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->attributes = new \Attributes();
            $xfer += $this->attributes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_setDefaultProduct_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contractType !== null) {
      $xfer += $output->writeFieldBegin('contractType', TType::I32, 2);
      $xfer += $output->writeI32($this->contractType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contractId !== null) {
      $xfer += $output->writeFieldBegin('contractId', TType::STRING, 3);
      $xfer += $output->writeString($this->contractId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_object($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::STRUCT, 4);
      $xfer += $this->attributes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_setDefaultProduct_result {
  static $_TSPEC;

  /**
   * @var \WrongSessionException
   */
  public $wrongSessionException = null;
  /**
   * @var \ProductDoesNotSupportedException
   */
  public $productDoesNotSupportedException = null;
  /**
   * @var \WrongContractIdException
   */
  public $wrongContractIdException = null;
  /**
   * @var \IbankServerException
   */
  public $error = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \BackendValidationException
   */
  public $backendValidationException = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'wrongSessionException',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'productDoesNotSupportedException',
          'type' => TType::STRUCT,
          'class' => '\ProductDoesNotSupportedException',
          ),
        3 => array(
          'var' => 'wrongContractIdException',
          'type' => TType::STRUCT,
          'class' => '\WrongContractIdException',
          ),
        4 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        5 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        6 => array(
          'var' => 'backendValidationException',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        7 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['wrongSessionException'])) {
        $this->wrongSessionException = $vals['wrongSessionException'];
      }
      if (isset($vals['productDoesNotSupportedException'])) {
        $this->productDoesNotSupportedException = $vals['productDoesNotSupportedException'];
      }
      if (isset($vals['wrongContractIdException'])) {
        $this->wrongContractIdException = $vals['wrongContractIdException'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['backendValidationException'])) {
        $this->backendValidationException = $vals['backendValidationException'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_setDefaultProduct_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->wrongSessionException = new \WrongSessionException();
            $xfer += $this->wrongSessionException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->productDoesNotSupportedException = new \ProductDoesNotSupportedException();
            $xfer += $this->productDoesNotSupportedException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->wrongContractIdException = new \WrongContractIdException();
            $xfer += $this->wrongContractIdException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->error = new \IbankServerException();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->backendValidationException = new \BackendValidationException();
            $xfer += $this->backendValidationException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_setDefaultProduct_result');
    if ($this->wrongSessionException !== null) {
      $xfer += $output->writeFieldBegin('wrongSessionException', TType::STRUCT, 1);
      $xfer += $this->wrongSessionException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productDoesNotSupportedException !== null) {
      $xfer += $output->writeFieldBegin('productDoesNotSupportedException', TType::STRUCT, 2);
      $xfer += $this->productDoesNotSupportedException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wrongContractIdException !== null) {
      $xfer += $output->writeFieldBegin('wrongContractIdException', TType::STRUCT, 3);
      $xfer += $this->wrongContractIdException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 4);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 5);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendValidationException !== null) {
      $xfer += $output->writeFieldBegin('backendValidationException', TType::STRUCT, 6);
      $xfer += $this->backendValidationException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 7);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_fetchFinancialOperations_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var \OperationHistoryFilter
   */
  public $operationHistoryFilter = null;
  /**
   * @var int
   */
  public $dateFrom = null;
  /**
   * @var int
   */
  public $dateTo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'operationHistoryFilter',
          'type' => TType::STRUCT,
          'class' => '\OperationHistoryFilter',
          ),
        3 => array(
          'var' => 'dateFrom',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'dateTo',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['operationHistoryFilter'])) {
        $this->operationHistoryFilter = $vals['operationHistoryFilter'];
      }
      if (isset($vals['dateFrom'])) {
        $this->dateFrom = $vals['dateFrom'];
      }
      if (isset($vals['dateTo'])) {
        $this->dateTo = $vals['dateTo'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_fetchFinancialOperations_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->operationHistoryFilter = new \OperationHistoryFilter();
            $xfer += $this->operationHistoryFilter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dateFrom);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dateTo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_fetchFinancialOperations_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operationHistoryFilter !== null) {
      if (!is_object($this->operationHistoryFilter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('operationHistoryFilter', TType::STRUCT, 2);
      $xfer += $this->operationHistoryFilter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateFrom !== null) {
      $xfer += $output->writeFieldBegin('dateFrom', TType::I64, 3);
      $xfer += $output->writeI64($this->dateFrom);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateTo !== null) {
      $xfer += $output->writeFieldBegin('dateTo', TType::I64, 4);
      $xfer += $output->writeI64($this->dateTo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_fetchFinancialOperations_result {
  static $_TSPEC;

  /**
   * @var \FinancialOperation[]
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \PeriodIsLargeException
   */
  public $periodError = null;
  /**
   * @var \OperationDeniedException
   */
  public $denyOperstion = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\FinancialOperation',
            ),
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'periodError',
          'type' => TType::STRUCT,
          'class' => '\PeriodIsLargeException',
          ),
        3 => array(
          'var' => 'denyOperstion',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        4 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        5 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['periodError'])) {
        $this->periodError = $vals['periodError'];
      }
      if (isset($vals['denyOperstion'])) {
        $this->denyOperstion = $vals['denyOperstion'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_fetchFinancialOperations_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size346 = 0;
            $_etype349 = 0;
            $xfer += $input->readListBegin($_etype349, $_size346);
            for ($_i350 = 0; $_i350 < $_size346; ++$_i350)
            {
              $elem351 = null;
              $elem351 = new \FinancialOperation();
              $xfer += $elem351->read($input);
              $this->success []= $elem351;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->periodError = new \PeriodIsLargeException();
            $xfer += $this->periodError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->denyOperstion = new \OperationDeniedException();
            $xfer += $this->denyOperstion->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_fetchFinancialOperations_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter352)
          {
            $xfer += $iter352->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->periodError !== null) {
      $xfer += $output->writeFieldBegin('periodError', TType::STRUCT, 2);
      $xfer += $this->periodError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->denyOperstion !== null) {
      $xfer += $output->writeFieldBegin('denyOperstion', TType::STRUCT, 3);
      $xfer += $this->denyOperstion->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 4);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 5);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_fetchCommonOperations_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * Фильтр поиска по подстроке. Каждая операция может иметь свой набор данных,
   * включаемых в текст, по которому этот поиск происходит.
   * В любом случае туда попадает содержимое name, и description.
   * 
   * 
   * @var \OperationHistoryFilter
   */
  public $operationHistoryFilter = null;
  /**
   * Диапазон в который должен попадать период между датами created и processed у искомых операций.
   *  Если интервал между dateFrom и dateTo пересекается с интервалом между created и processed, то
   *  операция находится этим методом.
   * *
   * 
   * @var int
   */
  public $dateFrom = null;
  /**
   * @var int
   */
  public $dateTo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'operationHistoryFilter',
          'type' => TType::STRUCT,
          'class' => '\OperationHistoryFilter',
          ),
        3 => array(
          'var' => 'dateFrom',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'dateTo',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['operationHistoryFilter'])) {
        $this->operationHistoryFilter = $vals['operationHistoryFilter'];
      }
      if (isset($vals['dateFrom'])) {
        $this->dateFrom = $vals['dateFrom'];
      }
      if (isset($vals['dateTo'])) {
        $this->dateTo = $vals['dateTo'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_fetchCommonOperations_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->operationHistoryFilter = new \OperationHistoryFilter();
            $xfer += $this->operationHistoryFilter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dateFrom);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dateTo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_fetchCommonOperations_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operationHistoryFilter !== null) {
      if (!is_object($this->operationHistoryFilter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('operationHistoryFilter', TType::STRUCT, 2);
      $xfer += $this->operationHistoryFilter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateFrom !== null) {
      $xfer += $output->writeFieldBegin('dateFrom', TType::I64, 3);
      $xfer += $output->writeI64($this->dateFrom);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateTo !== null) {
      $xfer += $output->writeFieldBegin('dateTo', TType::I64, 4);
      $xfer += $output->writeI64($this->dateTo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_fetchCommonOperations_result {
  static $_TSPEC;

  /**
   * @var \CommonOperation[]
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \PeriodIsLargeException
   */
  public $periodError = null;
  /**
   * в случае если чтение данных контрактов не позволено текущей сессии (т.к. данные об операциях содержат ссылки на контракты клиента)
   * 
   * @var \OperationDeniedException
   */
  public $denyOperstion = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\CommonOperation',
            ),
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'periodError',
          'type' => TType::STRUCT,
          'class' => '\PeriodIsLargeException',
          ),
        3 => array(
          'var' => 'denyOperstion',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        4 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        5 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['periodError'])) {
        $this->periodError = $vals['periodError'];
      }
      if (isset($vals['denyOperstion'])) {
        $this->denyOperstion = $vals['denyOperstion'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_fetchCommonOperations_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size353 = 0;
            $_etype356 = 0;
            $xfer += $input->readListBegin($_etype356, $_size353);
            for ($_i357 = 0; $_i357 < $_size353; ++$_i357)
            {
              $elem358 = null;
              $elem358 = new \CommonOperation();
              $xfer += $elem358->read($input);
              $this->success []= $elem358;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->periodError = new \PeriodIsLargeException();
            $xfer += $this->periodError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->denyOperstion = new \OperationDeniedException();
            $xfer += $this->denyOperstion->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_fetchCommonOperations_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter359)
          {
            $xfer += $iter359->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->periodError !== null) {
      $xfer += $output->writeFieldBegin('periodError', TType::STRUCT, 2);
      $xfer += $this->periodError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->denyOperstion !== null) {
      $xfer += $output->writeFieldBegin('denyOperstion', TType::STRUCT, 3);
      $xfer += $this->denyOperstion->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 4);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 5);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_enrollCardToCardTransfer_args {
  static $_TSPEC;

  /**
   * Session auth token
   * 
   * @var string
   */
  public $token = null;
  /**
   * Source card as external card data or as internal card reference
   * 
   * @var \CardReference
   */
  public $senderCard = null;
  /**
   * Target card as external card data or as internal card reference
   * 
   * @var \CardReference
   */
  public $receiverCard = null;
  /**
   * Transfer amount in cents
   * 
   * @var int
   */
  public $amountInCents = null;
  /**
   * Transfer currency: in most cases the national local currency
   * 
   * @var string
   */
  public $currency = null;
  /**
   * Additional attributes for quick functional extending
   * 
   * @var \Attributes
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'senderCard',
          'type' => TType::STRUCT,
          'class' => '\CardReference',
          ),
        3 => array(
          'var' => 'receiverCard',
          'type' => TType::STRUCT,
          'class' => '\CardReference',
          ),
        4 => array(
          'var' => 'amountInCents',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'currency',
          'type' => TType::STRING,
          ),
        99 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['senderCard'])) {
        $this->senderCard = $vals['senderCard'];
      }
      if (isset($vals['receiverCard'])) {
        $this->receiverCard = $vals['receiverCard'];
      }
      if (isset($vals['amountInCents'])) {
        $this->amountInCents = $vals['amountInCents'];
      }
      if (isset($vals['currency'])) {
        $this->currency = $vals['currency'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_enrollCardToCardTransfer_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->senderCard = new \CardReference();
            $xfer += $this->senderCard->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->receiverCard = new \CardReference();
            $xfer += $this->receiverCard->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->amountInCents);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->currency);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 99:
          if ($ftype == TType::STRUCT) {
            $this->att = new \Attributes();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_enrollCardToCardTransfer_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->senderCard !== null) {
      if (!is_object($this->senderCard)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('senderCard', TType::STRUCT, 2);
      $xfer += $this->senderCard->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiverCard !== null) {
      if (!is_object($this->receiverCard)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('receiverCard', TType::STRUCT, 3);
      $xfer += $this->receiverCard->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amountInCents !== null) {
      $xfer += $output->writeFieldBegin('amountInCents', TType::I64, 4);
      $xfer += $output->writeI64($this->amountInCents);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currency !== null) {
      $xfer += $output->writeFieldBegin('currency', TType::STRING, 5);
      $xfer += $output->writeString($this->currency);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 99);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_enrollCardToCardTransfer_result {
  static $_TSPEC;

  /**
   * @var \FinancialOperation
   */
  public $success = null;
  /**
   * if session is wrong, expired, etc.
   * 
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * if session is correct but operation is denied for current user role or session type
   * 
   * @var \OperationDeniedException
   */
  public $deniedError = null;
  /**
   * if session is correct but operation requires extending the authentication level, use requestExtendedAuthentication()
   * 
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthError = null;
  /**
   * Any validation issues: cards data, expiry date, contract reference, not existing card id, etc.
   * 
   * @var \ValidationException
   */
  public $validationError = null;
  /**
   * internal server error: should be reported to vendor and administrator
   * 
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * integration layer error: should be reported to administrator
   * 
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\FinancialOperation',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'deniedError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        3 => array(
          'var' => 'extendedAuthError',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        4 => array(
          'var' => 'validationError',
          'type' => TType::STRUCT,
          'class' => '\ValidationException',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['deniedError'])) {
        $this->deniedError = $vals['deniedError'];
      }
      if (isset($vals['extendedAuthError'])) {
        $this->extendedAuthError = $vals['extendedAuthError'];
      }
      if (isset($vals['validationError'])) {
        $this->validationError = $vals['validationError'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_enrollCardToCardTransfer_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \FinancialOperation();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->deniedError = new \OperationDeniedException();
            $xfer += $this->deniedError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthError = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->validationError = new \ValidationException();
            $xfer += $this->validationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_enrollCardToCardTransfer_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedError !== null) {
      $xfer += $output->writeFieldBegin('deniedError', TType::STRUCT, 2);
      $xfer += $this->deniedError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthError !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthError', TType::STRUCT, 3);
      $xfer += $this->extendedAuthError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validationError !== null) {
      $xfer += $output->writeFieldBegin('validationError', TType::STRUCT, 4);
      $xfer += $this->validationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 6);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_commitCardToCardTransfer_args {
  static $_TSPEC;

  /**
   * Session auth token
   * 
   * @var string
   */
  public $token = null;
  /**
   * operation.id of previousely enrolled transaction
   * 
   * @var string
   */
  public $enrolledOperationId = null;
  /**
   * if operation.subject.subjectCardToCard.secure3DRequest.enrolled, paRes shoud be provided from term-url listener/handler
   * 
   * @var string
   */
  public $paRes = null;
  /**
   * if operation.subject.subjectCardToCard.secure3DRequest.enrolled, md shoud be provided from term-url listener/handler or just copied from operation.subject.subjectCardToCard.secure3DRequest.md
   * 
   * @var string
   */
  public $md = null;
  /**
   * if operation.subject.subjectCardToCard.otpRequired was true or previous commit threw the ValidationException("otp_required")
   * 
   * @var string
   */
  public $otp = null;
  /**
   * sender card secure code (CVV/CVC): required again for some implementation of card-to-card providers
   * 
   * @var string
   */
  public $secureCode = null;
  /**
   * additional attributes for quick functional extending
   * 
   * @var \Attributes
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'enrolledOperationId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'paRes',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'md',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'otp',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'secureCode',
          'type' => TType::STRING,
          ),
        99 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['enrolledOperationId'])) {
        $this->enrolledOperationId = $vals['enrolledOperationId'];
      }
      if (isset($vals['paRes'])) {
        $this->paRes = $vals['paRes'];
      }
      if (isset($vals['md'])) {
        $this->md = $vals['md'];
      }
      if (isset($vals['otp'])) {
        $this->otp = $vals['otp'];
      }
      if (isset($vals['secureCode'])) {
        $this->secureCode = $vals['secureCode'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_commitCardToCardTransfer_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->enrolledOperationId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->paRes);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->md);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->otp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->secureCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 99:
          if ($ftype == TType::STRUCT) {
            $this->att = new \Attributes();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_commitCardToCardTransfer_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->enrolledOperationId !== null) {
      $xfer += $output->writeFieldBegin('enrolledOperationId', TType::STRING, 2);
      $xfer += $output->writeString($this->enrolledOperationId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->paRes !== null) {
      $xfer += $output->writeFieldBegin('paRes', TType::STRING, 3);
      $xfer += $output->writeString($this->paRes);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->md !== null) {
      $xfer += $output->writeFieldBegin('md', TType::STRING, 4);
      $xfer += $output->writeString($this->md);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->otp !== null) {
      $xfer += $output->writeFieldBegin('otp', TType::STRING, 5);
      $xfer += $output->writeString($this->otp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->secureCode !== null) {
      $xfer += $output->writeFieldBegin('secureCode', TType::STRING, 6);
      $xfer += $output->writeString($this->secureCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 99);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_commitCardToCardTransfer_result {
  static $_TSPEC;

  /**
   * @var \FinancialOperation
   */
  public $success = null;
  /**
   * if session is wrong, expired, etc.
   * 
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * if session is correct but operation is denied for current user role or session type
   * 
   * @var \OperationDeniedException
   */
  public $deniedError = null;
  /**
   * if session is correct but operation requires extending the authentication level, use requestExtendedAuthentication()
   * 
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthError = null;
  /**
   * Any validation issues: especially "otp_required", "pares_required", "wrong_pares", "wrong_otp", etc.
   * 
   * @var \ValidationException
   */
  public $validationError = null;
  /**
   * internal server error: should be reported to vendor and administrator
   * 
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * integration layer error: should be reported to administrator
   * 
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\FinancialOperation',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'deniedError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        3 => array(
          'var' => 'extendedAuthError',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        4 => array(
          'var' => 'validationError',
          'type' => TType::STRUCT,
          'class' => '\ValidationException',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['deniedError'])) {
        $this->deniedError = $vals['deniedError'];
      }
      if (isset($vals['extendedAuthError'])) {
        $this->extendedAuthError = $vals['extendedAuthError'];
      }
      if (isset($vals['validationError'])) {
        $this->validationError = $vals['validationError'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_commitCardToCardTransfer_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \FinancialOperation();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->deniedError = new \OperationDeniedException();
            $xfer += $this->deniedError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthError = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->validationError = new \ValidationException();
            $xfer += $this->validationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_commitCardToCardTransfer_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedError !== null) {
      $xfer += $output->writeFieldBegin('deniedError', TType::STRUCT, 2);
      $xfer += $this->deniedError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthError !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthError', TType::STRUCT, 3);
      $xfer += $this->extendedAuthError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validationError !== null) {
      $xfer += $output->writeFieldBegin('validationError', TType::STRUCT, 4);
      $xfer += $this->validationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 6);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_enrollCardToContractTransfer_args {
  static $_TSPEC;

  /**
   * Session auth token
   * 
   * @var string
   */
  public $token = null;
  /**
   * Source card as external card data or as internal card reference
   * 
   * @var \CardReference
   */
  public $senderCard = null;
  /**
   * Target contract reference
   * 
   * @var \ContractReference
   */
  public $receiverContract = null;
  /**
   * Transfer amount in cents
   * 
   * @var int
   */
  public $amountInCents = null;
  /**
   * Transfer currency: in most cases the national local currency
   * 
   * @var string
   */
  public $currency = null;
  /**
   * Additional attributes for quick functional extending
   * 
   * @var \Attributes
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'senderCard',
          'type' => TType::STRUCT,
          'class' => '\CardReference',
          ),
        3 => array(
          'var' => 'receiverContract',
          'type' => TType::STRUCT,
          'class' => '\ContractReference',
          ),
        4 => array(
          'var' => 'amountInCents',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'currency',
          'type' => TType::STRING,
          ),
        99 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['senderCard'])) {
        $this->senderCard = $vals['senderCard'];
      }
      if (isset($vals['receiverContract'])) {
        $this->receiverContract = $vals['receiverContract'];
      }
      if (isset($vals['amountInCents'])) {
        $this->amountInCents = $vals['amountInCents'];
      }
      if (isset($vals['currency'])) {
        $this->currency = $vals['currency'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_enrollCardToContractTransfer_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->senderCard = new \CardReference();
            $xfer += $this->senderCard->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->receiverContract = new \ContractReference();
            $xfer += $this->receiverContract->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->amountInCents);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->currency);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 99:
          if ($ftype == TType::STRUCT) {
            $this->att = new \Attributes();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_enrollCardToContractTransfer_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->senderCard !== null) {
      if (!is_object($this->senderCard)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('senderCard', TType::STRUCT, 2);
      $xfer += $this->senderCard->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiverContract !== null) {
      if (!is_object($this->receiverContract)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('receiverContract', TType::STRUCT, 3);
      $xfer += $this->receiverContract->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amountInCents !== null) {
      $xfer += $output->writeFieldBegin('amountInCents', TType::I64, 4);
      $xfer += $output->writeI64($this->amountInCents);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currency !== null) {
      $xfer += $output->writeFieldBegin('currency', TType::STRING, 5);
      $xfer += $output->writeString($this->currency);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 99);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_enrollCardToContractTransfer_result {
  static $_TSPEC;

  /**
   * @var \FinancialOperation
   */
  public $success = null;
  /**
   * if session is wrong, expired, etc.
   * 
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * if session is correct but operation is denied for current user role or session type
   * 
   * @var \OperationDeniedException
   */
  public $deniedError = null;
  /**
   * if session is correct but operation requires extending the authentication level, use requestExtendedAuthentication()
   * 
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthError = null;
  /**
   * Any validation issues: cards data, expiry date, contract reference, not existing card id, etc.
   * 
   * @var \ValidationException
   */
  public $validationError = null;
  /**
   * internal server error: should be reported to vendor and administrator
   * 
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * integration layer error: should be reported to administrator
   * 
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\FinancialOperation',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'deniedError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        3 => array(
          'var' => 'extendedAuthError',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        4 => array(
          'var' => 'validationError',
          'type' => TType::STRUCT,
          'class' => '\ValidationException',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['deniedError'])) {
        $this->deniedError = $vals['deniedError'];
      }
      if (isset($vals['extendedAuthError'])) {
        $this->extendedAuthError = $vals['extendedAuthError'];
      }
      if (isset($vals['validationError'])) {
        $this->validationError = $vals['validationError'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_enrollCardToContractTransfer_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \FinancialOperation();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->deniedError = new \OperationDeniedException();
            $xfer += $this->deniedError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthError = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->validationError = new \ValidationException();
            $xfer += $this->validationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_enrollCardToContractTransfer_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedError !== null) {
      $xfer += $output->writeFieldBegin('deniedError', TType::STRUCT, 2);
      $xfer += $this->deniedError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthError !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthError', TType::STRUCT, 3);
      $xfer += $this->extendedAuthError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validationError !== null) {
      $xfer += $output->writeFieldBegin('validationError', TType::STRUCT, 4);
      $xfer += $this->validationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 6);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_commitCardToContractTransfer_args {
  static $_TSPEC;

  /**
   * Session auth token
   * 
   * @var string
   */
  public $token = null;
  /**
   * operation.id of previousely enrolled transaction
   * 
   * @var string
   */
  public $enrolledOperationId = null;
  /**
   * if operation.subject.subjectCardToCard.secure3DRequest.enrolled, paRes shoud be provided from term-url listener/handler
   * 
   * @var string
   */
  public $paRes = null;
  /**
   * if operation.subject.subjectCardToCard.secure3DRequest.enrolled, md shoud be provided from term-url listener/handler or just copied from operation.subject.subjectCardToCard.secure3DRequest.md
   * 
   * @var string
   */
  public $md = null;
  /**
   * if operation.subject.subjectCardToCard.otpRequired was true or previous commit threw the ValidationException("otp_required")
   * 
   * @var string
   */
  public $otp = null;
  /**
   * sender card secure code (CVV/CVC): required again for some implementation of card-to-card providers
   * 
   * @var string
   */
  public $secureCode = null;
  /**
   * additional attributes for quick functional extending
   * 
   * @var \Attributes
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'enrolledOperationId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'paRes',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'md',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'otp',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'secureCode',
          'type' => TType::STRING,
          ),
        99 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['enrolledOperationId'])) {
        $this->enrolledOperationId = $vals['enrolledOperationId'];
      }
      if (isset($vals['paRes'])) {
        $this->paRes = $vals['paRes'];
      }
      if (isset($vals['md'])) {
        $this->md = $vals['md'];
      }
      if (isset($vals['otp'])) {
        $this->otp = $vals['otp'];
      }
      if (isset($vals['secureCode'])) {
        $this->secureCode = $vals['secureCode'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_commitCardToContractTransfer_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->enrolledOperationId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->paRes);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->md);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->otp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->secureCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 99:
          if ($ftype == TType::STRUCT) {
            $this->att = new \Attributes();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_commitCardToContractTransfer_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->enrolledOperationId !== null) {
      $xfer += $output->writeFieldBegin('enrolledOperationId', TType::STRING, 2);
      $xfer += $output->writeString($this->enrolledOperationId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->paRes !== null) {
      $xfer += $output->writeFieldBegin('paRes', TType::STRING, 3);
      $xfer += $output->writeString($this->paRes);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->md !== null) {
      $xfer += $output->writeFieldBegin('md', TType::STRING, 4);
      $xfer += $output->writeString($this->md);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->otp !== null) {
      $xfer += $output->writeFieldBegin('otp', TType::STRING, 5);
      $xfer += $output->writeString($this->otp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->secureCode !== null) {
      $xfer += $output->writeFieldBegin('secureCode', TType::STRING, 6);
      $xfer += $output->writeString($this->secureCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 99);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperationsService_commitCardToContractTransfer_result {
  static $_TSPEC;

  /**
   * @var \FinancialOperation
   */
  public $success = null;
  /**
   * if session is wrong, expired, etc.
   * 
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * if session is correct but operation is denied for current user role or session type
   * 
   * @var \OperationDeniedException
   */
  public $deniedError = null;
  /**
   * if session is correct but operation requires extending the authentication level, use requestExtendedAuthentication()
   * 
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthError = null;
  /**
   * Any validation issues: especially "otp_required", "pares_required", "wrong_pares", "wrong_otp", etc.
   * 
   * @var \ValidationException
   */
  public $validationError = null;
  /**
   * internal server error: should be reported to vendor and administrator
   * 
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * integration layer error: should be reported to administrator
   * 
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\FinancialOperation',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'deniedError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        3 => array(
          'var' => 'extendedAuthError',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        4 => array(
          'var' => 'validationError',
          'type' => TType::STRUCT,
          'class' => '\ValidationException',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['deniedError'])) {
        $this->deniedError = $vals['deniedError'];
      }
      if (isset($vals['extendedAuthError'])) {
        $this->extendedAuthError = $vals['extendedAuthError'];
      }
      if (isset($vals['validationError'])) {
        $this->validationError = $vals['validationError'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'OperationsService_commitCardToContractTransfer_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \FinancialOperation();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->deniedError = new \OperationDeniedException();
            $xfer += $this->deniedError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthError = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->validationError = new \ValidationException();
            $xfer += $this->validationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperationsService_commitCardToContractTransfer_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedError !== null) {
      $xfer += $output->writeFieldBegin('deniedError', TType::STRUCT, 2);
      $xfer += $this->deniedError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthError !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthError', TType::STRUCT, 3);
      $xfer += $this->extendedAuthError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validationError !== null) {
      $xfer += $output->writeFieldBegin('validationError', TType::STRUCT, 4);
      $xfer += $this->validationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 6);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


