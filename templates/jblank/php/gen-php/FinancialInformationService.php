<?php
/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface FinancialInformationServiceIf {
  /**
   * Gets currency rate for given currency and provider.
   * 
   * 
   * @param string $token Optional, cause it depends on provider: it may allow or deny anonymous exchange rate request
   * 
   * @param string $currency UAH, EUR, USD, etc.
   * 
   * @param string $provider "bank", "central_bank" are pre-defined;  others allowed dpending on integration layer implementation (e.g. "bank_branch_kiev_123" for multy-branch financial institution
   * 
   * @param int $dateTime Date and time when requested rate was actual
   * 
   * @param \Attributes $attributes
   * @return \CurrencyExchangeRate Значение курса валюты. Валюта определяется запросом, эта структура определяет только его значение, а также уточняет в какой интервал времени оно было актуально.
   * 
   * @throws \WrongSessionException
   * @throws \UnsupportedCurrencyException
   * @throws \UnsupportedCurrencyProviderException
   * @throws \CurrencyRateDoesNotExistsException
   * @throws \IbankServerException
   * @throws \ExtendedAuthenticationRequired
   * @throws \BackendValidationException
   * @throws \IbankIntegrationLayerException
   */
  public function getCurrencyExchangeRate($token, $currency, $provider, $dateTime, \Attributes $attributes);
  /**
   * Allows to get set of rates for different currencies
   * 
   * 
   * @param string $token Optional, cause it depends on provider: it may allow or deny anonymous exchange rate request
   * 
   * @param string[] $currencies set of [UAH, EUR, USD], etc.
   * 
   * @param string $provider Values "bank", "central_bank" are pre-defined;  others allowed dpending on integration layer implementation (e.g. "bank_branch_kiev_123" for multy-branch financial institution
   * 
   * @param int $dateTime Date and time when requested rates were actual
   * 
   * @param \Attributes $attributes
   * @return \CurrencyExchangeRate[]
   * @throws \WrongSessionException
   * @throws \UnsupportedCurrencyException
   * @throws \UnsupportedCurrencyProviderException
   * @throws \CurrencyRateDoesNotExistsException
   * @throws \IbankServerException
   * @throws \ExtendedAuthenticationRequired
   * @throws \BackendValidationException
   * @throws \IbankIntegrationLayerException
   */
  public function getCurrencyExchangeRateList($token, array $currencies, $provider, $dateTime, \Attributes $attributes);
  /**
   * Финансовый отчет по расходам (по операциям Ibank). Позволяет получить диаграмму, где "ось X": время в днях, неделях, месяцах, "ось Y": колличество и общая сумма операций, разбитые по валютам, затем по тегам-категориям.
   * 		    
   * 
   * @param string $token отчет предоставляется в рамках сессии
   * 
   * @param int $dateFrom дата начала выборки по дате создания операции
   * 
   * @param int $dateTo дата конца выборки по дате создания операции
   * 
   * @param int $periodsType тип периода группировки по времени: поддерживается месяц, неделя, день и год (квартал выдаст PreconditionException)
   * 
   * @param string $parentCategoryTag определяет список (или правильнее сказать "скоп") категорий, по которым будет разбиваться отчет; может отсутсвовать, тогда результат не будет разбиваться на категории (внутри CategorizedReportItem будет пустой categories, а будут только totals)
   * 
   * @param string[] $customTags определяет список категорий, принадлежащих родительской, по которым будет разбиваться отчет; если есть этот параметр и нет parentCategoryTag, то ошибка, а если есть parentCategory, но нет customTags, то это эквивалентно, тому что customTags содержит все дочерние теги parentCategoryTag
   * 
   * @param \Attributes $attributes extension point
   * 
   * @return \FinancialFlowReport Отчет о финансовом потоке (cash flow, financial flow), предоставляет массив периодов, для каждого из которых есть отчет по периоду (см. FinancialFlowPeriod -- агрегированные данные (сумма, количество, пр.) может включать разбивку по категориям).
   * 
   * @throws \WrongSessionException просроченная или несуществующая сессия
   * 
   * @throws \PeriodIsLargeException период превышает допустимый (по умолчанию не более 6 месяцев)
   * 
   * @throws \PreconditionException логические ошибки параметров, в частности: несуществующие теги, теги не принадлежат одной родительской категории, не поддерживаемый тип периода (квартал)
   * 
   * @throws \OperationDeniedException срабатывает в случае если роль пользователя не позволяет ему выполнять операцию 'read_contracts_operation_history'
   * 
   * @throws \ExtendedAuthenticationRequired срабатывает в случае если операция 'read_contracts_operation_history' требует расширенной аутентификации
   * 
   * @throws \IbankServerException технические, коммуникационые ошибки
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function loadExpensesReport($token, $dateFrom, $dateTo, $periodsType, $parentCategoryTag, array $customTags, \Attributes $attributes);
  /**
   * Финансовый отчет по ДОХОДАМ (по операциям Ibank). Описание всех параметров, ошибок и самого метода полностью аналогично #loadExpensesReport.
   * 
   * @param string $token
   * @param int $dateFrom
   * @param int $dateTo
   * @param int $periodsType
   * @param string $parentCategoryTag
   * @param string[] $customTags
   * @param \Attributes $attributes
   * @return \FinancialFlowReport Отчет о финансовом потоке (cash flow, financial flow), предоставляет массив периодов, для каждого из которых есть отчет по периоду (см. FinancialFlowPeriod -- агрегированные данные (сумма, количество, пр.) может включать разбивку по категориям).
   * 
   * @throws \WrongSessionException
   * @throws \PeriodIsLargeException
   * @throws \PreconditionException
   * @throws \OperationDeniedException
   * @throws \ExtendedAuthenticationRequired
   * @throws \IbankServerException
   * @throws \IbankIntegrationLayerException
   */
  public function loadIncomeReport($token, $dateFrom, $dateTo, $periodsType, $parentCategoryTag, array $customTags, \Attributes $attributes);
  /**
   * Утилитарный метод для конвертации получаемого отчета по функциям loadExpensesReport или loadIncomeReport в бинарном формате (для скачивания в виде файла, экспорта или печати)
   * 
   * @param string $token
   * @param \FinancialFlowReport $report
   * @param \ReportOptions $options
   * @return \Base64BinaryData Binary data. Base64-encoded.
   * (http://en.wikipedia.org/wiki/Base64).
   * Has the content type, fileName and charset, describing the data for helping to represent on client side.
   * See MYME types (http://en.wikipedia.org/wiki/MIME_type)
   * 
   * @throws \WrongSessionException
   * @throws \PeriodIsLargeException
   * @throws \IbankServerException
   * @throws \IbankIntegrationLayerException
   */
  public function reportToBinaryData($token, \FinancialFlowReport $report, \ReportOptions $options);
  /**
   * * Повертає банк за його МФО (кодом)
   * * @param bankID - МФО (міжнародний код) банку
   *    *
   * 
   * @param string $bankId МФО (міжнародний код) банку
   * 
   * @return \Bank
   * @throws \IbankServerException
   * @throws \BankNotFoundException
   * @throws \IbankIntegrationLayerException
   */
  public function getBankById($bankId);
  /**
   * Повертає список банків за маскою по входженню
   * 
   * 
   * @param string $bankIdMask Логика поиска зависит от реализации интеграционного слоя с банком.
   * Рекомендуемая логика: по вхождению любой цифры из маски в любом месте ID банка.
   * Т.е. если ID банка "123456", то его можно найти по запросу "5" или "56" или "234" и т.п.
   * 
   * 
   * @return \Bank[]
   * @throws \IbankServerException
   * @throws \IbankIntegrationLayerException
   */
  public function getBankByIdMask($bankIdMask);
  /**
   * Поиск доступных для открытия в Интернет-банкинге депозитных продуктов.
   * Метод может использоваться и для расчетов калькуляторов или предоставления информации
   * вне сессии клиента Интернет-банкинга.
   * 
   * 
   * @param \DepositConditionsFilter $filter
   * @return \DepositConditions[]
   * @throws \PreconditionException При указании неверных параметров поиска
   * invalid_deposit_term_diapason -- если неверно указан диапазон (приводит к дням, см. DepositConditionsFilter.maxTerm)
   * invalid_currency -- неверно задана валюта (не трехбуквенный код, например "USD", а например "980" или "доллар")
   * invalid_deposit_conditions_filter -- в случае неверных значений других параметров
   * 
   * 
   * @throws \BackendValidationException Ошибка, переданная интеграционным слоем (банком), например если банк хочет сообщить, что такую валюту
   * он в принципе считает неверной (не поддерживает в ней депозиты)
   * 
   * 
   * @throws \IbankServerException Системные и технические ошибки (нет связи и т.п.)
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function fetchDepositConditions(\DepositConditionsFilter $filter);
}


class FinancialInformationServiceClient implements \FinancialInformationServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function getCurrencyExchangeRate($token, $currency, $provider, $dateTime, \Attributes $attributes)
  {
    $this->send_getCurrencyExchangeRate($token, $currency, $provider, $dateTime, $attributes);
    return $this->recv_getCurrencyExchangeRate();
  }

  public function send_getCurrencyExchangeRate($token, $currency, $provider, $dateTime, \Attributes $attributes)
  {
    $args = new \FinancialInformationService_getCurrencyExchangeRate_args();
    $args->token = $token;
    $args->currency = $currency;
    $args->provider = $provider;
    $args->dateTime = $dateTime;
    $args->attributes = $attributes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCurrencyExchangeRate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCurrencyExchangeRate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCurrencyExchangeRate()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\FinancialInformationService_getCurrencyExchangeRate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \FinancialInformationService_getCurrencyExchangeRate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->currencyError !== null) {
      throw $result->currencyError;
    }
    if ($result->providerError !== null) {
      throw $result->providerError;
    }
    if ($result->rateNotFoundError !== null) {
      throw $result->rateNotFoundError;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->backendException !== null) {
      throw $result->backendException;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("getCurrencyExchangeRate failed: unknown result");
  }

  public function getCurrencyExchangeRateList($token, array $currencies, $provider, $dateTime, \Attributes $attributes)
  {
    $this->send_getCurrencyExchangeRateList($token, $currencies, $provider, $dateTime, $attributes);
    return $this->recv_getCurrencyExchangeRateList();
  }

  public function send_getCurrencyExchangeRateList($token, array $currencies, $provider, $dateTime, \Attributes $attributes)
  {
    $args = new \FinancialInformationService_getCurrencyExchangeRateList_args();
    $args->token = $token;
    $args->currencies = $currencies;
    $args->provider = $provider;
    $args->dateTime = $dateTime;
    $args->attributes = $attributes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCurrencyExchangeRateList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCurrencyExchangeRateList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCurrencyExchangeRateList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\FinancialInformationService_getCurrencyExchangeRateList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \FinancialInformationService_getCurrencyExchangeRateList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->currencyError !== null) {
      throw $result->currencyError;
    }
    if ($result->providerError !== null) {
      throw $result->providerError;
    }
    if ($result->rateNotFoundError !== null) {
      throw $result->rateNotFoundError;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->backendException !== null) {
      throw $result->backendException;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("getCurrencyExchangeRateList failed: unknown result");
  }

  public function loadExpensesReport($token, $dateFrom, $dateTo, $periodsType, $parentCategoryTag, array $customTags, \Attributes $attributes)
  {
    $this->send_loadExpensesReport($token, $dateFrom, $dateTo, $periodsType, $parentCategoryTag, $customTags, $attributes);
    return $this->recv_loadExpensesReport();
  }

  public function send_loadExpensesReport($token, $dateFrom, $dateTo, $periodsType, $parentCategoryTag, array $customTags, \Attributes $attributes)
  {
    $args = new \FinancialInformationService_loadExpensesReport_args();
    $args->token = $token;
    $args->dateFrom = $dateFrom;
    $args->dateTo = $dateTo;
    $args->periodsType = $periodsType;
    $args->parentCategoryTag = $parentCategoryTag;
    $args->customTags = $customTags;
    $args->attributes = $attributes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'loadExpensesReport', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('loadExpensesReport', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_loadExpensesReport()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\FinancialInformationService_loadExpensesReport_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \FinancialInformationService_loadExpensesReport_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->periodError !== null) {
      throw $result->periodError;
    }
    if ($result->validError !== null) {
      throw $result->validError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("loadExpensesReport failed: unknown result");
  }

  public function loadIncomeReport($token, $dateFrom, $dateTo, $periodsType, $parentCategoryTag, array $customTags, \Attributes $attributes)
  {
    $this->send_loadIncomeReport($token, $dateFrom, $dateTo, $periodsType, $parentCategoryTag, $customTags, $attributes);
    return $this->recv_loadIncomeReport();
  }

  public function send_loadIncomeReport($token, $dateFrom, $dateTo, $periodsType, $parentCategoryTag, array $customTags, \Attributes $attributes)
  {
    $args = new \FinancialInformationService_loadIncomeReport_args();
    $args->token = $token;
    $args->dateFrom = $dateFrom;
    $args->dateTo = $dateTo;
    $args->periodsType = $periodsType;
    $args->parentCategoryTag = $parentCategoryTag;
    $args->customTags = $customTags;
    $args->attributes = $attributes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'loadIncomeReport', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('loadIncomeReport', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_loadIncomeReport()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\FinancialInformationService_loadIncomeReport_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \FinancialInformationService_loadIncomeReport_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->periodError !== null) {
      throw $result->periodError;
    }
    if ($result->validError !== null) {
      throw $result->validError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("loadIncomeReport failed: unknown result");
  }

  public function reportToBinaryData($token, \FinancialFlowReport $report, \ReportOptions $options)
  {
    $this->send_reportToBinaryData($token, $report, $options);
    return $this->recv_reportToBinaryData();
  }

  public function send_reportToBinaryData($token, \FinancialFlowReport $report, \ReportOptions $options)
  {
    $args = new \FinancialInformationService_reportToBinaryData_args();
    $args->token = $token;
    $args->report = $report;
    $args->options = $options;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'reportToBinaryData', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('reportToBinaryData', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_reportToBinaryData()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\FinancialInformationService_reportToBinaryData_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \FinancialInformationService_reportToBinaryData_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->periodError !== null) {
      throw $result->periodError;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("reportToBinaryData failed: unknown result");
  }

  public function getBankById($bankId)
  {
    $this->send_getBankById($bankId);
    return $this->recv_getBankById();
  }

  public function send_getBankById($bankId)
  {
    $args = new \FinancialInformationService_getBankById_args();
    $args->bankId = $bankId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getBankById', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getBankById', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getBankById()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\FinancialInformationService_getBankById_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \FinancialInformationService_getBankById_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->bankNotFoundError !== null) {
      throw $result->bankNotFoundError;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("getBankById failed: unknown result");
  }

  public function getBankByIdMask($bankIdMask)
  {
    $this->send_getBankByIdMask($bankIdMask);
    return $this->recv_getBankByIdMask();
  }

  public function send_getBankByIdMask($bankIdMask)
  {
    $args = new \FinancialInformationService_getBankByIdMask_args();
    $args->bankIdMask = $bankIdMask;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getBankByIdMask', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getBankByIdMask', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getBankByIdMask()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\FinancialInformationService_getBankByIdMask_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \FinancialInformationService_getBankByIdMask_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("getBankByIdMask failed: unknown result");
  }

  public function fetchDepositConditions(\DepositConditionsFilter $filter)
  {
    $this->send_fetchDepositConditions($filter);
    return $this->recv_fetchDepositConditions();
  }

  public function send_fetchDepositConditions(\DepositConditionsFilter $filter)
  {
    $args = new \FinancialInformationService_fetchDepositConditions_args();
    $args->filter = $filter;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'fetchDepositConditions', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('fetchDepositConditions', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_fetchDepositConditions()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\FinancialInformationService_fetchDepositConditions_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \FinancialInformationService_fetchDepositConditions_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->validError !== null) {
      throw $result->validError;
    }
    if ($result->backendError !== null) {
      throw $result->backendError;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("fetchDepositConditions failed: unknown result");
  }

}


// HELPER FUNCTIONS AND STRUCTURES

class FinancialInformationService_getCurrencyExchangeRate_args {
  static $_TSPEC;

  /**
   * Optional, cause it depends on provider: it may allow or deny anonymous exchange rate request
   * 
   * @var string
   */
  public $token = null;
  /**
   * UAH, EUR, USD, etc.
   * 
   * @var string
   */
  public $currency = null;
  /**
   * "bank", "central_bank" are pre-defined;  others allowed dpending on integration layer implementation (e.g. "bank_branch_kiev_123" for multy-branch financial institution
   * 
   * @var string
   */
  public $provider = null;
  /**
   * Date and time when requested rate was actual
   * 
   * @var int
   */
  public $dateTime = null;
  /**
   * @var \Attributes
   */
  public $attributes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'currency',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'provider',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'dateTime',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'attributes',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['currency'])) {
        $this->currency = $vals['currency'];
      }
      if (isset($vals['provider'])) {
        $this->provider = $vals['provider'];
      }
      if (isset($vals['dateTime'])) {
        $this->dateTime = $vals['dateTime'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
    }
  }

  public function getName() {
    return 'FinancialInformationService_getCurrencyExchangeRate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->currency);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->provider);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dateTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->attributes = new \Attributes();
            $xfer += $this->attributes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FinancialInformationService_getCurrencyExchangeRate_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currency !== null) {
      $xfer += $output->writeFieldBegin('currency', TType::STRING, 2);
      $xfer += $output->writeString($this->currency);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->provider !== null) {
      $xfer += $output->writeFieldBegin('provider', TType::STRING, 3);
      $xfer += $output->writeString($this->provider);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateTime !== null) {
      $xfer += $output->writeFieldBegin('dateTime', TType::I64, 4);
      $xfer += $output->writeI64($this->dateTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_object($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::STRUCT, 5);
      $xfer += $this->attributes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FinancialInformationService_getCurrencyExchangeRate_result {
  static $_TSPEC;

  /**
   * @var \CurrencyExchangeRate
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \UnsupportedCurrencyException
   */
  public $currencyError = null;
  /**
   * @var \UnsupportedCurrencyProviderException
   */
  public $providerError = null;
  /**
   * @var \CurrencyRateDoesNotExistsException
   */
  public $rateNotFoundError = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \BackendValidationException
   */
  public $backendException = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\CurrencyExchangeRate',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'currencyError',
          'type' => TType::STRUCT,
          'class' => '\UnsupportedCurrencyException',
          ),
        3 => array(
          'var' => 'providerError',
          'type' => TType::STRUCT,
          'class' => '\UnsupportedCurrencyProviderException',
          ),
        4 => array(
          'var' => 'rateNotFoundError',
          'type' => TType::STRUCT,
          'class' => '\CurrencyRateDoesNotExistsException',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        7 => array(
          'var' => 'backendException',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        8 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['currencyError'])) {
        $this->currencyError = $vals['currencyError'];
      }
      if (isset($vals['providerError'])) {
        $this->providerError = $vals['providerError'];
      }
      if (isset($vals['rateNotFoundError'])) {
        $this->rateNotFoundError = $vals['rateNotFoundError'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['backendException'])) {
        $this->backendException = $vals['backendException'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'FinancialInformationService_getCurrencyExchangeRate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \CurrencyExchangeRate();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->currencyError = new \UnsupportedCurrencyException();
            $xfer += $this->currencyError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->providerError = new \UnsupportedCurrencyProviderException();
            $xfer += $this->providerError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->rateNotFoundError = new \CurrencyRateDoesNotExistsException();
            $xfer += $this->rateNotFoundError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->backendException = new \BackendValidationException();
            $xfer += $this->backendException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FinancialInformationService_getCurrencyExchangeRate_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currencyError !== null) {
      $xfer += $output->writeFieldBegin('currencyError', TType::STRUCT, 2);
      $xfer += $this->currencyError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->providerError !== null) {
      $xfer += $output->writeFieldBegin('providerError', TType::STRUCT, 3);
      $xfer += $this->providerError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rateNotFoundError !== null) {
      $xfer += $output->writeFieldBegin('rateNotFoundError', TType::STRUCT, 4);
      $xfer += $this->rateNotFoundError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 6);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendException !== null) {
      $xfer += $output->writeFieldBegin('backendException', TType::STRUCT, 7);
      $xfer += $this->backendException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 8);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FinancialInformationService_getCurrencyExchangeRateList_args {
  static $_TSPEC;

  /**
   * Optional, cause it depends on provider: it may allow or deny anonymous exchange rate request
   * 
   * @var string
   */
  public $token = null;
  /**
   * set of [UAH, EUR, USD], etc.
   * 
   * @var string[]
   */
  public $currencies = null;
  /**
   * Values "bank", "central_bank" are pre-defined;  others allowed dpending on integration layer implementation (e.g. "bank_branch_kiev_123" for multy-branch financial institution
   * 
   * @var string
   */
  public $provider = null;
  /**
   * Date and time when requested rates were actual
   * 
   * @var int
   */
  public $dateTime = null;
  /**
   * @var \Attributes
   */
  public $attributes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'currencies',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'provider',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'dateTime',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'attributes',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['currencies'])) {
        $this->currencies = $vals['currencies'];
      }
      if (isset($vals['provider'])) {
        $this->provider = $vals['provider'];
      }
      if (isset($vals['dateTime'])) {
        $this->dateTime = $vals['dateTime'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
    }
  }

  public function getName() {
    return 'FinancialInformationService_getCurrencyExchangeRateList_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->currencies = array();
            $_size381 = 0;
            $_etype384 = 0;
            $xfer += $input->readListBegin($_etype384, $_size381);
            for ($_i385 = 0; $_i385 < $_size381; ++$_i385)
            {
              $elem386 = null;
              $xfer += $input->readString($elem386);
              $this->currencies []= $elem386;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->provider);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dateTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->attributes = new \Attributes();
            $xfer += $this->attributes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FinancialInformationService_getCurrencyExchangeRateList_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currencies !== null) {
      if (!is_array($this->currencies)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('currencies', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->currencies));
        {
          foreach ($this->currencies as $iter387)
          {
            $xfer += $output->writeString($iter387);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->provider !== null) {
      $xfer += $output->writeFieldBegin('provider', TType::STRING, 3);
      $xfer += $output->writeString($this->provider);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateTime !== null) {
      $xfer += $output->writeFieldBegin('dateTime', TType::I64, 4);
      $xfer += $output->writeI64($this->dateTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_object($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::STRUCT, 5);
      $xfer += $this->attributes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FinancialInformationService_getCurrencyExchangeRateList_result {
  static $_TSPEC;

  /**
   * @var \CurrencyExchangeRate[]
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \UnsupportedCurrencyException
   */
  public $currencyError = null;
  /**
   * @var \UnsupportedCurrencyProviderException
   */
  public $providerError = null;
  /**
   * @var \CurrencyRateDoesNotExistsException
   */
  public $rateNotFoundError = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \BackendValidationException
   */
  public $backendException = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\CurrencyExchangeRate',
            ),
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'currencyError',
          'type' => TType::STRUCT,
          'class' => '\UnsupportedCurrencyException',
          ),
        3 => array(
          'var' => 'providerError',
          'type' => TType::STRUCT,
          'class' => '\UnsupportedCurrencyProviderException',
          ),
        4 => array(
          'var' => 'rateNotFoundError',
          'type' => TType::STRUCT,
          'class' => '\CurrencyRateDoesNotExistsException',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        7 => array(
          'var' => 'backendException',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        8 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['currencyError'])) {
        $this->currencyError = $vals['currencyError'];
      }
      if (isset($vals['providerError'])) {
        $this->providerError = $vals['providerError'];
      }
      if (isset($vals['rateNotFoundError'])) {
        $this->rateNotFoundError = $vals['rateNotFoundError'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['backendException'])) {
        $this->backendException = $vals['backendException'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'FinancialInformationService_getCurrencyExchangeRateList_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size388 = 0;
            $_etype391 = 0;
            $xfer += $input->readListBegin($_etype391, $_size388);
            for ($_i392 = 0; $_i392 < $_size388; ++$_i392)
            {
              $elem393 = null;
              $elem393 = new \CurrencyExchangeRate();
              $xfer += $elem393->read($input);
              $this->success []= $elem393;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->currencyError = new \UnsupportedCurrencyException();
            $xfer += $this->currencyError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->providerError = new \UnsupportedCurrencyProviderException();
            $xfer += $this->providerError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->rateNotFoundError = new \CurrencyRateDoesNotExistsException();
            $xfer += $this->rateNotFoundError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->backendException = new \BackendValidationException();
            $xfer += $this->backendException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FinancialInformationService_getCurrencyExchangeRateList_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter394)
          {
            $xfer += $iter394->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currencyError !== null) {
      $xfer += $output->writeFieldBegin('currencyError', TType::STRUCT, 2);
      $xfer += $this->currencyError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->providerError !== null) {
      $xfer += $output->writeFieldBegin('providerError', TType::STRUCT, 3);
      $xfer += $this->providerError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rateNotFoundError !== null) {
      $xfer += $output->writeFieldBegin('rateNotFoundError', TType::STRUCT, 4);
      $xfer += $this->rateNotFoundError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 6);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendException !== null) {
      $xfer += $output->writeFieldBegin('backendException', TType::STRUCT, 7);
      $xfer += $this->backendException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 8);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FinancialInformationService_loadExpensesReport_args {
  static $_TSPEC;

  /**
   * отчет предоставляется в рамках сессии
   * 
   * @var string
   */
  public $token = null;
  /**
   * дата начала выборки по дате создания операции
   * 
   * @var int
   */
  public $dateFrom = null;
  /**
   * дата конца выборки по дате создания операции
   * 
   * @var int
   */
  public $dateTo = null;
  /**
   * тип периода группировки по времени: поддерживается месяц, неделя, день и год (квартал выдаст PreconditionException)
   * 
   * @var int
   */
  public $periodsType = null;
  /**
   * определяет список (или правильнее сказать "скоп") категорий, по которым будет разбиваться отчет; может отсутсвовать, тогда результат не будет разбиваться на категории (внутри CategorizedReportItem будет пустой categories, а будут только totals)
   * 
   * @var string
   */
  public $parentCategoryTag = null;
  /**
   * определяет список категорий, принадлежащих родительской, по которым будет разбиваться отчет; если есть этот параметр и нет parentCategoryTag, то ошибка, а если есть parentCategory, но нет customTags, то это эквивалентно, тому что customTags содержит все дочерние теги parentCategoryTag
   * 
   * @var string[]
   */
  public $customTags = null;
  /**
   * extension point
   * 
   * @var \Attributes
   */
  public $attributes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'dateFrom',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'dateTo',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'periodsType',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'parentCategoryTag',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'customTags',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        7 => array(
          'var' => 'attributes',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['dateFrom'])) {
        $this->dateFrom = $vals['dateFrom'];
      }
      if (isset($vals['dateTo'])) {
        $this->dateTo = $vals['dateTo'];
      }
      if (isset($vals['periodsType'])) {
        $this->periodsType = $vals['periodsType'];
      }
      if (isset($vals['parentCategoryTag'])) {
        $this->parentCategoryTag = $vals['parentCategoryTag'];
      }
      if (isset($vals['customTags'])) {
        $this->customTags = $vals['customTags'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
    }
  }

  public function getName() {
    return 'FinancialInformationService_loadExpensesReport_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dateFrom);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dateTo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->periodsType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parentCategoryTag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->customTags = array();
            $_size395 = 0;
            $_etype398 = 0;
            $xfer += $input->readListBegin($_etype398, $_size395);
            for ($_i399 = 0; $_i399 < $_size395; ++$_i399)
            {
              $elem400 = null;
              $xfer += $input->readString($elem400);
              $this->customTags []= $elem400;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->attributes = new \Attributes();
            $xfer += $this->attributes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FinancialInformationService_loadExpensesReport_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateFrom !== null) {
      $xfer += $output->writeFieldBegin('dateFrom', TType::I64, 2);
      $xfer += $output->writeI64($this->dateFrom);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateTo !== null) {
      $xfer += $output->writeFieldBegin('dateTo', TType::I64, 3);
      $xfer += $output->writeI64($this->dateTo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->periodsType !== null) {
      $xfer += $output->writeFieldBegin('periodsType', TType::I32, 4);
      $xfer += $output->writeI32($this->periodsType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parentCategoryTag !== null) {
      $xfer += $output->writeFieldBegin('parentCategoryTag', TType::STRING, 5);
      $xfer += $output->writeString($this->parentCategoryTag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->customTags !== null) {
      if (!is_array($this->customTags)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('customTags', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRING, count($this->customTags));
        {
          foreach ($this->customTags as $iter401)
          {
            $xfer += $output->writeString($iter401);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_object($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::STRUCT, 7);
      $xfer += $this->attributes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FinancialInformationService_loadExpensesReport_result {
  static $_TSPEC;

  /**
   * @var \FinancialFlowReport
   */
  public $success = null;
  /**
   * просроченная или несуществующая сессия
   * 
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * период превышает допустимый (по умолчанию не более 6 месяцев)
   * 
   * @var \PeriodIsLargeException
   */
  public $periodError = null;
  /**
   * логические ошибки параметров, в частности: несуществующие теги, теги не принадлежат одной родительской категории, не поддерживаемый тип периода (квартал)
   * 
   * @var \PreconditionException
   */
  public $validError = null;
  /**
   * срабатывает в случае если роль пользователя не позволяет ему выполнять операцию 'read_contracts_operation_history'
   * 
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * срабатывает в случае если операция 'read_contracts_operation_history' требует расширенной аутентификации
   * 
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * технические, коммуникационые ошибки
   * 
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\FinancialFlowReport',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'periodError',
          'type' => TType::STRUCT,
          'class' => '\PeriodIsLargeException',
          ),
        3 => array(
          'var' => 'validError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        4 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        5 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        6 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        7 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['periodError'])) {
        $this->periodError = $vals['periodError'];
      }
      if (isset($vals['validError'])) {
        $this->validError = $vals['validError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'FinancialInformationService_loadExpensesReport_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \FinancialFlowReport();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->periodError = new \PeriodIsLargeException();
            $xfer += $this->periodError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->validError = new \PreconditionException();
            $xfer += $this->validError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FinancialInformationService_loadExpensesReport_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->periodError !== null) {
      $xfer += $output->writeFieldBegin('periodError', TType::STRUCT, 2);
      $xfer += $this->periodError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validError !== null) {
      $xfer += $output->writeFieldBegin('validError', TType::STRUCT, 3);
      $xfer += $this->validError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 4);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 5);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 6);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 7);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FinancialInformationService_loadIncomeReport_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var int
   */
  public $dateFrom = null;
  /**
   * @var int
   */
  public $dateTo = null;
  /**
   * @var int
   */
  public $periodsType = null;
  /**
   * @var string
   */
  public $parentCategoryTag = null;
  /**
   * @var string[]
   */
  public $customTags = null;
  /**
   * @var \Attributes
   */
  public $attributes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'dateFrom',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'dateTo',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'periodsType',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'parentCategoryTag',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'customTags',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        7 => array(
          'var' => 'attributes',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['dateFrom'])) {
        $this->dateFrom = $vals['dateFrom'];
      }
      if (isset($vals['dateTo'])) {
        $this->dateTo = $vals['dateTo'];
      }
      if (isset($vals['periodsType'])) {
        $this->periodsType = $vals['periodsType'];
      }
      if (isset($vals['parentCategoryTag'])) {
        $this->parentCategoryTag = $vals['parentCategoryTag'];
      }
      if (isset($vals['customTags'])) {
        $this->customTags = $vals['customTags'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
    }
  }

  public function getName() {
    return 'FinancialInformationService_loadIncomeReport_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dateFrom);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dateTo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->periodsType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parentCategoryTag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->customTags = array();
            $_size402 = 0;
            $_etype405 = 0;
            $xfer += $input->readListBegin($_etype405, $_size402);
            for ($_i406 = 0; $_i406 < $_size402; ++$_i406)
            {
              $elem407 = null;
              $xfer += $input->readString($elem407);
              $this->customTags []= $elem407;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->attributes = new \Attributes();
            $xfer += $this->attributes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FinancialInformationService_loadIncomeReport_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateFrom !== null) {
      $xfer += $output->writeFieldBegin('dateFrom', TType::I64, 2);
      $xfer += $output->writeI64($this->dateFrom);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateTo !== null) {
      $xfer += $output->writeFieldBegin('dateTo', TType::I64, 3);
      $xfer += $output->writeI64($this->dateTo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->periodsType !== null) {
      $xfer += $output->writeFieldBegin('periodsType', TType::I32, 4);
      $xfer += $output->writeI32($this->periodsType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parentCategoryTag !== null) {
      $xfer += $output->writeFieldBegin('parentCategoryTag', TType::STRING, 5);
      $xfer += $output->writeString($this->parentCategoryTag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->customTags !== null) {
      if (!is_array($this->customTags)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('customTags', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRING, count($this->customTags));
        {
          foreach ($this->customTags as $iter408)
          {
            $xfer += $output->writeString($iter408);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_object($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::STRUCT, 7);
      $xfer += $this->attributes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FinancialInformationService_loadIncomeReport_result {
  static $_TSPEC;

  /**
   * @var \FinancialFlowReport
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \PeriodIsLargeException
   */
  public $periodError = null;
  /**
   * @var \PreconditionException
   */
  public $validError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\FinancialFlowReport',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'periodError',
          'type' => TType::STRUCT,
          'class' => '\PeriodIsLargeException',
          ),
        3 => array(
          'var' => 'validError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        4 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        5 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        6 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        7 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['periodError'])) {
        $this->periodError = $vals['periodError'];
      }
      if (isset($vals['validError'])) {
        $this->validError = $vals['validError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'FinancialInformationService_loadIncomeReport_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \FinancialFlowReport();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->periodError = new \PeriodIsLargeException();
            $xfer += $this->periodError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->validError = new \PreconditionException();
            $xfer += $this->validError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FinancialInformationService_loadIncomeReport_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->periodError !== null) {
      $xfer += $output->writeFieldBegin('periodError', TType::STRUCT, 2);
      $xfer += $this->periodError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validError !== null) {
      $xfer += $output->writeFieldBegin('validError', TType::STRUCT, 3);
      $xfer += $this->validError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 4);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 5);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 6);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 7);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FinancialInformationService_reportToBinaryData_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var \FinancialFlowReport
   */
  public $report = null;
  /**
   * @var \ReportOptions
   */
  public $options = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'report',
          'type' => TType::STRUCT,
          'class' => '\FinancialFlowReport',
          ),
        3 => array(
          'var' => 'options',
          'type' => TType::STRUCT,
          'class' => '\ReportOptions',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['report'])) {
        $this->report = $vals['report'];
      }
      if (isset($vals['options'])) {
        $this->options = $vals['options'];
      }
    }
  }

  public function getName() {
    return 'FinancialInformationService_reportToBinaryData_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->report = new \FinancialFlowReport();
            $xfer += $this->report->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->options = new \ReportOptions();
            $xfer += $this->options->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FinancialInformationService_reportToBinaryData_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->report !== null) {
      if (!is_object($this->report)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('report', TType::STRUCT, 2);
      $xfer += $this->report->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->options !== null) {
      if (!is_object($this->options)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('options', TType::STRUCT, 3);
      $xfer += $this->options->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FinancialInformationService_reportToBinaryData_result {
  static $_TSPEC;

  /**
   * @var \Base64BinaryData
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \PeriodIsLargeException
   */
  public $periodError = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Base64BinaryData',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'periodError',
          'type' => TType::STRUCT,
          'class' => '\PeriodIsLargeException',
          ),
        3 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        4 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['periodError'])) {
        $this->periodError = $vals['periodError'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'FinancialInformationService_reportToBinaryData_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Base64BinaryData();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->periodError = new \PeriodIsLargeException();
            $xfer += $this->periodError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FinancialInformationService_reportToBinaryData_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->periodError !== null) {
      $xfer += $output->writeFieldBegin('periodError', TType::STRUCT, 2);
      $xfer += $this->periodError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 3);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 4);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FinancialInformationService_getBankById_args {
  static $_TSPEC;

  /**
   * МФО (міжнародний код) банку
   * 
   * @var string
   */
  public $bankId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'bankId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['bankId'])) {
        $this->bankId = $vals['bankId'];
      }
    }
  }

  public function getName() {
    return 'FinancialInformationService_getBankById_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->bankId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FinancialInformationService_getBankById_args');
    if ($this->bankId !== null) {
      $xfer += $output->writeFieldBegin('bankId', TType::STRING, 1);
      $xfer += $output->writeString($this->bankId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FinancialInformationService_getBankById_result {
  static $_TSPEC;

  /**
   * @var \Bank
   */
  public $success = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * @var \BankNotFoundException
   */
  public $bankNotFoundError = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Bank',
          ),
        1 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        2 => array(
          'var' => 'bankNotFoundError',
          'type' => TType::STRUCT,
          'class' => '\BankNotFoundException',
          ),
        3 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['bankNotFoundError'])) {
        $this->bankNotFoundError = $vals['bankNotFoundError'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'FinancialInformationService_getBankById_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Bank();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->bankNotFoundError = new \BankNotFoundException();
            $xfer += $this->bankNotFoundError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FinancialInformationService_getBankById_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 1);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bankNotFoundError !== null) {
      $xfer += $output->writeFieldBegin('bankNotFoundError', TType::STRUCT, 2);
      $xfer += $this->bankNotFoundError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 3);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FinancialInformationService_getBankByIdMask_args {
  static $_TSPEC;

  /**
   * Логика поиска зависит от реализации интеграционного слоя с банком.
   * Рекомендуемая логика: по вхождению любой цифры из маски в любом месте ID банка.
   * Т.е. если ID банка "123456", то его можно найти по запросу "5" или "56" или "234" и т.п.
   * 
   * 
   * @var string
   */
  public $bankIdMask = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'bankIdMask',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['bankIdMask'])) {
        $this->bankIdMask = $vals['bankIdMask'];
      }
    }
  }

  public function getName() {
    return 'FinancialInformationService_getBankByIdMask_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->bankIdMask);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FinancialInformationService_getBankByIdMask_args');
    if ($this->bankIdMask !== null) {
      $xfer += $output->writeFieldBegin('bankIdMask', TType::STRING, 1);
      $xfer += $output->writeString($this->bankIdMask);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FinancialInformationService_getBankByIdMask_result {
  static $_TSPEC;

  /**
   * @var \Bank[]
   */
  public $success = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Bank',
            ),
          ),
        1 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        2 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'FinancialInformationService_getBankByIdMask_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size409 = 0;
            $_etype412 = 0;
            $xfer += $input->readListBegin($_etype412, $_size409);
            for ($_i413 = 0; $_i413 < $_size409; ++$_i413)
            {
              $elem414 = null;
              $elem414 = new \Bank();
              $xfer += $elem414->read($input);
              $this->success []= $elem414;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FinancialInformationService_getBankByIdMask_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter415)
          {
            $xfer += $iter415->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 1);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 2);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FinancialInformationService_fetchDepositConditions_args {
  static $_TSPEC;

  /**
   * @var \DepositConditionsFilter
   */
  public $filter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'filter',
          'type' => TType::STRUCT,
          'class' => '\DepositConditionsFilter',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
    }
  }

  public function getName() {
    return 'FinancialInformationService_fetchDepositConditions_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->filter = new \DepositConditionsFilter();
            $xfer += $this->filter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FinancialInformationService_fetchDepositConditions_args');
    if ($this->filter !== null) {
      if (!is_object($this->filter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filter', TType::STRUCT, 1);
      $xfer += $this->filter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FinancialInformationService_fetchDepositConditions_result {
  static $_TSPEC;

  /**
   * @var \DepositConditions[]
   */
  public $success = null;
  /**
   * При указании неверных параметров поиска
   * invalid_deposit_term_diapason -- если неверно указан диапазон (приводит к дням, см. DepositConditionsFilter.maxTerm)
   * invalid_currency -- неверно задана валюта (не трехбуквенный код, например "USD", а например "980" или "доллар")
   * invalid_deposit_conditions_filter -- в случае неверных значений других параметров
   * 
   * 
   * @var \PreconditionException
   */
  public $validError = null;
  /**
   * Ошибка, переданная интеграционным слоем (банком), например если банк хочет сообщить, что такую валюту
   * он в принципе считает неверной (не поддерживает в ней депозиты)
   * 
   * 
   * @var \BackendValidationException
   */
  public $backendError = null;
  /**
   * Системные и технические ошибки (нет связи и т.п.)
   * 
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\DepositConditions',
            ),
          ),
        1 => array(
          'var' => 'validError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        2 => array(
          'var' => 'backendError',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        3 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        4 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['validError'])) {
        $this->validError = $vals['validError'];
      }
      if (isset($vals['backendError'])) {
        $this->backendError = $vals['backendError'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'FinancialInformationService_fetchDepositConditions_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size416 = 0;
            $_etype419 = 0;
            $xfer += $input->readListBegin($_etype419, $_size416);
            for ($_i420 = 0; $_i420 < $_size416; ++$_i420)
            {
              $elem421 = null;
              $elem421 = new \DepositConditions();
              $xfer += $elem421->read($input);
              $this->success []= $elem421;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->validError = new \PreconditionException();
            $xfer += $this->validError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->backendError = new \BackendValidationException();
            $xfer += $this->backendError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FinancialInformationService_fetchDepositConditions_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter422)
          {
            $xfer += $iter422->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validError !== null) {
      $xfer += $output->writeFieldBegin('validError', TType::STRUCT, 1);
      $xfer += $this->validError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendError !== null) {
      $xfer += $output->writeFieldBegin('backendError', TType::STRUCT, 2);
      $xfer += $this->backendError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 3);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 4);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


