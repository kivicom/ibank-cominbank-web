<?php
/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * Сервис предназначен для обслуживания жизненного цикла цифровых карт/
 */
interface CardDigitilizationServiceIf {
  /**
   * @param string $token Id of AuthToken
   * 
   * @param \DeviceRegistrationForm $deviceRegistrationForm Form contain data for registration of device at Payment System
   * ! For mastercard registration on this step form must contain only cardPaymentSystem for routing purposes
   * 
   * @return \CommonOperation Иерархия общих (чаще всего сервисных) операций.
   * Этот класс описывает операции, не относящися к финансовым (FinancialOperation) или к
   * операциям с профилем клиента (ProfileOperationHistoryItem)
   * 
   * 
   * @throws \RegisterDeviceException Some error during registratin process
   * 
   * @throws \IbankServerException Any other system error
   * 
   * @throws \IbankIntegrationLayerException if any communication errors with Auth Server
   * 
   * @throws \WrongSessionException in case of invalid token or token expired
   * 
   */
  public function startDeviceRegistration($token, \DeviceRegistrationForm $deviceRegistrationForm);
  /**
   * * For MasetrCard only "token" and "deviceRegistrationForm" and  must be present at the call.
   * * where must be:
   * *   "rnsInfo"
   * *   "deviceFingerprint"
   * *   "newMobilePin"
   * *   "attributes" (key "publicKeyFingerprint" value "publicKeyFingerprint", key "rgk" value "rgk")
   *    *
   * * At commonOperation.subjectDeviceRegistration.masterCardMobileKeys.publicKeyCertificate will
   * * returned x509 certificate of public key in base64 encoded format (can be changed)
   * 
   * @param string $token Id of AuthToken
   * 
   * @param \DeviceRegistrationForm $deviceRegistrationForm Form contain data for registration of device at Payment System
   * ! For mastercard registration on this step form must contain all fields of form
   * 
   * @return \CommonOperation Иерархия общих (чаще всего сервисных) операций.
   * Этот класс описывает операции, не относящися к финансовым (FinancialOperation) или к
   * операциям с профилем клиента (ProfileOperationHistoryItem)
   * 
   * 
   * @throws \RegisterDeviceException Some error during registratin process
   * 
   * @throws \IbankServerException Any other system error
   * 
   * @throws \IbankIntegrationLayerException if any communication errors with Auth Server
   * 
   * @throws \WrongSessionException in case of invalid token or token expired
   * 
   */
  public function finishDeviceRegistration($token, \DeviceRegistrationForm $deviceRegistrationForm);
  /**
   * @param string $token Id of AuthToken
   * 
   * @param \DigitalizeCardForm $digitalizeCardForm The DigitalizeCardForm must contain:
   * - cardPaymentSystem;
   * - one of the inner objects MasterCardForm or VisaDigitalizeForm
   * 
   * @param string $paymentAppInstanceId Id of instance of application, was received during registration
   * 
   * @param \Attributes $attributes Additional attributes
   * 
   * @return \CommonOperation Иерархия общих (чаще всего сервисных) операций.
   * Этот класс описывает операции, не относящися к финансовым (FinancialOperation) или к
   * операциям с профилем клиента (ProfileOperationHistoryItem)
   * 
   * 
   * @throws \DigitalizeCardException Some error during digitalization process
   * 
   * @throws \IbankServerException Any other system error
   * 
   * @throws \IbankIntegrationLayerException if any communication errors with Auth Server
   * 
   * @throws \WrongSessionException in case of invalid token or token expired
   * 
   * @throws \DeviceNotEligibleException The reason can be one of:
   * - operating System is not supported by the service,
   *   - operating System version is not supported by the service,
   *   - technology types specified do not represent a supported MasterCard Device Type for digitization.
   *   Reason will be at errorDescription
   * 
   */
  public function startDigitalizeCard($token, \DigitalizeCardForm $digitalizeCardForm, $paymentAppInstanceId, \Attributes $attributes);
  /**
   * @param string $token Id of AuthToken
   * 
   * @param \DigitalizeCardForm $digitalizeCardForm
   * @param string $paymentAppInstanceId Id of instance of application, was received during registration
   * 
   * @param \Attributes $attributes 
   * 
   * @return \CommonOperation Иерархия общих (чаще всего сервисных) операций.
   * Этот класс описывает операции, не относящися к финансовым (FinancialOperation) или к
   * операциям с профилем клиента (ProfileOperationHistoryItem)
   * 
   * 
   * @throws \DigitalizeCardException Contains data relevant to the decisioning process.
   * 
   * @throws \IbankServerException Any other system error
   * 
   * @throws \IbankIntegrationLayerException if any communication errors with Auth Server
   * 
   * @throws \WrongSessionException in case of invalid token or token expired
   * 
   */
  public function finishDigitalizeCard($token, \DigitalizeCardForm $digitalizeCardForm, $paymentAppInstanceId, \Attributes $attributes);
}


class CardDigitilizationServiceClient implements \CardDigitilizationServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function startDeviceRegistration($token, \DeviceRegistrationForm $deviceRegistrationForm)
  {
    $this->send_startDeviceRegistration($token, $deviceRegistrationForm);
    return $this->recv_startDeviceRegistration();
  }

  public function send_startDeviceRegistration($token, \DeviceRegistrationForm $deviceRegistrationForm)
  {
    $args = new \CardDigitilizationService_startDeviceRegistration_args();
    $args->token = $token;
    $args->deviceRegistrationForm = $deviceRegistrationForm;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'startDeviceRegistration', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('startDeviceRegistration', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_startDeviceRegistration()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CardDigitilizationService_startDeviceRegistration_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CardDigitilizationService_startDeviceRegistration_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->registerDeviceError !== null) {
      throw $result->registerDeviceError;
    }
    if ($result->error !== null) {
      throw $result->error;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    if ($result->wrongSessionException !== null) {
      throw $result->wrongSessionException;
    }
    throw new \Exception("startDeviceRegistration failed: unknown result");
  }

  public function finishDeviceRegistration($token, \DeviceRegistrationForm $deviceRegistrationForm)
  {
    $this->send_finishDeviceRegistration($token, $deviceRegistrationForm);
    return $this->recv_finishDeviceRegistration();
  }

  public function send_finishDeviceRegistration($token, \DeviceRegistrationForm $deviceRegistrationForm)
  {
    $args = new \CardDigitilizationService_finishDeviceRegistration_args();
    $args->token = $token;
    $args->deviceRegistrationForm = $deviceRegistrationForm;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'finishDeviceRegistration', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('finishDeviceRegistration', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_finishDeviceRegistration()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CardDigitilizationService_finishDeviceRegistration_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CardDigitilizationService_finishDeviceRegistration_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->registerDeviceError !== null) {
      throw $result->registerDeviceError;
    }
    if ($result->error !== null) {
      throw $result->error;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    if ($result->wrongSessionException !== null) {
      throw $result->wrongSessionException;
    }
    throw new \Exception("finishDeviceRegistration failed: unknown result");
  }

  public function startDigitalizeCard($token, \DigitalizeCardForm $digitalizeCardForm, $paymentAppInstanceId, \Attributes $attributes)
  {
    $this->send_startDigitalizeCard($token, $digitalizeCardForm, $paymentAppInstanceId, $attributes);
    return $this->recv_startDigitalizeCard();
  }

  public function send_startDigitalizeCard($token, \DigitalizeCardForm $digitalizeCardForm, $paymentAppInstanceId, \Attributes $attributes)
  {
    $args = new \CardDigitilizationService_startDigitalizeCard_args();
    $args->token = $token;
    $args->digitalizeCardForm = $digitalizeCardForm;
    $args->paymentAppInstanceId = $paymentAppInstanceId;
    $args->attributes = $attributes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'startDigitalizeCard', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('startDigitalizeCard', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_startDigitalizeCard()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CardDigitilizationService_startDigitalizeCard_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CardDigitilizationService_startDigitalizeCard_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->digitalizeCardError !== null) {
      throw $result->digitalizeCardError;
    }
    if ($result->error !== null) {
      throw $result->error;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    if ($result->wrongSessionException !== null) {
      throw $result->wrongSessionException;
    }
    if ($result->deviceNotEligibleException !== null) {
      throw $result->deviceNotEligibleException;
    }
    throw new \Exception("startDigitalizeCard failed: unknown result");
  }

  public function finishDigitalizeCard($token, \DigitalizeCardForm $digitalizeCardForm, $paymentAppInstanceId, \Attributes $attributes)
  {
    $this->send_finishDigitalizeCard($token, $digitalizeCardForm, $paymentAppInstanceId, $attributes);
    return $this->recv_finishDigitalizeCard();
  }

  public function send_finishDigitalizeCard($token, \DigitalizeCardForm $digitalizeCardForm, $paymentAppInstanceId, \Attributes $attributes)
  {
    $args = new \CardDigitilizationService_finishDigitalizeCard_args();
    $args->token = $token;
    $args->digitalizeCardForm = $digitalizeCardForm;
    $args->paymentAppInstanceId = $paymentAppInstanceId;
    $args->attributes = $attributes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'finishDigitalizeCard', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('finishDigitalizeCard', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_finishDigitalizeCard()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CardDigitilizationService_finishDigitalizeCard_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CardDigitilizationService_finishDigitalizeCard_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->digitalizeCardError !== null) {
      throw $result->digitalizeCardError;
    }
    if ($result->error !== null) {
      throw $result->error;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    if ($result->wrongSessionException !== null) {
      throw $result->wrongSessionException;
    }
    throw new \Exception("finishDigitalizeCard failed: unknown result");
  }

}


// HELPER FUNCTIONS AND STRUCTURES

class CardDigitilizationService_startDeviceRegistration_args {
  static $_TSPEC;

  /**
   * Id of AuthToken
   * 
   * @var string
   */
  public $token = null;
  /**
   * Form contain data for registration of device at Payment System
   * ! For mastercard registration on this step form must contain only cardPaymentSystem for routing purposes
   * 
   * @var \DeviceRegistrationForm
   */
  public $deviceRegistrationForm = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'deviceRegistrationForm',
          'type' => TType::STRUCT,
          'class' => '\DeviceRegistrationForm',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['deviceRegistrationForm'])) {
        $this->deviceRegistrationForm = $vals['deviceRegistrationForm'];
      }
    }
  }

  public function getName() {
    return 'CardDigitilizationService_startDeviceRegistration_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->deviceRegistrationForm = new \DeviceRegistrationForm();
            $xfer += $this->deviceRegistrationForm->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CardDigitilizationService_startDeviceRegistration_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deviceRegistrationForm !== null) {
      if (!is_object($this->deviceRegistrationForm)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('deviceRegistrationForm', TType::STRUCT, 2);
      $xfer += $this->deviceRegistrationForm->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CardDigitilizationService_startDeviceRegistration_result {
  static $_TSPEC;

  /**
   * @var \CommonOperation
   */
  public $success = null;
  /**
   * Some error during registratin process
   * 
   * @var \RegisterDeviceException
   */
  public $registerDeviceError = null;
  /**
   * Any other system error
   * 
   * @var \IbankServerException
   */
  public $error = null;
  /**
   * if any communication errors with Auth Server
   * 
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;
  /**
   * in case of invalid token or token expired
   * 
   * @var \WrongSessionException
   */
  public $wrongSessionException = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\CommonOperation',
          ),
        1 => array(
          'var' => 'registerDeviceError',
          'type' => TType::STRUCT,
          'class' => '\RegisterDeviceException',
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        3 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        4 => array(
          'var' => 'wrongSessionException',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['registerDeviceError'])) {
        $this->registerDeviceError = $vals['registerDeviceError'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
      if (isset($vals['wrongSessionException'])) {
        $this->wrongSessionException = $vals['wrongSessionException'];
      }
    }
  }

  public function getName() {
    return 'CardDigitilizationService_startDeviceRegistration_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \CommonOperation();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->registerDeviceError = new \RegisterDeviceException();
            $xfer += $this->registerDeviceError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new \IbankServerException();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->wrongSessionException = new \WrongSessionException();
            $xfer += $this->wrongSessionException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CardDigitilizationService_startDeviceRegistration_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->registerDeviceError !== null) {
      $xfer += $output->writeFieldBegin('registerDeviceError', TType::STRUCT, 1);
      $xfer += $this->registerDeviceError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 3);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wrongSessionException !== null) {
      $xfer += $output->writeFieldBegin('wrongSessionException', TType::STRUCT, 4);
      $xfer += $this->wrongSessionException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CardDigitilizationService_finishDeviceRegistration_args {
  static $_TSPEC;

  /**
   * Id of AuthToken
   * 
   * @var string
   */
  public $token = null;
  /**
   * Form contain data for registration of device at Payment System
   * ! For mastercard registration on this step form must contain all fields of form
   * 
   * @var \DeviceRegistrationForm
   */
  public $deviceRegistrationForm = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'deviceRegistrationForm',
          'type' => TType::STRUCT,
          'class' => '\DeviceRegistrationForm',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['deviceRegistrationForm'])) {
        $this->deviceRegistrationForm = $vals['deviceRegistrationForm'];
      }
    }
  }

  public function getName() {
    return 'CardDigitilizationService_finishDeviceRegistration_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->deviceRegistrationForm = new \DeviceRegistrationForm();
            $xfer += $this->deviceRegistrationForm->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CardDigitilizationService_finishDeviceRegistration_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deviceRegistrationForm !== null) {
      if (!is_object($this->deviceRegistrationForm)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('deviceRegistrationForm', TType::STRUCT, 2);
      $xfer += $this->deviceRegistrationForm->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CardDigitilizationService_finishDeviceRegistration_result {
  static $_TSPEC;

  /**
   * @var \CommonOperation
   */
  public $success = null;
  /**
   * Some error during registratin process
   * 
   * @var \RegisterDeviceException
   */
  public $registerDeviceError = null;
  /**
   * Any other system error
   * 
   * @var \IbankServerException
   */
  public $error = null;
  /**
   * if any communication errors with Auth Server
   * 
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;
  /**
   * in case of invalid token or token expired
   * 
   * @var \WrongSessionException
   */
  public $wrongSessionException = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\CommonOperation',
          ),
        1 => array(
          'var' => 'registerDeviceError',
          'type' => TType::STRUCT,
          'class' => '\RegisterDeviceException',
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        3 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        4 => array(
          'var' => 'wrongSessionException',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['registerDeviceError'])) {
        $this->registerDeviceError = $vals['registerDeviceError'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
      if (isset($vals['wrongSessionException'])) {
        $this->wrongSessionException = $vals['wrongSessionException'];
      }
    }
  }

  public function getName() {
    return 'CardDigitilizationService_finishDeviceRegistration_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \CommonOperation();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->registerDeviceError = new \RegisterDeviceException();
            $xfer += $this->registerDeviceError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new \IbankServerException();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->wrongSessionException = new \WrongSessionException();
            $xfer += $this->wrongSessionException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CardDigitilizationService_finishDeviceRegistration_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->registerDeviceError !== null) {
      $xfer += $output->writeFieldBegin('registerDeviceError', TType::STRUCT, 1);
      $xfer += $this->registerDeviceError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 3);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wrongSessionException !== null) {
      $xfer += $output->writeFieldBegin('wrongSessionException', TType::STRUCT, 4);
      $xfer += $this->wrongSessionException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CardDigitilizationService_startDigitalizeCard_args {
  static $_TSPEC;

  /**
   * Id of AuthToken
   * 
   * @var string
   */
  public $token = null;
  /**
   * The DigitalizeCardForm must contain:
   * - cardPaymentSystem;
   * - one of the inner objects MasterCardForm or VisaDigitalizeForm
   * 
   * @var \DigitalizeCardForm
   */
  public $digitalizeCardForm = null;
  /**
   * Id of instance of application, was received during registration
   * 
   * @var string
   */
  public $paymentAppInstanceId = null;
  /**
   * Additional attributes
   * 
   * @var \Attributes
   */
  public $attributes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'digitalizeCardForm',
          'type' => TType::STRUCT,
          'class' => '\DigitalizeCardForm',
          ),
        3 => array(
          'var' => 'paymentAppInstanceId',
          'type' => TType::STRING,
          ),
        99 => array(
          'var' => 'attributes',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['digitalizeCardForm'])) {
        $this->digitalizeCardForm = $vals['digitalizeCardForm'];
      }
      if (isset($vals['paymentAppInstanceId'])) {
        $this->paymentAppInstanceId = $vals['paymentAppInstanceId'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
    }
  }

  public function getName() {
    return 'CardDigitilizationService_startDigitalizeCard_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->digitalizeCardForm = new \DigitalizeCardForm();
            $xfer += $this->digitalizeCardForm->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->paymentAppInstanceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 99:
          if ($ftype == TType::STRUCT) {
            $this->attributes = new \Attributes();
            $xfer += $this->attributes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CardDigitilizationService_startDigitalizeCard_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->digitalizeCardForm !== null) {
      if (!is_object($this->digitalizeCardForm)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('digitalizeCardForm', TType::STRUCT, 2);
      $xfer += $this->digitalizeCardForm->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->paymentAppInstanceId !== null) {
      $xfer += $output->writeFieldBegin('paymentAppInstanceId', TType::STRING, 3);
      $xfer += $output->writeString($this->paymentAppInstanceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_object($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::STRUCT, 99);
      $xfer += $this->attributes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CardDigitilizationService_startDigitalizeCard_result {
  static $_TSPEC;

  /**
   * @var \CommonOperation
   */
  public $success = null;
  /**
   * Some error during digitalization process
   * 
   * @var \DigitalizeCardException
   */
  public $digitalizeCardError = null;
  /**
   * Any other system error
   * 
   * @var \IbankServerException
   */
  public $error = null;
  /**
   * if any communication errors with Auth Server
   * 
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;
  /**
   * in case of invalid token or token expired
   * 
   * @var \WrongSessionException
   */
  public $wrongSessionException = null;
  /**
   * The reason can be one of:
   * - operating System is not supported by the service,
   *   - operating System version is not supported by the service,
   *   - technology types specified do not represent a supported MasterCard Device Type for digitization.
   *   Reason will be at errorDescription
   * 
   * @var \DeviceNotEligibleException
   */
  public $deviceNotEligibleException = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\CommonOperation',
          ),
        1 => array(
          'var' => 'digitalizeCardError',
          'type' => TType::STRUCT,
          'class' => '\DigitalizeCardException',
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        3 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        4 => array(
          'var' => 'wrongSessionException',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        5 => array(
          'var' => 'deviceNotEligibleException',
          'type' => TType::STRUCT,
          'class' => '\DeviceNotEligibleException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['digitalizeCardError'])) {
        $this->digitalizeCardError = $vals['digitalizeCardError'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
      if (isset($vals['wrongSessionException'])) {
        $this->wrongSessionException = $vals['wrongSessionException'];
      }
      if (isset($vals['deviceNotEligibleException'])) {
        $this->deviceNotEligibleException = $vals['deviceNotEligibleException'];
      }
    }
  }

  public function getName() {
    return 'CardDigitilizationService_startDigitalizeCard_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \CommonOperation();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->digitalizeCardError = new \DigitalizeCardException();
            $xfer += $this->digitalizeCardError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new \IbankServerException();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->wrongSessionException = new \WrongSessionException();
            $xfer += $this->wrongSessionException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->deviceNotEligibleException = new \DeviceNotEligibleException();
            $xfer += $this->deviceNotEligibleException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CardDigitilizationService_startDigitalizeCard_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->digitalizeCardError !== null) {
      $xfer += $output->writeFieldBegin('digitalizeCardError', TType::STRUCT, 1);
      $xfer += $this->digitalizeCardError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 3);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wrongSessionException !== null) {
      $xfer += $output->writeFieldBegin('wrongSessionException', TType::STRUCT, 4);
      $xfer += $this->wrongSessionException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deviceNotEligibleException !== null) {
      $xfer += $output->writeFieldBegin('deviceNotEligibleException', TType::STRUCT, 5);
      $xfer += $this->deviceNotEligibleException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CardDigitilizationService_finishDigitalizeCard_args {
  static $_TSPEC;

  /**
   * Id of AuthToken
   * 
   * @var string
   */
  public $token = null;
  /**
   * @var \DigitalizeCardForm
   */
  public $digitalizeCardForm = null;
  /**
   * Id of instance of application, was received during registration
   * 
   * @var string
   */
  public $paymentAppInstanceId = null;
  /**
   * 
   * 
   * @var \Attributes
   */
  public $attributes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'digitalizeCardForm',
          'type' => TType::STRUCT,
          'class' => '\DigitalizeCardForm',
          ),
        3 => array(
          'var' => 'paymentAppInstanceId',
          'type' => TType::STRING,
          ),
        99 => array(
          'var' => 'attributes',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['digitalizeCardForm'])) {
        $this->digitalizeCardForm = $vals['digitalizeCardForm'];
      }
      if (isset($vals['paymentAppInstanceId'])) {
        $this->paymentAppInstanceId = $vals['paymentAppInstanceId'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
    }
  }

  public function getName() {
    return 'CardDigitilizationService_finishDigitalizeCard_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->digitalizeCardForm = new \DigitalizeCardForm();
            $xfer += $this->digitalizeCardForm->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->paymentAppInstanceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 99:
          if ($ftype == TType::STRUCT) {
            $this->attributes = new \Attributes();
            $xfer += $this->attributes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CardDigitilizationService_finishDigitalizeCard_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->digitalizeCardForm !== null) {
      if (!is_object($this->digitalizeCardForm)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('digitalizeCardForm', TType::STRUCT, 2);
      $xfer += $this->digitalizeCardForm->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->paymentAppInstanceId !== null) {
      $xfer += $output->writeFieldBegin('paymentAppInstanceId', TType::STRING, 3);
      $xfer += $output->writeString($this->paymentAppInstanceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_object($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::STRUCT, 99);
      $xfer += $this->attributes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CardDigitilizationService_finishDigitalizeCard_result {
  static $_TSPEC;

  /**
   * @var \CommonOperation
   */
  public $success = null;
  /**
   * Contains data relevant to the decisioning process.
   * 
   * @var \DigitalizeCardException
   */
  public $digitalizeCardError = null;
  /**
   * Any other system error
   * 
   * @var \IbankServerException
   */
  public $error = null;
  /**
   * if any communication errors with Auth Server
   * 
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;
  /**
   * in case of invalid token or token expired
   * 
   * @var \WrongSessionException
   */
  public $wrongSessionException = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\CommonOperation',
          ),
        1 => array(
          'var' => 'digitalizeCardError',
          'type' => TType::STRUCT,
          'class' => '\DigitalizeCardException',
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        3 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        4 => array(
          'var' => 'wrongSessionException',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['digitalizeCardError'])) {
        $this->digitalizeCardError = $vals['digitalizeCardError'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
      if (isset($vals['wrongSessionException'])) {
        $this->wrongSessionException = $vals['wrongSessionException'];
      }
    }
  }

  public function getName() {
    return 'CardDigitilizationService_finishDigitalizeCard_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \CommonOperation();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->digitalizeCardError = new \DigitalizeCardException();
            $xfer += $this->digitalizeCardError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new \IbankServerException();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->wrongSessionException = new \WrongSessionException();
            $xfer += $this->wrongSessionException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CardDigitilizationService_finishDigitalizeCard_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->digitalizeCardError !== null) {
      $xfer += $output->writeFieldBegin('digitalizeCardError', TType::STRUCT, 1);
      $xfer += $this->digitalizeCardError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 3);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wrongSessionException !== null) {
      $xfer += $output->writeFieldBegin('wrongSessionException', TType::STRUCT, 4);
      $xfer += $this->wrongSessionException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


