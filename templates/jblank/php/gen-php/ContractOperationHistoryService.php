<?php
/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface ContractOperationHistoryServiceIf {
  /**
   * Return list of CardContractOperationHistoryItem <br>
   * 
   * @param string $token
   * @param string $cardContractId
   * @param \OperationHistoryFilter $operationHistoryFilter
   * @param int $dateFrom
   * @param int $dateTo
   * @param \Attributes $attr In the case that details need received only for one card, then to the attributes must be added pairs kay / value in the next manear: <br>
   * key=cardId <br>
   * value=<Id>, id of card which was received previusly.
   * 
   * @return \CardContractOperationHistoryItem[]
   * @throws \WrongSessionException
   * @throws \PeriodIsLargeException
   * @throws \OperationDeniedException
   * @throws \ExtendedAuthenticationRequired
   * @throws \IbankServerException
   * @throws \BackendValidationException client_not_found - не найден клиент <br>
   * contract_not_found - не найден контракт <br>
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function fetchCardContractOperationHistoryItemsWithFromToDate($token, $cardContractId, \OperationHistoryFilter $operationHistoryFilter, $dateFrom, $dateTo, \Attributes $attr);
  /**
   * Return list of CardContractOperationHistoryItem <br>
   * 
   * @param string $token
   * @param string $cardContractId
   * @param \OperationHistoryFilter $operationHistoryFilter
   * @param int $lastDays
   * @param \Attributes $attr In the case that details need received only for one card or a specific list, then to the attributes must be added pairs kay / value in the next manear: <br>
   * key=cardId<sequence>, for example cardId0, cardId1 etc/. Key must start with "cardId" and must be unique <br>
   * value=<Id>, id of card which was received previusly.
   * 
   * @return \CardContractOperationHistoryItem[]
   * @throws \WrongSessionException
   * @throws \PeriodIsLargeException
   * @throws \OperationDeniedException
   * @throws \ExtendedAuthenticationRequired
   * @throws \IbankServerException
   * @throws \BackendValidationException client_not_found - не найден клиент <br>
   * contract_not_found - не найден контракт <br>
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function fetchCardContractOperationHistoryItemsWithLastDays($token, $cardContractId, \OperationHistoryFilter $operationHistoryFilter, $lastDays, \Attributes $attr);
  /**
   * @param string $token
   * @param string $accountContractId
   * @param \OperationHistoryFilter $operationHistoryFilter
   * @param int $dateFrom
   * @param int $dateTo
   * @param \Attributes $attr
   * @return \AccountContractOperationHistoryItem[]
   * @throws \WrongSessionException
   * @throws \PeriodIsLargeException
   * @throws \OperationDeniedException
   * @throws \ExtendedAuthenticationRequired
   * @throws \IbankServerException
   * @throws \BackendValidationException client_not_found - не найден клиент
   * contract_not_found - не найден контракт
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function fetchAccountOperationHistoryItemsWithFromToDate($token, $accountContractId, \OperationHistoryFilter $operationHistoryFilter, $dateFrom, $dateTo, \Attributes $attr);
  /**
   * @param string $token
   * @param string $accountContractId
   * @param \OperationHistoryFilter $operationHistoryFilter
   * @param int $lastDays
   * @param \Attributes $attr
   * @return \AccountContractOperationHistoryItem[]
   * @throws \WrongSessionException
   * @throws \PeriodIsLargeException
   * @throws \OperationDeniedException
   * @throws \ExtendedAuthenticationRequired
   * @throws \IbankServerException
   * @throws \BackendValidationException client_not_found - не найден клиент
   * contract_not_found - не найден контракт
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function fetchAccountOperationHistoryItemsWithLastDays($token, $accountContractId, \OperationHistoryFilter $operationHistoryFilter, $lastDays, \Attributes $attr);
  /**
   * @param string $token
   * @param string $depositContractId
   * @param \OperationHistoryFilter $operationHistoryFilter
   * @param int $dateFrom
   * @param int $dateTo
   * @param \Attributes $attr
   * @return \DepositContractOperationHistoryItem[]
   * @throws \WrongSessionException
   * @throws \PeriodIsLargeException
   * @throws \OperationDeniedException
   * @throws \ExtendedAuthenticationRequired
   * @throws \IbankServerException
   * @throws \BackendValidationException client_not_found - не найден клиент
   * contract_not_found - не найден контракт
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function fetchDepositOperationHistoryItemsWithFromToDate($token, $depositContractId, \OperationHistoryFilter $operationHistoryFilter, $dateFrom, $dateTo, \Attributes $attr);
  /**
   * @param string $token
   * @param string $depositContractId
   * @param \OperationHistoryFilter $operationHistoryFilter
   * @param int $lastDays
   * @param \Attributes $attr
   * @return \DepositContractOperationHistoryItem[]
   * @throws \WrongSessionException
   * @throws \PeriodIsLargeException
   * @throws \OperationDeniedException
   * @throws \ExtendedAuthenticationRequired
   * @throws \IbankServerException
   * @throws \BackendValidationException client_not_found - не найден клиент
   * contract_not_found - не найден контракт
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function fetchDepositOperationHistoryItemsWithLastDays($token, $depositContractId, \OperationHistoryFilter $operationHistoryFilter, $lastDays, \Attributes $attr);
  /**
   * @param string $token
   * @param string $creditContractId
   * @param \OperationHistoryFilter $operationHistoryFilter
   * @param int $dateFrom
   * @param int $dateTo
   * @param \Attributes $attr
   * @return \CreditContractOperationHistoryItem[]
   * @throws \WrongSessionException
   * @throws \PeriodIsLargeException
   * @throws \OperationDeniedException
   * @throws \ExtendedAuthenticationRequired
   * @throws \IbankServerException
   * @throws \BackendValidationException client_not_found - не найден клиент
   * contract_not_found - не найден контракт
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function fetchCreditOperationHistoryItemsWithFromToDate($token, $creditContractId, \OperationHistoryFilter $operationHistoryFilter, $dateFrom, $dateTo, \Attributes $attr);
  /**
   * @param string $token
   * @param string $creditContractId
   * @param \OperationHistoryFilter $operationHistoryFilter
   * @param int $lastDays
   * @param \Attributes $attr
   * @return \CreditContractOperationHistoryItem[]
   * @throws \WrongSessionException
   * @throws \PeriodIsLargeException
   * @throws \OperationDeniedException
   * @throws \ExtendedAuthenticationRequired
   * @throws \IbankServerException
   * @throws \BackendValidationException client_not_found - не найден клиент
   * contract_not_found - не найден контракт
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function fetchCreditOperationHistoryItemsWithLastDays($token, $creditContractId, \OperationHistoryFilter $operationHistoryFilter, $lastDays, \Attributes $attr);
  /**
   * @param string $token
   * @param string $cardContractId
   * @param \OperationHistoryFilter $operationHistoryFilter
   * @param int $dateFrom
   * @param int $dateTo
   * @param \Attributes $attr
   * @param \ReportOptions $options
   * @return \Base64BinaryData Binary data. Base64-encoded.
   * (http://en.wikipedia.org/wiki/Base64).
   * Has the content type, fileName and charset, describing the data for helping to represent on client side.
   * See MYME types (http://en.wikipedia.org/wiki/MIME_type)
   * 
   * @throws \WrongSessionException
   * @throws \PeriodIsLargeException
   * @throws \OperationDeniedException
   * @throws \ExtendedAuthenticationRequired
   * @throws \IbankServerException
   * @throws \BackendValidationException client_not_found - не найден клиент
   * contract_not_found - не найден контракт
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function fetchReportCardContractOperationHistoryItemsWithFromToDate($token, $cardContractId, \OperationHistoryFilter $operationHistoryFilter, $dateFrom, $dateTo, \Attributes $attr, \ReportOptions $options);
  /**
   * @param string $token
   * @param string $cardContractId
   * @param \OperationHistoryFilter $operationHistoryFilter
   * @param int $lastDays
   * @param \Attributes $attr
   * @param \ReportOptions $options
   * @return \Base64BinaryData Binary data. Base64-encoded.
   * (http://en.wikipedia.org/wiki/Base64).
   * Has the content type, fileName and charset, describing the data for helping to represent on client side.
   * See MYME types (http://en.wikipedia.org/wiki/MIME_type)
   * 
   * @throws \WrongSessionException
   * @throws \PeriodIsLargeException
   * @throws \OperationDeniedException
   * @throws \ExtendedAuthenticationRequired
   * @throws \IbankServerException
   * @throws \BackendValidationException client_not_found - не найден клиент
   * contract_not_found - не найден контракт
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function fetchReportCardContractOperationHistoryItemsWithLastDays($token, $cardContractId, \OperationHistoryFilter $operationHistoryFilter, $lastDays, \Attributes $attr, \ReportOptions $options);
  /**
   * @param string $token
   * @param string $accountContractId
   * @param \OperationHistoryFilter $operationHistoryFilter
   * @param int $dateFrom
   * @param int $dateTo
   * @param \Attributes $attr
   * @param \ReportOptions $options
   * @return \Base64BinaryData Binary data. Base64-encoded.
   * (http://en.wikipedia.org/wiki/Base64).
   * Has the content type, fileName and charset, describing the data for helping to represent on client side.
   * See MYME types (http://en.wikipedia.org/wiki/MIME_type)
   * 
   * @throws \WrongSessionException
   * @throws \PeriodIsLargeException
   * @throws \OperationDeniedException
   * @throws \ExtendedAuthenticationRequired
   * @throws \IbankServerException
   * @throws \BackendValidationException client_not_found - не найден клиент
   * contract_not_found - не найден контракт
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * 
   */
  public function fetchReportAccountOperationHistoryItemsWithFromToDate($token, $accountContractId, \OperationHistoryFilter $operationHistoryFilter, $dateFrom, $dateTo, \Attributes $attr, \ReportOptions $options);
  /**
   * @param string $token
   * @param string $accountContractId
   * @param \OperationHistoryFilter $operationHistoryFilter
   * @param int $lastDays
   * @param \Attributes $attr
   * @param \ReportOptions $options
   * @return \Base64BinaryData Binary data. Base64-encoded.
   * (http://en.wikipedia.org/wiki/Base64).
   * Has the content type, fileName and charset, describing the data for helping to represent on client side.
   * See MYME types (http://en.wikipedia.org/wiki/MIME_type)
   * 
   * @throws \WrongSessionException
   * @throws \PeriodIsLargeException
   * @throws \OperationDeniedException
   * @throws \ExtendedAuthenticationRequired
   * @throws \IbankServerException
   * @throws \BackendValidationException client_not_found - не найден клиент
   * contract_not_found - не найден контракт
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function fetchReportAccountOperationHistoryItemsWithLastDays($token, $accountContractId, \OperationHistoryFilter $operationHistoryFilter, $lastDays, \Attributes $attr, \ReportOptions $options);
  /**
   * @param string $token
   * @param string $depositContractId
   * @param \OperationHistoryFilter $operationHistoryFilter
   * @param int $dateFrom
   * @param int $dateTo
   * @param \Attributes $attr
   * @param \ReportOptions $options
   * @return \Base64BinaryData Binary data. Base64-encoded.
   * (http://en.wikipedia.org/wiki/Base64).
   * Has the content type, fileName and charset, describing the data for helping to represent on client side.
   * See MYME types (http://en.wikipedia.org/wiki/MIME_type)
   * 
   * @throws \WrongSessionException
   * @throws \PeriodIsLargeException
   * @throws \OperationDeniedException
   * @throws \ExtendedAuthenticationRequired
   * @throws \IbankServerException
   * @throws \BackendValidationException client_not_found - не найден клиент
   * contract_not_found - не найден контракт
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function fetchReportDepositOperationHistoryItemsWithFromToDate($token, $depositContractId, \OperationHistoryFilter $operationHistoryFilter, $dateFrom, $dateTo, \Attributes $attr, \ReportOptions $options);
  /**
   * @param string $token
   * @param string $depositContractId
   * @param \OperationHistoryFilter $operationHistoryFilter
   * @param int $lastDays
   * @param \Attributes $attr
   * @param \ReportOptions $options
   * @return \Base64BinaryData Binary data. Base64-encoded.
   * (http://en.wikipedia.org/wiki/Base64).
   * Has the content type, fileName and charset, describing the data for helping to represent on client side.
   * See MYME types (http://en.wikipedia.org/wiki/MIME_type)
   * 
   * @throws \WrongSessionException
   * @throws \PeriodIsLargeException
   * @throws \OperationDeniedException
   * @throws \ExtendedAuthenticationRequired
   * @throws \IbankServerException
   * @throws \BackendValidationException client_not_found - не найден клиент
   * contract_not_found - не найден контракт
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function fetchReportDepositOperationHistoryItemsWithLastDays($token, $depositContractId, \OperationHistoryFilter $operationHistoryFilter, $lastDays, \Attributes $attr, \ReportOptions $options);
  /**
   * @param string $token
   * @param string $creditContractId
   * @param \OperationHistoryFilter $operationHistoryFilter
   * @param int $dateFrom
   * @param int $dateTo
   * @param \Attributes $attr
   * @param \ReportOptions $options
   * @return \Base64BinaryData Binary data. Base64-encoded.
   * (http://en.wikipedia.org/wiki/Base64).
   * Has the content type, fileName and charset, describing the data for helping to represent on client side.
   * See MYME types (http://en.wikipedia.org/wiki/MIME_type)
   * 
   * @throws \WrongSessionException
   * @throws \PeriodIsLargeException
   * @throws \OperationDeniedException
   * @throws \ExtendedAuthenticationRequired
   * @throws \IbankServerException
   * @throws \BackendValidationException client_not_found - не найден клиент
   * contract_not_found - не найден контракт
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function fetchReportCreditOperationHistoryItemsWithFromToDate($token, $creditContractId, \OperationHistoryFilter $operationHistoryFilter, $dateFrom, $dateTo, \Attributes $attr, \ReportOptions $options);
  /**
   * @param string $token
   * @param string $creditContractId
   * @param \OperationHistoryFilter $operationHistoryFilter
   * @param int $lastDays
   * @param \Attributes $attr
   * @param \ReportOptions $options
   * @return \Base64BinaryData Binary data. Base64-encoded.
   * (http://en.wikipedia.org/wiki/Base64).
   * Has the content type, fileName and charset, describing the data for helping to represent on client side.
   * See MYME types (http://en.wikipedia.org/wiki/MIME_type)
   * 
   * @throws \WrongSessionException
   * @throws \PeriodIsLargeException
   * @throws \OperationDeniedException
   * @throws \ExtendedAuthenticationRequired
   * @throws \IbankServerException
   * @throws \BackendValidationException client_not_found - не найден клиент
   * contract_not_found - не найден контракт
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function fetchReportCreditOperationHistoryItemsWithLastDays($token, $creditContractId, \OperationHistoryFilter $operationHistoryFilter, $lastDays, \Attributes $attr, \ReportOptions $options);
  /**
   * @param string $token Авторизация, получаемая методом authenticate()
   * 
   * @param string $operationId идентификатор любой операции (финансовой, общей или другой), однако в конкретной версии Ibank или в конкретной конфигурации, могут не поддерживаться некоторые типы операций
   * 
   * @param \ReportOptions $options опции генерации формата квитанции: описывают тип (включая custom, позволяющий создавать
   * администратору собственные разновидности вида квитанций, например "для визы"
   * (type=CUSTOM,customFormatName=for_visa) и "обычная" (type=PDF)
   * 
   * @return \Base64BinaryData Binary data. Base64-encoded.
   * (http://en.wikipedia.org/wiki/Base64).
   * Has the content type, fileName and charset, describing the data for helping to represent on client side.
   * See MYME types (http://en.wikipedia.org/wiki/MIME_type)
   * 
   * @throws \WrongSessionException ошибка проверки token
   * 
   * @throws \PreconditionException  * operation_not_found -- если не найдено операции по этому идентификатору или эта операция не принадлежит текущему пользователю
   *  * operation_type_not_supported -- ядро в текущей весрии поддерживает не все операции, а только финансовые
   *  * operation_report_not_configured -- отсутсвует XSLT-конфигурация отчета на сервере
   *  * custom_report_type_not_configured -- отсутсвует указанный в запросе options.customReportType для данного типа операции
   * *
   * 
   * @throws \OperationDeniedException если нет прав read_contracts
   * 
   * @throws \ExtendedAuthenticationRequired если нет прав read_contracts без расширенной аутентификации
   * 
   * @throws \IbankServerException технические, коммуникационные или другие непредусмотренные исключительные ситуации
   * 
   * @throws \BackendValidationException client_not_found - не найден клиент
   * contract_not_found - не найден контракт
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * 
   * @throws \IbankIntegrationLayerException
   */
  public function fetchOperationReceipt($token, $operationId, \ReportOptions $options);
}


class ContractOperationHistoryServiceClient implements \ContractOperationHistoryServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function fetchCardContractOperationHistoryItemsWithFromToDate($token, $cardContractId, \OperationHistoryFilter $operationHistoryFilter, $dateFrom, $dateTo, \Attributes $attr)
  {
    $this->send_fetchCardContractOperationHistoryItemsWithFromToDate($token, $cardContractId, $operationHistoryFilter, $dateFrom, $dateTo, $attr);
    return $this->recv_fetchCardContractOperationHistoryItemsWithFromToDate();
  }

  public function send_fetchCardContractOperationHistoryItemsWithFromToDate($token, $cardContractId, \OperationHistoryFilter $operationHistoryFilter, $dateFrom, $dateTo, \Attributes $attr)
  {
    $args = new \ContractOperationHistoryService_fetchCardContractOperationHistoryItemsWithFromToDate_args();
    $args->token = $token;
    $args->cardContractId = $cardContractId;
    $args->operationHistoryFilter = $operationHistoryFilter;
    $args->dateFrom = $dateFrom;
    $args->dateTo = $dateTo;
    $args->attr = $attr;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'fetchCardContractOperationHistoryItemsWithFromToDate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('fetchCardContractOperationHistoryItemsWithFromToDate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_fetchCardContractOperationHistoryItemsWithFromToDate()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ContractOperationHistoryService_fetchCardContractOperationHistoryItemsWithFromToDate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ContractOperationHistoryService_fetchCardContractOperationHistoryItemsWithFromToDate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->requestError !== null) {
      throw $result->requestError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->backendException !== null) {
      throw $result->backendException;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("fetchCardContractOperationHistoryItemsWithFromToDate failed: unknown result");
  }

  public function fetchCardContractOperationHistoryItemsWithLastDays($token, $cardContractId, \OperationHistoryFilter $operationHistoryFilter, $lastDays, \Attributes $attr)
  {
    $this->send_fetchCardContractOperationHistoryItemsWithLastDays($token, $cardContractId, $operationHistoryFilter, $lastDays, $attr);
    return $this->recv_fetchCardContractOperationHistoryItemsWithLastDays();
  }

  public function send_fetchCardContractOperationHistoryItemsWithLastDays($token, $cardContractId, \OperationHistoryFilter $operationHistoryFilter, $lastDays, \Attributes $attr)
  {
    $args = new \ContractOperationHistoryService_fetchCardContractOperationHistoryItemsWithLastDays_args();
    $args->token = $token;
    $args->cardContractId = $cardContractId;
    $args->operationHistoryFilter = $operationHistoryFilter;
    $args->lastDays = $lastDays;
    $args->attr = $attr;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'fetchCardContractOperationHistoryItemsWithLastDays', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('fetchCardContractOperationHistoryItemsWithLastDays', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_fetchCardContractOperationHistoryItemsWithLastDays()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ContractOperationHistoryService_fetchCardContractOperationHistoryItemsWithLastDays_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ContractOperationHistoryService_fetchCardContractOperationHistoryItemsWithLastDays_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->requestError !== null) {
      throw $result->requestError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->backendException !== null) {
      throw $result->backendException;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("fetchCardContractOperationHistoryItemsWithLastDays failed: unknown result");
  }

  public function fetchAccountOperationHistoryItemsWithFromToDate($token, $accountContractId, \OperationHistoryFilter $operationHistoryFilter, $dateFrom, $dateTo, \Attributes $attr)
  {
    $this->send_fetchAccountOperationHistoryItemsWithFromToDate($token, $accountContractId, $operationHistoryFilter, $dateFrom, $dateTo, $attr);
    return $this->recv_fetchAccountOperationHistoryItemsWithFromToDate();
  }

  public function send_fetchAccountOperationHistoryItemsWithFromToDate($token, $accountContractId, \OperationHistoryFilter $operationHistoryFilter, $dateFrom, $dateTo, \Attributes $attr)
  {
    $args = new \ContractOperationHistoryService_fetchAccountOperationHistoryItemsWithFromToDate_args();
    $args->token = $token;
    $args->accountContractId = $accountContractId;
    $args->operationHistoryFilter = $operationHistoryFilter;
    $args->dateFrom = $dateFrom;
    $args->dateTo = $dateTo;
    $args->attr = $attr;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'fetchAccountOperationHistoryItemsWithFromToDate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('fetchAccountOperationHistoryItemsWithFromToDate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_fetchAccountOperationHistoryItemsWithFromToDate()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ContractOperationHistoryService_fetchAccountOperationHistoryItemsWithFromToDate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ContractOperationHistoryService_fetchAccountOperationHistoryItemsWithFromToDate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->requestError !== null) {
      throw $result->requestError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->backendException !== null) {
      throw $result->backendException;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("fetchAccountOperationHistoryItemsWithFromToDate failed: unknown result");
  }

  public function fetchAccountOperationHistoryItemsWithLastDays($token, $accountContractId, \OperationHistoryFilter $operationHistoryFilter, $lastDays, \Attributes $attr)
  {
    $this->send_fetchAccountOperationHistoryItemsWithLastDays($token, $accountContractId, $operationHistoryFilter, $lastDays, $attr);
    return $this->recv_fetchAccountOperationHistoryItemsWithLastDays();
  }

  public function send_fetchAccountOperationHistoryItemsWithLastDays($token, $accountContractId, \OperationHistoryFilter $operationHistoryFilter, $lastDays, \Attributes $attr)
  {
    $args = new \ContractOperationHistoryService_fetchAccountOperationHistoryItemsWithLastDays_args();
    $args->token = $token;
    $args->accountContractId = $accountContractId;
    $args->operationHistoryFilter = $operationHistoryFilter;
    $args->lastDays = $lastDays;
    $args->attr = $attr;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'fetchAccountOperationHistoryItemsWithLastDays', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('fetchAccountOperationHistoryItemsWithLastDays', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_fetchAccountOperationHistoryItemsWithLastDays()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ContractOperationHistoryService_fetchAccountOperationHistoryItemsWithLastDays_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ContractOperationHistoryService_fetchAccountOperationHistoryItemsWithLastDays_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->requestError !== null) {
      throw $result->requestError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->backendException !== null) {
      throw $result->backendException;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("fetchAccountOperationHistoryItemsWithLastDays failed: unknown result");
  }

  public function fetchDepositOperationHistoryItemsWithFromToDate($token, $depositContractId, \OperationHistoryFilter $operationHistoryFilter, $dateFrom, $dateTo, \Attributes $attr)
  {
    $this->send_fetchDepositOperationHistoryItemsWithFromToDate($token, $depositContractId, $operationHistoryFilter, $dateFrom, $dateTo, $attr);
    return $this->recv_fetchDepositOperationHistoryItemsWithFromToDate();
  }

  public function send_fetchDepositOperationHistoryItemsWithFromToDate($token, $depositContractId, \OperationHistoryFilter $operationHistoryFilter, $dateFrom, $dateTo, \Attributes $attr)
  {
    $args = new \ContractOperationHistoryService_fetchDepositOperationHistoryItemsWithFromToDate_args();
    $args->token = $token;
    $args->depositContractId = $depositContractId;
    $args->operationHistoryFilter = $operationHistoryFilter;
    $args->dateFrom = $dateFrom;
    $args->dateTo = $dateTo;
    $args->attr = $attr;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'fetchDepositOperationHistoryItemsWithFromToDate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('fetchDepositOperationHistoryItemsWithFromToDate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_fetchDepositOperationHistoryItemsWithFromToDate()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ContractOperationHistoryService_fetchDepositOperationHistoryItemsWithFromToDate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ContractOperationHistoryService_fetchDepositOperationHistoryItemsWithFromToDate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->requestError !== null) {
      throw $result->requestError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->backendException !== null) {
      throw $result->backendException;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("fetchDepositOperationHistoryItemsWithFromToDate failed: unknown result");
  }

  public function fetchDepositOperationHistoryItemsWithLastDays($token, $depositContractId, \OperationHistoryFilter $operationHistoryFilter, $lastDays, \Attributes $attr)
  {
    $this->send_fetchDepositOperationHistoryItemsWithLastDays($token, $depositContractId, $operationHistoryFilter, $lastDays, $attr);
    return $this->recv_fetchDepositOperationHistoryItemsWithLastDays();
  }

  public function send_fetchDepositOperationHistoryItemsWithLastDays($token, $depositContractId, \OperationHistoryFilter $operationHistoryFilter, $lastDays, \Attributes $attr)
  {
    $args = new \ContractOperationHistoryService_fetchDepositOperationHistoryItemsWithLastDays_args();
    $args->token = $token;
    $args->depositContractId = $depositContractId;
    $args->operationHistoryFilter = $operationHistoryFilter;
    $args->lastDays = $lastDays;
    $args->attr = $attr;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'fetchDepositOperationHistoryItemsWithLastDays', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('fetchDepositOperationHistoryItemsWithLastDays', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_fetchDepositOperationHistoryItemsWithLastDays()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ContractOperationHistoryService_fetchDepositOperationHistoryItemsWithLastDays_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ContractOperationHistoryService_fetchDepositOperationHistoryItemsWithLastDays_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->requestError !== null) {
      throw $result->requestError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->backendException !== null) {
      throw $result->backendException;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("fetchDepositOperationHistoryItemsWithLastDays failed: unknown result");
  }

  public function fetchCreditOperationHistoryItemsWithFromToDate($token, $creditContractId, \OperationHistoryFilter $operationHistoryFilter, $dateFrom, $dateTo, \Attributes $attr)
  {
    $this->send_fetchCreditOperationHistoryItemsWithFromToDate($token, $creditContractId, $operationHistoryFilter, $dateFrom, $dateTo, $attr);
    return $this->recv_fetchCreditOperationHistoryItemsWithFromToDate();
  }

  public function send_fetchCreditOperationHistoryItemsWithFromToDate($token, $creditContractId, \OperationHistoryFilter $operationHistoryFilter, $dateFrom, $dateTo, \Attributes $attr)
  {
    $args = new \ContractOperationHistoryService_fetchCreditOperationHistoryItemsWithFromToDate_args();
    $args->token = $token;
    $args->creditContractId = $creditContractId;
    $args->operationHistoryFilter = $operationHistoryFilter;
    $args->dateFrom = $dateFrom;
    $args->dateTo = $dateTo;
    $args->attr = $attr;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'fetchCreditOperationHistoryItemsWithFromToDate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('fetchCreditOperationHistoryItemsWithFromToDate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_fetchCreditOperationHistoryItemsWithFromToDate()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ContractOperationHistoryService_fetchCreditOperationHistoryItemsWithFromToDate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ContractOperationHistoryService_fetchCreditOperationHistoryItemsWithFromToDate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->requestError !== null) {
      throw $result->requestError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->backendException !== null) {
      throw $result->backendException;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("fetchCreditOperationHistoryItemsWithFromToDate failed: unknown result");
  }

  public function fetchCreditOperationHistoryItemsWithLastDays($token, $creditContractId, \OperationHistoryFilter $operationHistoryFilter, $lastDays, \Attributes $attr)
  {
    $this->send_fetchCreditOperationHistoryItemsWithLastDays($token, $creditContractId, $operationHistoryFilter, $lastDays, $attr);
    return $this->recv_fetchCreditOperationHistoryItemsWithLastDays();
  }

  public function send_fetchCreditOperationHistoryItemsWithLastDays($token, $creditContractId, \OperationHistoryFilter $operationHistoryFilter, $lastDays, \Attributes $attr)
  {
    $args = new \ContractOperationHistoryService_fetchCreditOperationHistoryItemsWithLastDays_args();
    $args->token = $token;
    $args->creditContractId = $creditContractId;
    $args->operationHistoryFilter = $operationHistoryFilter;
    $args->lastDays = $lastDays;
    $args->attr = $attr;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'fetchCreditOperationHistoryItemsWithLastDays', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('fetchCreditOperationHistoryItemsWithLastDays', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_fetchCreditOperationHistoryItemsWithLastDays()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ContractOperationHistoryService_fetchCreditOperationHistoryItemsWithLastDays_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ContractOperationHistoryService_fetchCreditOperationHistoryItemsWithLastDays_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->requestError !== null) {
      throw $result->requestError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->backendException !== null) {
      throw $result->backendException;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("fetchCreditOperationHistoryItemsWithLastDays failed: unknown result");
  }

  public function fetchReportCardContractOperationHistoryItemsWithFromToDate($token, $cardContractId, \OperationHistoryFilter $operationHistoryFilter, $dateFrom, $dateTo, \Attributes $attr, \ReportOptions $options)
  {
    $this->send_fetchReportCardContractOperationHistoryItemsWithFromToDate($token, $cardContractId, $operationHistoryFilter, $dateFrom, $dateTo, $attr, $options);
    return $this->recv_fetchReportCardContractOperationHistoryItemsWithFromToDate();
  }

  public function send_fetchReportCardContractOperationHistoryItemsWithFromToDate($token, $cardContractId, \OperationHistoryFilter $operationHistoryFilter, $dateFrom, $dateTo, \Attributes $attr, \ReportOptions $options)
  {
    $args = new \ContractOperationHistoryService_fetchReportCardContractOperationHistoryItemsWithFromToDate_args();
    $args->token = $token;
    $args->cardContractId = $cardContractId;
    $args->operationHistoryFilter = $operationHistoryFilter;
    $args->dateFrom = $dateFrom;
    $args->dateTo = $dateTo;
    $args->attr = $attr;
    $args->options = $options;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'fetchReportCardContractOperationHistoryItemsWithFromToDate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('fetchReportCardContractOperationHistoryItemsWithFromToDate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_fetchReportCardContractOperationHistoryItemsWithFromToDate()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ContractOperationHistoryService_fetchReportCardContractOperationHistoryItemsWithFromToDate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ContractOperationHistoryService_fetchReportCardContractOperationHistoryItemsWithFromToDate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->requestError !== null) {
      throw $result->requestError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->backendException !== null) {
      throw $result->backendException;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("fetchReportCardContractOperationHistoryItemsWithFromToDate failed: unknown result");
  }

  public function fetchReportCardContractOperationHistoryItemsWithLastDays($token, $cardContractId, \OperationHistoryFilter $operationHistoryFilter, $lastDays, \Attributes $attr, \ReportOptions $options)
  {
    $this->send_fetchReportCardContractOperationHistoryItemsWithLastDays($token, $cardContractId, $operationHistoryFilter, $lastDays, $attr, $options);
    return $this->recv_fetchReportCardContractOperationHistoryItemsWithLastDays();
  }

  public function send_fetchReportCardContractOperationHistoryItemsWithLastDays($token, $cardContractId, \OperationHistoryFilter $operationHistoryFilter, $lastDays, \Attributes $attr, \ReportOptions $options)
  {
    $args = new \ContractOperationHistoryService_fetchReportCardContractOperationHistoryItemsWithLastDays_args();
    $args->token = $token;
    $args->cardContractId = $cardContractId;
    $args->operationHistoryFilter = $operationHistoryFilter;
    $args->lastDays = $lastDays;
    $args->attr = $attr;
    $args->options = $options;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'fetchReportCardContractOperationHistoryItemsWithLastDays', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('fetchReportCardContractOperationHistoryItemsWithLastDays', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_fetchReportCardContractOperationHistoryItemsWithLastDays()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ContractOperationHistoryService_fetchReportCardContractOperationHistoryItemsWithLastDays_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ContractOperationHistoryService_fetchReportCardContractOperationHistoryItemsWithLastDays_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->requestError !== null) {
      throw $result->requestError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->backendException !== null) {
      throw $result->backendException;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("fetchReportCardContractOperationHistoryItemsWithLastDays failed: unknown result");
  }

  public function fetchReportAccountOperationHistoryItemsWithFromToDate($token, $accountContractId, \OperationHistoryFilter $operationHistoryFilter, $dateFrom, $dateTo, \Attributes $attr, \ReportOptions $options)
  {
    $this->send_fetchReportAccountOperationHistoryItemsWithFromToDate($token, $accountContractId, $operationHistoryFilter, $dateFrom, $dateTo, $attr, $options);
    return $this->recv_fetchReportAccountOperationHistoryItemsWithFromToDate();
  }

  public function send_fetchReportAccountOperationHistoryItemsWithFromToDate($token, $accountContractId, \OperationHistoryFilter $operationHistoryFilter, $dateFrom, $dateTo, \Attributes $attr, \ReportOptions $options)
  {
    $args = new \ContractOperationHistoryService_fetchReportAccountOperationHistoryItemsWithFromToDate_args();
    $args->token = $token;
    $args->accountContractId = $accountContractId;
    $args->operationHistoryFilter = $operationHistoryFilter;
    $args->dateFrom = $dateFrom;
    $args->dateTo = $dateTo;
    $args->attr = $attr;
    $args->options = $options;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'fetchReportAccountOperationHistoryItemsWithFromToDate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('fetchReportAccountOperationHistoryItemsWithFromToDate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_fetchReportAccountOperationHistoryItemsWithFromToDate()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ContractOperationHistoryService_fetchReportAccountOperationHistoryItemsWithFromToDate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ContractOperationHistoryService_fetchReportAccountOperationHistoryItemsWithFromToDate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->requestError !== null) {
      throw $result->requestError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->backendException !== null) {
      throw $result->backendException;
    }
    throw new \Exception("fetchReportAccountOperationHistoryItemsWithFromToDate failed: unknown result");
  }

  public function fetchReportAccountOperationHistoryItemsWithLastDays($token, $accountContractId, \OperationHistoryFilter $operationHistoryFilter, $lastDays, \Attributes $attr, \ReportOptions $options)
  {
    $this->send_fetchReportAccountOperationHistoryItemsWithLastDays($token, $accountContractId, $operationHistoryFilter, $lastDays, $attr, $options);
    return $this->recv_fetchReportAccountOperationHistoryItemsWithLastDays();
  }

  public function send_fetchReportAccountOperationHistoryItemsWithLastDays($token, $accountContractId, \OperationHistoryFilter $operationHistoryFilter, $lastDays, \Attributes $attr, \ReportOptions $options)
  {
    $args = new \ContractOperationHistoryService_fetchReportAccountOperationHistoryItemsWithLastDays_args();
    $args->token = $token;
    $args->accountContractId = $accountContractId;
    $args->operationHistoryFilter = $operationHistoryFilter;
    $args->lastDays = $lastDays;
    $args->attr = $attr;
    $args->options = $options;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'fetchReportAccountOperationHistoryItemsWithLastDays', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('fetchReportAccountOperationHistoryItemsWithLastDays', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_fetchReportAccountOperationHistoryItemsWithLastDays()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ContractOperationHistoryService_fetchReportAccountOperationHistoryItemsWithLastDays_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ContractOperationHistoryService_fetchReportAccountOperationHistoryItemsWithLastDays_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->requestError !== null) {
      throw $result->requestError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->backendException !== null) {
      throw $result->backendException;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("fetchReportAccountOperationHistoryItemsWithLastDays failed: unknown result");
  }

  public function fetchReportDepositOperationHistoryItemsWithFromToDate($token, $depositContractId, \OperationHistoryFilter $operationHistoryFilter, $dateFrom, $dateTo, \Attributes $attr, \ReportOptions $options)
  {
    $this->send_fetchReportDepositOperationHistoryItemsWithFromToDate($token, $depositContractId, $operationHistoryFilter, $dateFrom, $dateTo, $attr, $options);
    return $this->recv_fetchReportDepositOperationHistoryItemsWithFromToDate();
  }

  public function send_fetchReportDepositOperationHistoryItemsWithFromToDate($token, $depositContractId, \OperationHistoryFilter $operationHistoryFilter, $dateFrom, $dateTo, \Attributes $attr, \ReportOptions $options)
  {
    $args = new \ContractOperationHistoryService_fetchReportDepositOperationHistoryItemsWithFromToDate_args();
    $args->token = $token;
    $args->depositContractId = $depositContractId;
    $args->operationHistoryFilter = $operationHistoryFilter;
    $args->dateFrom = $dateFrom;
    $args->dateTo = $dateTo;
    $args->attr = $attr;
    $args->options = $options;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'fetchReportDepositOperationHistoryItemsWithFromToDate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('fetchReportDepositOperationHistoryItemsWithFromToDate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_fetchReportDepositOperationHistoryItemsWithFromToDate()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ContractOperationHistoryService_fetchReportDepositOperationHistoryItemsWithFromToDate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ContractOperationHistoryService_fetchReportDepositOperationHistoryItemsWithFromToDate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->requestError !== null) {
      throw $result->requestError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->backendException !== null) {
      throw $result->backendException;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("fetchReportDepositOperationHistoryItemsWithFromToDate failed: unknown result");
  }

  public function fetchReportDepositOperationHistoryItemsWithLastDays($token, $depositContractId, \OperationHistoryFilter $operationHistoryFilter, $lastDays, \Attributes $attr, \ReportOptions $options)
  {
    $this->send_fetchReportDepositOperationHistoryItemsWithLastDays($token, $depositContractId, $operationHistoryFilter, $lastDays, $attr, $options);
    return $this->recv_fetchReportDepositOperationHistoryItemsWithLastDays();
  }

  public function send_fetchReportDepositOperationHistoryItemsWithLastDays($token, $depositContractId, \OperationHistoryFilter $operationHistoryFilter, $lastDays, \Attributes $attr, \ReportOptions $options)
  {
    $args = new \ContractOperationHistoryService_fetchReportDepositOperationHistoryItemsWithLastDays_args();
    $args->token = $token;
    $args->depositContractId = $depositContractId;
    $args->operationHistoryFilter = $operationHistoryFilter;
    $args->lastDays = $lastDays;
    $args->attr = $attr;
    $args->options = $options;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'fetchReportDepositOperationHistoryItemsWithLastDays', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('fetchReportDepositOperationHistoryItemsWithLastDays', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_fetchReportDepositOperationHistoryItemsWithLastDays()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ContractOperationHistoryService_fetchReportDepositOperationHistoryItemsWithLastDays_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ContractOperationHistoryService_fetchReportDepositOperationHistoryItemsWithLastDays_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->requestError !== null) {
      throw $result->requestError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->backendException !== null) {
      throw $result->backendException;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("fetchReportDepositOperationHistoryItemsWithLastDays failed: unknown result");
  }

  public function fetchReportCreditOperationHistoryItemsWithFromToDate($token, $creditContractId, \OperationHistoryFilter $operationHistoryFilter, $dateFrom, $dateTo, \Attributes $attr, \ReportOptions $options)
  {
    $this->send_fetchReportCreditOperationHistoryItemsWithFromToDate($token, $creditContractId, $operationHistoryFilter, $dateFrom, $dateTo, $attr, $options);
    return $this->recv_fetchReportCreditOperationHistoryItemsWithFromToDate();
  }

  public function send_fetchReportCreditOperationHistoryItemsWithFromToDate($token, $creditContractId, \OperationHistoryFilter $operationHistoryFilter, $dateFrom, $dateTo, \Attributes $attr, \ReportOptions $options)
  {
    $args = new \ContractOperationHistoryService_fetchReportCreditOperationHistoryItemsWithFromToDate_args();
    $args->token = $token;
    $args->creditContractId = $creditContractId;
    $args->operationHistoryFilter = $operationHistoryFilter;
    $args->dateFrom = $dateFrom;
    $args->dateTo = $dateTo;
    $args->attr = $attr;
    $args->options = $options;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'fetchReportCreditOperationHistoryItemsWithFromToDate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('fetchReportCreditOperationHistoryItemsWithFromToDate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_fetchReportCreditOperationHistoryItemsWithFromToDate()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ContractOperationHistoryService_fetchReportCreditOperationHistoryItemsWithFromToDate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ContractOperationHistoryService_fetchReportCreditOperationHistoryItemsWithFromToDate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->requestError !== null) {
      throw $result->requestError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->backendException !== null) {
      throw $result->backendException;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("fetchReportCreditOperationHistoryItemsWithFromToDate failed: unknown result");
  }

  public function fetchReportCreditOperationHistoryItemsWithLastDays($token, $creditContractId, \OperationHistoryFilter $operationHistoryFilter, $lastDays, \Attributes $attr, \ReportOptions $options)
  {
    $this->send_fetchReportCreditOperationHistoryItemsWithLastDays($token, $creditContractId, $operationHistoryFilter, $lastDays, $attr, $options);
    return $this->recv_fetchReportCreditOperationHistoryItemsWithLastDays();
  }

  public function send_fetchReportCreditOperationHistoryItemsWithLastDays($token, $creditContractId, \OperationHistoryFilter $operationHistoryFilter, $lastDays, \Attributes $attr, \ReportOptions $options)
  {
    $args = new \ContractOperationHistoryService_fetchReportCreditOperationHistoryItemsWithLastDays_args();
    $args->token = $token;
    $args->creditContractId = $creditContractId;
    $args->operationHistoryFilter = $operationHistoryFilter;
    $args->lastDays = $lastDays;
    $args->attr = $attr;
    $args->options = $options;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'fetchReportCreditOperationHistoryItemsWithLastDays', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('fetchReportCreditOperationHistoryItemsWithLastDays', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_fetchReportCreditOperationHistoryItemsWithLastDays()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ContractOperationHistoryService_fetchReportCreditOperationHistoryItemsWithLastDays_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ContractOperationHistoryService_fetchReportCreditOperationHistoryItemsWithLastDays_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->requestError !== null) {
      throw $result->requestError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->backendException !== null) {
      throw $result->backendException;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("fetchReportCreditOperationHistoryItemsWithLastDays failed: unknown result");
  }

  public function fetchOperationReceipt($token, $operationId, \ReportOptions $options)
  {
    $this->send_fetchOperationReceipt($token, $operationId, $options);
    return $this->recv_fetchOperationReceipt();
  }

  public function send_fetchOperationReceipt($token, $operationId, \ReportOptions $options)
  {
    $args = new \ContractOperationHistoryService_fetchOperationReceipt_args();
    $args->token = $token;
    $args->operationId = $operationId;
    $args->options = $options;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'fetchOperationReceipt', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('fetchOperationReceipt', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_fetchOperationReceipt()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ContractOperationHistoryService_fetchOperationReceipt_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ContractOperationHistoryService_fetchOperationReceipt_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sessionError !== null) {
      throw $result->sessionError;
    }
    if ($result->requestError !== null) {
      throw $result->requestError;
    }
    if ($result->deniedOperationError !== null) {
      throw $result->deniedOperationError;
    }
    if ($result->extendedAuthenticationRequired !== null) {
      throw $result->extendedAuthenticationRequired;
    }
    if ($result->serverError !== null) {
      throw $result->serverError;
    }
    if ($result->backendException !== null) {
      throw $result->backendException;
    }
    if ($result->integrationError !== null) {
      throw $result->integrationError;
    }
    throw new \Exception("fetchOperationReceipt failed: unknown result");
  }

}


// HELPER FUNCTIONS AND STRUCTURES

class ContractOperationHistoryService_fetchCardContractOperationHistoryItemsWithFromToDate_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $cardContractId = null;
  /**
   * @var \OperationHistoryFilter
   */
  public $operationHistoryFilter = null;
  /**
   * @var int
   */
  public $dateFrom = null;
  /**
   * @var int
   */
  public $dateTo = null;
  /**
   * In the case that details need received only for one card, then to the attributes must be added pairs kay / value in the next manear: <br>
   * key=cardId <br>
   * value=<Id>, id of card which was received previusly.
   * 
   * @var \Attributes
   */
  public $attr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cardContractId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'operationHistoryFilter',
          'type' => TType::STRUCT,
          'class' => '\OperationHistoryFilter',
          ),
        4 => array(
          'var' => 'dateFrom',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'dateTo',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'attr',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['cardContractId'])) {
        $this->cardContractId = $vals['cardContractId'];
      }
      if (isset($vals['operationHistoryFilter'])) {
        $this->operationHistoryFilter = $vals['operationHistoryFilter'];
      }
      if (isset($vals['dateFrom'])) {
        $this->dateFrom = $vals['dateFrom'];
      }
      if (isset($vals['dateTo'])) {
        $this->dateTo = $vals['dateTo'];
      }
      if (isset($vals['attr'])) {
        $this->attr = $vals['attr'];
      }
    }
  }

  public function getName() {
    return 'ContractOperationHistoryService_fetchCardContractOperationHistoryItemsWithFromToDate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cardContractId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->operationHistoryFilter = new \OperationHistoryFilter();
            $xfer += $this->operationHistoryFilter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dateFrom);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dateTo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->attr = new \Attributes();
            $xfer += $this->attr->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractOperationHistoryService_fetchCardContractOperationHistoryItemsWithFromToDate_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardContractId !== null) {
      $xfer += $output->writeFieldBegin('cardContractId', TType::STRING, 2);
      $xfer += $output->writeString($this->cardContractId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operationHistoryFilter !== null) {
      if (!is_object($this->operationHistoryFilter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('operationHistoryFilter', TType::STRUCT, 3);
      $xfer += $this->operationHistoryFilter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateFrom !== null) {
      $xfer += $output->writeFieldBegin('dateFrom', TType::I64, 4);
      $xfer += $output->writeI64($this->dateFrom);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateTo !== null) {
      $xfer += $output->writeFieldBegin('dateTo', TType::I64, 5);
      $xfer += $output->writeI64($this->dateTo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attr !== null) {
      if (!is_object($this->attr)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attr', TType::STRUCT, 6);
      $xfer += $this->attr->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractOperationHistoryService_fetchCardContractOperationHistoryItemsWithFromToDate_result {
  static $_TSPEC;

  /**
   * @var \CardContractOperationHistoryItem[]
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \PeriodIsLargeException
   */
  public $requestError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * client_not_found - не найден клиент <br>
   * contract_not_found - не найден контракт <br>
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * @var \BackendValidationException
   */
  public $backendException = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\CardContractOperationHistoryItem',
            ),
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'requestError',
          'type' => TType::STRUCT,
          'class' => '\PeriodIsLargeException',
          ),
        3 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        4 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'backendException',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        7 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['requestError'])) {
        $this->requestError = $vals['requestError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['backendException'])) {
        $this->backendException = $vals['backendException'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'ContractOperationHistoryService_fetchCardContractOperationHistoryItemsWithFromToDate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size255 = 0;
            $_etype258 = 0;
            $xfer += $input->readListBegin($_etype258, $_size255);
            for ($_i259 = 0; $_i259 < $_size255; ++$_i259)
            {
              $elem260 = null;
              $elem260 = new \CardContractOperationHistoryItem();
              $xfer += $elem260->read($input);
              $this->success []= $elem260;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->requestError = new \PeriodIsLargeException();
            $xfer += $this->requestError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->backendException = new \BackendValidationException();
            $xfer += $this->backendException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractOperationHistoryService_fetchCardContractOperationHistoryItemsWithFromToDate_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter261)
          {
            $xfer += $iter261->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestError !== null) {
      $xfer += $output->writeFieldBegin('requestError', TType::STRUCT, 2);
      $xfer += $this->requestError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 3);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 4);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendException !== null) {
      $xfer += $output->writeFieldBegin('backendException', TType::STRUCT, 6);
      $xfer += $this->backendException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 7);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractOperationHistoryService_fetchCardContractOperationHistoryItemsWithLastDays_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $cardContractId = null;
  /**
   * @var \OperationHistoryFilter
   */
  public $operationHistoryFilter = null;
  /**
   * @var int
   */
  public $lastDays = null;
  /**
   * In the case that details need received only for one card or a specific list, then to the attributes must be added pairs kay / value in the next manear: <br>
   * key=cardId<sequence>, for example cardId0, cardId1 etc/. Key must start with "cardId" and must be unique <br>
   * value=<Id>, id of card which was received previusly.
   * 
   * @var \Attributes
   */
  public $attr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cardContractId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'operationHistoryFilter',
          'type' => TType::STRUCT,
          'class' => '\OperationHistoryFilter',
          ),
        4 => array(
          'var' => 'lastDays',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'attr',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['cardContractId'])) {
        $this->cardContractId = $vals['cardContractId'];
      }
      if (isset($vals['operationHistoryFilter'])) {
        $this->operationHistoryFilter = $vals['operationHistoryFilter'];
      }
      if (isset($vals['lastDays'])) {
        $this->lastDays = $vals['lastDays'];
      }
      if (isset($vals['attr'])) {
        $this->attr = $vals['attr'];
      }
    }
  }

  public function getName() {
    return 'ContractOperationHistoryService_fetchCardContractOperationHistoryItemsWithLastDays_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cardContractId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->operationHistoryFilter = new \OperationHistoryFilter();
            $xfer += $this->operationHistoryFilter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->lastDays);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->attr = new \Attributes();
            $xfer += $this->attr->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractOperationHistoryService_fetchCardContractOperationHistoryItemsWithLastDays_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardContractId !== null) {
      $xfer += $output->writeFieldBegin('cardContractId', TType::STRING, 2);
      $xfer += $output->writeString($this->cardContractId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operationHistoryFilter !== null) {
      if (!is_object($this->operationHistoryFilter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('operationHistoryFilter', TType::STRUCT, 3);
      $xfer += $this->operationHistoryFilter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastDays !== null) {
      $xfer += $output->writeFieldBegin('lastDays', TType::I64, 4);
      $xfer += $output->writeI64($this->lastDays);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attr !== null) {
      if (!is_object($this->attr)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attr', TType::STRUCT, 5);
      $xfer += $this->attr->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractOperationHistoryService_fetchCardContractOperationHistoryItemsWithLastDays_result {
  static $_TSPEC;

  /**
   * @var \CardContractOperationHistoryItem[]
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \PeriodIsLargeException
   */
  public $requestError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * client_not_found - не найден клиент <br>
   * contract_not_found - не найден контракт <br>
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * @var \BackendValidationException
   */
  public $backendException = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\CardContractOperationHistoryItem',
            ),
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'requestError',
          'type' => TType::STRUCT,
          'class' => '\PeriodIsLargeException',
          ),
        3 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        4 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'backendException',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        7 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['requestError'])) {
        $this->requestError = $vals['requestError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['backendException'])) {
        $this->backendException = $vals['backendException'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'ContractOperationHistoryService_fetchCardContractOperationHistoryItemsWithLastDays_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size262 = 0;
            $_etype265 = 0;
            $xfer += $input->readListBegin($_etype265, $_size262);
            for ($_i266 = 0; $_i266 < $_size262; ++$_i266)
            {
              $elem267 = null;
              $elem267 = new \CardContractOperationHistoryItem();
              $xfer += $elem267->read($input);
              $this->success []= $elem267;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->requestError = new \PeriodIsLargeException();
            $xfer += $this->requestError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->backendException = new \BackendValidationException();
            $xfer += $this->backendException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractOperationHistoryService_fetchCardContractOperationHistoryItemsWithLastDays_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter268)
          {
            $xfer += $iter268->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestError !== null) {
      $xfer += $output->writeFieldBegin('requestError', TType::STRUCT, 2);
      $xfer += $this->requestError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 3);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 4);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendException !== null) {
      $xfer += $output->writeFieldBegin('backendException', TType::STRUCT, 6);
      $xfer += $this->backendException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 7);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractOperationHistoryService_fetchAccountOperationHistoryItemsWithFromToDate_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $accountContractId = null;
  /**
   * @var \OperationHistoryFilter
   */
  public $operationHistoryFilter = null;
  /**
   * @var int
   */
  public $dateFrom = null;
  /**
   * @var int
   */
  public $dateTo = null;
  /**
   * @var \Attributes
   */
  public $attr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'accountContractId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'operationHistoryFilter',
          'type' => TType::STRUCT,
          'class' => '\OperationHistoryFilter',
          ),
        4 => array(
          'var' => 'dateFrom',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'dateTo',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'attr',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['accountContractId'])) {
        $this->accountContractId = $vals['accountContractId'];
      }
      if (isset($vals['operationHistoryFilter'])) {
        $this->operationHistoryFilter = $vals['operationHistoryFilter'];
      }
      if (isset($vals['dateFrom'])) {
        $this->dateFrom = $vals['dateFrom'];
      }
      if (isset($vals['dateTo'])) {
        $this->dateTo = $vals['dateTo'];
      }
      if (isset($vals['attr'])) {
        $this->attr = $vals['attr'];
      }
    }
  }

  public function getName() {
    return 'ContractOperationHistoryService_fetchAccountOperationHistoryItemsWithFromToDate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accountContractId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->operationHistoryFilter = new \OperationHistoryFilter();
            $xfer += $this->operationHistoryFilter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dateFrom);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dateTo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->attr = new \Attributes();
            $xfer += $this->attr->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractOperationHistoryService_fetchAccountOperationHistoryItemsWithFromToDate_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accountContractId !== null) {
      $xfer += $output->writeFieldBegin('accountContractId', TType::STRING, 2);
      $xfer += $output->writeString($this->accountContractId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operationHistoryFilter !== null) {
      if (!is_object($this->operationHistoryFilter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('operationHistoryFilter', TType::STRUCT, 3);
      $xfer += $this->operationHistoryFilter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateFrom !== null) {
      $xfer += $output->writeFieldBegin('dateFrom', TType::I64, 4);
      $xfer += $output->writeI64($this->dateFrom);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateTo !== null) {
      $xfer += $output->writeFieldBegin('dateTo', TType::I64, 5);
      $xfer += $output->writeI64($this->dateTo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attr !== null) {
      if (!is_object($this->attr)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attr', TType::STRUCT, 6);
      $xfer += $this->attr->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractOperationHistoryService_fetchAccountOperationHistoryItemsWithFromToDate_result {
  static $_TSPEC;

  /**
   * @var \AccountContractOperationHistoryItem[]
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \PeriodIsLargeException
   */
  public $requestError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * client_not_found - не найден клиент
   * contract_not_found - не найден контракт
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * 
   * @var \BackendValidationException
   */
  public $backendException = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\AccountContractOperationHistoryItem',
            ),
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'requestError',
          'type' => TType::STRUCT,
          'class' => '\PeriodIsLargeException',
          ),
        3 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        4 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'backendException',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        7 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['requestError'])) {
        $this->requestError = $vals['requestError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['backendException'])) {
        $this->backendException = $vals['backendException'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'ContractOperationHistoryService_fetchAccountOperationHistoryItemsWithFromToDate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size269 = 0;
            $_etype272 = 0;
            $xfer += $input->readListBegin($_etype272, $_size269);
            for ($_i273 = 0; $_i273 < $_size269; ++$_i273)
            {
              $elem274 = null;
              $elem274 = new \AccountContractOperationHistoryItem();
              $xfer += $elem274->read($input);
              $this->success []= $elem274;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->requestError = new \PeriodIsLargeException();
            $xfer += $this->requestError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->backendException = new \BackendValidationException();
            $xfer += $this->backendException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractOperationHistoryService_fetchAccountOperationHistoryItemsWithFromToDate_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter275)
          {
            $xfer += $iter275->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestError !== null) {
      $xfer += $output->writeFieldBegin('requestError', TType::STRUCT, 2);
      $xfer += $this->requestError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 3);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 4);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendException !== null) {
      $xfer += $output->writeFieldBegin('backendException', TType::STRUCT, 6);
      $xfer += $this->backendException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 7);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractOperationHistoryService_fetchAccountOperationHistoryItemsWithLastDays_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $accountContractId = null;
  /**
   * @var \OperationHistoryFilter
   */
  public $operationHistoryFilter = null;
  /**
   * @var int
   */
  public $lastDays = null;
  /**
   * @var \Attributes
   */
  public $attr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'accountContractId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'operationHistoryFilter',
          'type' => TType::STRUCT,
          'class' => '\OperationHistoryFilter',
          ),
        4 => array(
          'var' => 'lastDays',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'attr',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['accountContractId'])) {
        $this->accountContractId = $vals['accountContractId'];
      }
      if (isset($vals['operationHistoryFilter'])) {
        $this->operationHistoryFilter = $vals['operationHistoryFilter'];
      }
      if (isset($vals['lastDays'])) {
        $this->lastDays = $vals['lastDays'];
      }
      if (isset($vals['attr'])) {
        $this->attr = $vals['attr'];
      }
    }
  }

  public function getName() {
    return 'ContractOperationHistoryService_fetchAccountOperationHistoryItemsWithLastDays_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accountContractId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->operationHistoryFilter = new \OperationHistoryFilter();
            $xfer += $this->operationHistoryFilter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->lastDays);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->attr = new \Attributes();
            $xfer += $this->attr->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractOperationHistoryService_fetchAccountOperationHistoryItemsWithLastDays_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accountContractId !== null) {
      $xfer += $output->writeFieldBegin('accountContractId', TType::STRING, 2);
      $xfer += $output->writeString($this->accountContractId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operationHistoryFilter !== null) {
      if (!is_object($this->operationHistoryFilter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('operationHistoryFilter', TType::STRUCT, 3);
      $xfer += $this->operationHistoryFilter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastDays !== null) {
      $xfer += $output->writeFieldBegin('lastDays', TType::I64, 4);
      $xfer += $output->writeI64($this->lastDays);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attr !== null) {
      if (!is_object($this->attr)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attr', TType::STRUCT, 5);
      $xfer += $this->attr->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractOperationHistoryService_fetchAccountOperationHistoryItemsWithLastDays_result {
  static $_TSPEC;

  /**
   * @var \AccountContractOperationHistoryItem[]
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \PeriodIsLargeException
   */
  public $requestError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * client_not_found - не найден клиент
   * contract_not_found - не найден контракт
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * 
   * @var \BackendValidationException
   */
  public $backendException = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\AccountContractOperationHistoryItem',
            ),
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'requestError',
          'type' => TType::STRUCT,
          'class' => '\PeriodIsLargeException',
          ),
        3 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        4 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'backendException',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        7 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['requestError'])) {
        $this->requestError = $vals['requestError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['backendException'])) {
        $this->backendException = $vals['backendException'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'ContractOperationHistoryService_fetchAccountOperationHistoryItemsWithLastDays_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size276 = 0;
            $_etype279 = 0;
            $xfer += $input->readListBegin($_etype279, $_size276);
            for ($_i280 = 0; $_i280 < $_size276; ++$_i280)
            {
              $elem281 = null;
              $elem281 = new \AccountContractOperationHistoryItem();
              $xfer += $elem281->read($input);
              $this->success []= $elem281;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->requestError = new \PeriodIsLargeException();
            $xfer += $this->requestError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->backendException = new \BackendValidationException();
            $xfer += $this->backendException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractOperationHistoryService_fetchAccountOperationHistoryItemsWithLastDays_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter282)
          {
            $xfer += $iter282->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestError !== null) {
      $xfer += $output->writeFieldBegin('requestError', TType::STRUCT, 2);
      $xfer += $this->requestError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 3);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 4);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendException !== null) {
      $xfer += $output->writeFieldBegin('backendException', TType::STRUCT, 6);
      $xfer += $this->backendException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 7);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractOperationHistoryService_fetchDepositOperationHistoryItemsWithFromToDate_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $depositContractId = null;
  /**
   * @var \OperationHistoryFilter
   */
  public $operationHistoryFilter = null;
  /**
   * @var int
   */
  public $dateFrom = null;
  /**
   * @var int
   */
  public $dateTo = null;
  /**
   * @var \Attributes
   */
  public $attr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'depositContractId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'operationHistoryFilter',
          'type' => TType::STRUCT,
          'class' => '\OperationHistoryFilter',
          ),
        4 => array(
          'var' => 'dateFrom',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'dateTo',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'attr',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['depositContractId'])) {
        $this->depositContractId = $vals['depositContractId'];
      }
      if (isset($vals['operationHistoryFilter'])) {
        $this->operationHistoryFilter = $vals['operationHistoryFilter'];
      }
      if (isset($vals['dateFrom'])) {
        $this->dateFrom = $vals['dateFrom'];
      }
      if (isset($vals['dateTo'])) {
        $this->dateTo = $vals['dateTo'];
      }
      if (isset($vals['attr'])) {
        $this->attr = $vals['attr'];
      }
    }
  }

  public function getName() {
    return 'ContractOperationHistoryService_fetchDepositOperationHistoryItemsWithFromToDate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->depositContractId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->operationHistoryFilter = new \OperationHistoryFilter();
            $xfer += $this->operationHistoryFilter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dateFrom);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dateTo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->attr = new \Attributes();
            $xfer += $this->attr->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractOperationHistoryService_fetchDepositOperationHistoryItemsWithFromToDate_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->depositContractId !== null) {
      $xfer += $output->writeFieldBegin('depositContractId', TType::STRING, 2);
      $xfer += $output->writeString($this->depositContractId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operationHistoryFilter !== null) {
      if (!is_object($this->operationHistoryFilter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('operationHistoryFilter', TType::STRUCT, 3);
      $xfer += $this->operationHistoryFilter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateFrom !== null) {
      $xfer += $output->writeFieldBegin('dateFrom', TType::I64, 4);
      $xfer += $output->writeI64($this->dateFrom);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateTo !== null) {
      $xfer += $output->writeFieldBegin('dateTo', TType::I64, 5);
      $xfer += $output->writeI64($this->dateTo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attr !== null) {
      if (!is_object($this->attr)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attr', TType::STRUCT, 6);
      $xfer += $this->attr->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractOperationHistoryService_fetchDepositOperationHistoryItemsWithFromToDate_result {
  static $_TSPEC;

  /**
   * @var \DepositContractOperationHistoryItem[]
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \PeriodIsLargeException
   */
  public $requestError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * client_not_found - не найден клиент
   * contract_not_found - не найден контракт
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * 
   * @var \BackendValidationException
   */
  public $backendException = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\DepositContractOperationHistoryItem',
            ),
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'requestError',
          'type' => TType::STRUCT,
          'class' => '\PeriodIsLargeException',
          ),
        3 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        4 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'backendException',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        7 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['requestError'])) {
        $this->requestError = $vals['requestError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['backendException'])) {
        $this->backendException = $vals['backendException'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'ContractOperationHistoryService_fetchDepositOperationHistoryItemsWithFromToDate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size283 = 0;
            $_etype286 = 0;
            $xfer += $input->readListBegin($_etype286, $_size283);
            for ($_i287 = 0; $_i287 < $_size283; ++$_i287)
            {
              $elem288 = null;
              $elem288 = new \DepositContractOperationHistoryItem();
              $xfer += $elem288->read($input);
              $this->success []= $elem288;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->requestError = new \PeriodIsLargeException();
            $xfer += $this->requestError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->backendException = new \BackendValidationException();
            $xfer += $this->backendException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractOperationHistoryService_fetchDepositOperationHistoryItemsWithFromToDate_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter289)
          {
            $xfer += $iter289->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestError !== null) {
      $xfer += $output->writeFieldBegin('requestError', TType::STRUCT, 2);
      $xfer += $this->requestError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 3);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 4);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendException !== null) {
      $xfer += $output->writeFieldBegin('backendException', TType::STRUCT, 6);
      $xfer += $this->backendException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 7);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractOperationHistoryService_fetchDepositOperationHistoryItemsWithLastDays_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $depositContractId = null;
  /**
   * @var \OperationHistoryFilter
   */
  public $operationHistoryFilter = null;
  /**
   * @var int
   */
  public $lastDays = null;
  /**
   * @var \Attributes
   */
  public $attr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'depositContractId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'operationHistoryFilter',
          'type' => TType::STRUCT,
          'class' => '\OperationHistoryFilter',
          ),
        4 => array(
          'var' => 'lastDays',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'attr',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['depositContractId'])) {
        $this->depositContractId = $vals['depositContractId'];
      }
      if (isset($vals['operationHistoryFilter'])) {
        $this->operationHistoryFilter = $vals['operationHistoryFilter'];
      }
      if (isset($vals['lastDays'])) {
        $this->lastDays = $vals['lastDays'];
      }
      if (isset($vals['attr'])) {
        $this->attr = $vals['attr'];
      }
    }
  }

  public function getName() {
    return 'ContractOperationHistoryService_fetchDepositOperationHistoryItemsWithLastDays_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->depositContractId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->operationHistoryFilter = new \OperationHistoryFilter();
            $xfer += $this->operationHistoryFilter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->lastDays);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->attr = new \Attributes();
            $xfer += $this->attr->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractOperationHistoryService_fetchDepositOperationHistoryItemsWithLastDays_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->depositContractId !== null) {
      $xfer += $output->writeFieldBegin('depositContractId', TType::STRING, 2);
      $xfer += $output->writeString($this->depositContractId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operationHistoryFilter !== null) {
      if (!is_object($this->operationHistoryFilter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('operationHistoryFilter', TType::STRUCT, 3);
      $xfer += $this->operationHistoryFilter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastDays !== null) {
      $xfer += $output->writeFieldBegin('lastDays', TType::I64, 4);
      $xfer += $output->writeI64($this->lastDays);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attr !== null) {
      if (!is_object($this->attr)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attr', TType::STRUCT, 5);
      $xfer += $this->attr->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractOperationHistoryService_fetchDepositOperationHistoryItemsWithLastDays_result {
  static $_TSPEC;

  /**
   * @var \DepositContractOperationHistoryItem[]
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \PeriodIsLargeException
   */
  public $requestError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * client_not_found - не найден клиент
   * contract_not_found - не найден контракт
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * 
   * @var \BackendValidationException
   */
  public $backendException = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\DepositContractOperationHistoryItem',
            ),
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'requestError',
          'type' => TType::STRUCT,
          'class' => '\PeriodIsLargeException',
          ),
        3 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        4 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'backendException',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        7 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['requestError'])) {
        $this->requestError = $vals['requestError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['backendException'])) {
        $this->backendException = $vals['backendException'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'ContractOperationHistoryService_fetchDepositOperationHistoryItemsWithLastDays_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size290 = 0;
            $_etype293 = 0;
            $xfer += $input->readListBegin($_etype293, $_size290);
            for ($_i294 = 0; $_i294 < $_size290; ++$_i294)
            {
              $elem295 = null;
              $elem295 = new \DepositContractOperationHistoryItem();
              $xfer += $elem295->read($input);
              $this->success []= $elem295;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->requestError = new \PeriodIsLargeException();
            $xfer += $this->requestError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->backendException = new \BackendValidationException();
            $xfer += $this->backendException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractOperationHistoryService_fetchDepositOperationHistoryItemsWithLastDays_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter296)
          {
            $xfer += $iter296->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestError !== null) {
      $xfer += $output->writeFieldBegin('requestError', TType::STRUCT, 2);
      $xfer += $this->requestError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 3);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 4);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendException !== null) {
      $xfer += $output->writeFieldBegin('backendException', TType::STRUCT, 6);
      $xfer += $this->backendException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 7);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractOperationHistoryService_fetchCreditOperationHistoryItemsWithFromToDate_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $creditContractId = null;
  /**
   * @var \OperationHistoryFilter
   */
  public $operationHistoryFilter = null;
  /**
   * @var int
   */
  public $dateFrom = null;
  /**
   * @var int
   */
  public $dateTo = null;
  /**
   * @var \Attributes
   */
  public $attr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'creditContractId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'operationHistoryFilter',
          'type' => TType::STRUCT,
          'class' => '\OperationHistoryFilter',
          ),
        4 => array(
          'var' => 'dateFrom',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'dateTo',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'attr',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['creditContractId'])) {
        $this->creditContractId = $vals['creditContractId'];
      }
      if (isset($vals['operationHistoryFilter'])) {
        $this->operationHistoryFilter = $vals['operationHistoryFilter'];
      }
      if (isset($vals['dateFrom'])) {
        $this->dateFrom = $vals['dateFrom'];
      }
      if (isset($vals['dateTo'])) {
        $this->dateTo = $vals['dateTo'];
      }
      if (isset($vals['attr'])) {
        $this->attr = $vals['attr'];
      }
    }
  }

  public function getName() {
    return 'ContractOperationHistoryService_fetchCreditOperationHistoryItemsWithFromToDate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->creditContractId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->operationHistoryFilter = new \OperationHistoryFilter();
            $xfer += $this->operationHistoryFilter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dateFrom);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dateTo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->attr = new \Attributes();
            $xfer += $this->attr->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractOperationHistoryService_fetchCreditOperationHistoryItemsWithFromToDate_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creditContractId !== null) {
      $xfer += $output->writeFieldBegin('creditContractId', TType::STRING, 2);
      $xfer += $output->writeString($this->creditContractId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operationHistoryFilter !== null) {
      if (!is_object($this->operationHistoryFilter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('operationHistoryFilter', TType::STRUCT, 3);
      $xfer += $this->operationHistoryFilter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateFrom !== null) {
      $xfer += $output->writeFieldBegin('dateFrom', TType::I64, 4);
      $xfer += $output->writeI64($this->dateFrom);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateTo !== null) {
      $xfer += $output->writeFieldBegin('dateTo', TType::I64, 5);
      $xfer += $output->writeI64($this->dateTo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attr !== null) {
      if (!is_object($this->attr)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attr', TType::STRUCT, 6);
      $xfer += $this->attr->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractOperationHistoryService_fetchCreditOperationHistoryItemsWithFromToDate_result {
  static $_TSPEC;

  /**
   * @var \CreditContractOperationHistoryItem[]
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \PeriodIsLargeException
   */
  public $requestError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * client_not_found - не найден клиент
   * contract_not_found - не найден контракт
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * 
   * @var \BackendValidationException
   */
  public $backendException = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\CreditContractOperationHistoryItem',
            ),
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'requestError',
          'type' => TType::STRUCT,
          'class' => '\PeriodIsLargeException',
          ),
        3 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        4 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'backendException',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        7 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['requestError'])) {
        $this->requestError = $vals['requestError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['backendException'])) {
        $this->backendException = $vals['backendException'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'ContractOperationHistoryService_fetchCreditOperationHistoryItemsWithFromToDate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size297 = 0;
            $_etype300 = 0;
            $xfer += $input->readListBegin($_etype300, $_size297);
            for ($_i301 = 0; $_i301 < $_size297; ++$_i301)
            {
              $elem302 = null;
              $elem302 = new \CreditContractOperationHistoryItem();
              $xfer += $elem302->read($input);
              $this->success []= $elem302;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->requestError = new \PeriodIsLargeException();
            $xfer += $this->requestError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->backendException = new \BackendValidationException();
            $xfer += $this->backendException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractOperationHistoryService_fetchCreditOperationHistoryItemsWithFromToDate_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter303)
          {
            $xfer += $iter303->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestError !== null) {
      $xfer += $output->writeFieldBegin('requestError', TType::STRUCT, 2);
      $xfer += $this->requestError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 3);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 4);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendException !== null) {
      $xfer += $output->writeFieldBegin('backendException', TType::STRUCT, 6);
      $xfer += $this->backendException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 7);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractOperationHistoryService_fetchCreditOperationHistoryItemsWithLastDays_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $creditContractId = null;
  /**
   * @var \OperationHistoryFilter
   */
  public $operationHistoryFilter = null;
  /**
   * @var int
   */
  public $lastDays = null;
  /**
   * @var \Attributes
   */
  public $attr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'creditContractId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'operationHistoryFilter',
          'type' => TType::STRUCT,
          'class' => '\OperationHistoryFilter',
          ),
        4 => array(
          'var' => 'lastDays',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'attr',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['creditContractId'])) {
        $this->creditContractId = $vals['creditContractId'];
      }
      if (isset($vals['operationHistoryFilter'])) {
        $this->operationHistoryFilter = $vals['operationHistoryFilter'];
      }
      if (isset($vals['lastDays'])) {
        $this->lastDays = $vals['lastDays'];
      }
      if (isset($vals['attr'])) {
        $this->attr = $vals['attr'];
      }
    }
  }

  public function getName() {
    return 'ContractOperationHistoryService_fetchCreditOperationHistoryItemsWithLastDays_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->creditContractId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->operationHistoryFilter = new \OperationHistoryFilter();
            $xfer += $this->operationHistoryFilter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->lastDays);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->attr = new \Attributes();
            $xfer += $this->attr->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractOperationHistoryService_fetchCreditOperationHistoryItemsWithLastDays_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creditContractId !== null) {
      $xfer += $output->writeFieldBegin('creditContractId', TType::STRING, 2);
      $xfer += $output->writeString($this->creditContractId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operationHistoryFilter !== null) {
      if (!is_object($this->operationHistoryFilter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('operationHistoryFilter', TType::STRUCT, 3);
      $xfer += $this->operationHistoryFilter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastDays !== null) {
      $xfer += $output->writeFieldBegin('lastDays', TType::I64, 4);
      $xfer += $output->writeI64($this->lastDays);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attr !== null) {
      if (!is_object($this->attr)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attr', TType::STRUCT, 5);
      $xfer += $this->attr->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractOperationHistoryService_fetchCreditOperationHistoryItemsWithLastDays_result {
  static $_TSPEC;

  /**
   * @var \CreditContractOperationHistoryItem[]
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \PeriodIsLargeException
   */
  public $requestError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * client_not_found - не найден клиент
   * contract_not_found - не найден контракт
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * 
   * @var \BackendValidationException
   */
  public $backendException = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\CreditContractOperationHistoryItem',
            ),
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'requestError',
          'type' => TType::STRUCT,
          'class' => '\PeriodIsLargeException',
          ),
        3 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        4 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'backendException',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        7 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['requestError'])) {
        $this->requestError = $vals['requestError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['backendException'])) {
        $this->backendException = $vals['backendException'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'ContractOperationHistoryService_fetchCreditOperationHistoryItemsWithLastDays_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size304 = 0;
            $_etype307 = 0;
            $xfer += $input->readListBegin($_etype307, $_size304);
            for ($_i308 = 0; $_i308 < $_size304; ++$_i308)
            {
              $elem309 = null;
              $elem309 = new \CreditContractOperationHistoryItem();
              $xfer += $elem309->read($input);
              $this->success []= $elem309;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->requestError = new \PeriodIsLargeException();
            $xfer += $this->requestError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->backendException = new \BackendValidationException();
            $xfer += $this->backendException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractOperationHistoryService_fetchCreditOperationHistoryItemsWithLastDays_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter310)
          {
            $xfer += $iter310->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestError !== null) {
      $xfer += $output->writeFieldBegin('requestError', TType::STRUCT, 2);
      $xfer += $this->requestError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 3);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 4);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendException !== null) {
      $xfer += $output->writeFieldBegin('backendException', TType::STRUCT, 6);
      $xfer += $this->backendException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 7);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractOperationHistoryService_fetchReportCardContractOperationHistoryItemsWithFromToDate_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $cardContractId = null;
  /**
   * @var \OperationHistoryFilter
   */
  public $operationHistoryFilter = null;
  /**
   * @var int
   */
  public $dateFrom = null;
  /**
   * @var int
   */
  public $dateTo = null;
  /**
   * @var \Attributes
   */
  public $attr = null;
  /**
   * @var \ReportOptions
   */
  public $options = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cardContractId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'operationHistoryFilter',
          'type' => TType::STRUCT,
          'class' => '\OperationHistoryFilter',
          ),
        4 => array(
          'var' => 'dateFrom',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'dateTo',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'attr',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        7 => array(
          'var' => 'options',
          'type' => TType::STRUCT,
          'class' => '\ReportOptions',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['cardContractId'])) {
        $this->cardContractId = $vals['cardContractId'];
      }
      if (isset($vals['operationHistoryFilter'])) {
        $this->operationHistoryFilter = $vals['operationHistoryFilter'];
      }
      if (isset($vals['dateFrom'])) {
        $this->dateFrom = $vals['dateFrom'];
      }
      if (isset($vals['dateTo'])) {
        $this->dateTo = $vals['dateTo'];
      }
      if (isset($vals['attr'])) {
        $this->attr = $vals['attr'];
      }
      if (isset($vals['options'])) {
        $this->options = $vals['options'];
      }
    }
  }

  public function getName() {
    return 'ContractOperationHistoryService_fetchReportCardContractOperationHistoryItemsWithFromToDate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cardContractId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->operationHistoryFilter = new \OperationHistoryFilter();
            $xfer += $this->operationHistoryFilter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dateFrom);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dateTo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->attr = new \Attributes();
            $xfer += $this->attr->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->options = new \ReportOptions();
            $xfer += $this->options->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractOperationHistoryService_fetchReportCardContractOperationHistoryItemsWithFromToDate_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardContractId !== null) {
      $xfer += $output->writeFieldBegin('cardContractId', TType::STRING, 2);
      $xfer += $output->writeString($this->cardContractId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operationHistoryFilter !== null) {
      if (!is_object($this->operationHistoryFilter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('operationHistoryFilter', TType::STRUCT, 3);
      $xfer += $this->operationHistoryFilter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateFrom !== null) {
      $xfer += $output->writeFieldBegin('dateFrom', TType::I64, 4);
      $xfer += $output->writeI64($this->dateFrom);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateTo !== null) {
      $xfer += $output->writeFieldBegin('dateTo', TType::I64, 5);
      $xfer += $output->writeI64($this->dateTo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attr !== null) {
      if (!is_object($this->attr)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attr', TType::STRUCT, 6);
      $xfer += $this->attr->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->options !== null) {
      if (!is_object($this->options)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('options', TType::STRUCT, 7);
      $xfer += $this->options->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractOperationHistoryService_fetchReportCardContractOperationHistoryItemsWithFromToDate_result {
  static $_TSPEC;

  /**
   * @var \Base64BinaryData
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \PeriodIsLargeException
   */
  public $requestError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * client_not_found - не найден клиент
   * contract_not_found - не найден контракт
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * 
   * @var \BackendValidationException
   */
  public $backendException = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Base64BinaryData',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'requestError',
          'type' => TType::STRUCT,
          'class' => '\PeriodIsLargeException',
          ),
        3 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        4 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'backendException',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        7 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['requestError'])) {
        $this->requestError = $vals['requestError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['backendException'])) {
        $this->backendException = $vals['backendException'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'ContractOperationHistoryService_fetchReportCardContractOperationHistoryItemsWithFromToDate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Base64BinaryData();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->requestError = new \PeriodIsLargeException();
            $xfer += $this->requestError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->backendException = new \BackendValidationException();
            $xfer += $this->backendException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractOperationHistoryService_fetchReportCardContractOperationHistoryItemsWithFromToDate_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestError !== null) {
      $xfer += $output->writeFieldBegin('requestError', TType::STRUCT, 2);
      $xfer += $this->requestError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 3);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 4);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendException !== null) {
      $xfer += $output->writeFieldBegin('backendException', TType::STRUCT, 6);
      $xfer += $this->backendException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 7);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractOperationHistoryService_fetchReportCardContractOperationHistoryItemsWithLastDays_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $cardContractId = null;
  /**
   * @var \OperationHistoryFilter
   */
  public $operationHistoryFilter = null;
  /**
   * @var int
   */
  public $lastDays = null;
  /**
   * @var \Attributes
   */
  public $attr = null;
  /**
   * @var \ReportOptions
   */
  public $options = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cardContractId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'operationHistoryFilter',
          'type' => TType::STRUCT,
          'class' => '\OperationHistoryFilter',
          ),
        4 => array(
          'var' => 'lastDays',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'attr',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        6 => array(
          'var' => 'options',
          'type' => TType::STRUCT,
          'class' => '\ReportOptions',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['cardContractId'])) {
        $this->cardContractId = $vals['cardContractId'];
      }
      if (isset($vals['operationHistoryFilter'])) {
        $this->operationHistoryFilter = $vals['operationHistoryFilter'];
      }
      if (isset($vals['lastDays'])) {
        $this->lastDays = $vals['lastDays'];
      }
      if (isset($vals['attr'])) {
        $this->attr = $vals['attr'];
      }
      if (isset($vals['options'])) {
        $this->options = $vals['options'];
      }
    }
  }

  public function getName() {
    return 'ContractOperationHistoryService_fetchReportCardContractOperationHistoryItemsWithLastDays_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cardContractId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->operationHistoryFilter = new \OperationHistoryFilter();
            $xfer += $this->operationHistoryFilter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->lastDays);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->attr = new \Attributes();
            $xfer += $this->attr->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->options = new \ReportOptions();
            $xfer += $this->options->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractOperationHistoryService_fetchReportCardContractOperationHistoryItemsWithLastDays_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardContractId !== null) {
      $xfer += $output->writeFieldBegin('cardContractId', TType::STRING, 2);
      $xfer += $output->writeString($this->cardContractId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operationHistoryFilter !== null) {
      if (!is_object($this->operationHistoryFilter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('operationHistoryFilter', TType::STRUCT, 3);
      $xfer += $this->operationHistoryFilter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastDays !== null) {
      $xfer += $output->writeFieldBegin('lastDays', TType::I64, 4);
      $xfer += $output->writeI64($this->lastDays);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attr !== null) {
      if (!is_object($this->attr)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attr', TType::STRUCT, 5);
      $xfer += $this->attr->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->options !== null) {
      if (!is_object($this->options)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('options', TType::STRUCT, 6);
      $xfer += $this->options->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractOperationHistoryService_fetchReportCardContractOperationHistoryItemsWithLastDays_result {
  static $_TSPEC;

  /**
   * @var \Base64BinaryData
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \PeriodIsLargeException
   */
  public $requestError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * client_not_found - не найден клиент
   * contract_not_found - не найден контракт
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * 
   * @var \BackendValidationException
   */
  public $backendException = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Base64BinaryData',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'requestError',
          'type' => TType::STRUCT,
          'class' => '\PeriodIsLargeException',
          ),
        3 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        4 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'backendException',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        7 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['requestError'])) {
        $this->requestError = $vals['requestError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['backendException'])) {
        $this->backendException = $vals['backendException'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'ContractOperationHistoryService_fetchReportCardContractOperationHistoryItemsWithLastDays_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Base64BinaryData();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->requestError = new \PeriodIsLargeException();
            $xfer += $this->requestError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->backendException = new \BackendValidationException();
            $xfer += $this->backendException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractOperationHistoryService_fetchReportCardContractOperationHistoryItemsWithLastDays_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestError !== null) {
      $xfer += $output->writeFieldBegin('requestError', TType::STRUCT, 2);
      $xfer += $this->requestError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 3);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 4);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendException !== null) {
      $xfer += $output->writeFieldBegin('backendException', TType::STRUCT, 6);
      $xfer += $this->backendException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 7);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractOperationHistoryService_fetchReportAccountOperationHistoryItemsWithFromToDate_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $accountContractId = null;
  /**
   * @var \OperationHistoryFilter
   */
  public $operationHistoryFilter = null;
  /**
   * @var int
   */
  public $dateFrom = null;
  /**
   * @var int
   */
  public $dateTo = null;
  /**
   * @var \Attributes
   */
  public $attr = null;
  /**
   * @var \ReportOptions
   */
  public $options = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'accountContractId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'operationHistoryFilter',
          'type' => TType::STRUCT,
          'class' => '\OperationHistoryFilter',
          ),
        4 => array(
          'var' => 'dateFrom',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'dateTo',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'attr',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        7 => array(
          'var' => 'options',
          'type' => TType::STRUCT,
          'class' => '\ReportOptions',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['accountContractId'])) {
        $this->accountContractId = $vals['accountContractId'];
      }
      if (isset($vals['operationHistoryFilter'])) {
        $this->operationHistoryFilter = $vals['operationHistoryFilter'];
      }
      if (isset($vals['dateFrom'])) {
        $this->dateFrom = $vals['dateFrom'];
      }
      if (isset($vals['dateTo'])) {
        $this->dateTo = $vals['dateTo'];
      }
      if (isset($vals['attr'])) {
        $this->attr = $vals['attr'];
      }
      if (isset($vals['options'])) {
        $this->options = $vals['options'];
      }
    }
  }

  public function getName() {
    return 'ContractOperationHistoryService_fetchReportAccountOperationHistoryItemsWithFromToDate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accountContractId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->operationHistoryFilter = new \OperationHistoryFilter();
            $xfer += $this->operationHistoryFilter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dateFrom);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dateTo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->attr = new \Attributes();
            $xfer += $this->attr->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->options = new \ReportOptions();
            $xfer += $this->options->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractOperationHistoryService_fetchReportAccountOperationHistoryItemsWithFromToDate_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accountContractId !== null) {
      $xfer += $output->writeFieldBegin('accountContractId', TType::STRING, 2);
      $xfer += $output->writeString($this->accountContractId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operationHistoryFilter !== null) {
      if (!is_object($this->operationHistoryFilter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('operationHistoryFilter', TType::STRUCT, 3);
      $xfer += $this->operationHistoryFilter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateFrom !== null) {
      $xfer += $output->writeFieldBegin('dateFrom', TType::I64, 4);
      $xfer += $output->writeI64($this->dateFrom);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateTo !== null) {
      $xfer += $output->writeFieldBegin('dateTo', TType::I64, 5);
      $xfer += $output->writeI64($this->dateTo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attr !== null) {
      if (!is_object($this->attr)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attr', TType::STRUCT, 6);
      $xfer += $this->attr->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->options !== null) {
      if (!is_object($this->options)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('options', TType::STRUCT, 7);
      $xfer += $this->options->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractOperationHistoryService_fetchReportAccountOperationHistoryItemsWithFromToDate_result {
  static $_TSPEC;

  /**
   * @var \Base64BinaryData
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \PeriodIsLargeException
   */
  public $requestError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * client_not_found - не найден клиент
   * contract_not_found - не найден контракт
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * 
   * @var \BackendValidationException
   */
  public $backendException = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Base64BinaryData',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'requestError',
          'type' => TType::STRUCT,
          'class' => '\PeriodIsLargeException',
          ),
        3 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        4 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'backendException',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['requestError'])) {
        $this->requestError = $vals['requestError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['backendException'])) {
        $this->backendException = $vals['backendException'];
      }
    }
  }

  public function getName() {
    return 'ContractOperationHistoryService_fetchReportAccountOperationHistoryItemsWithFromToDate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Base64BinaryData();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->requestError = new \PeriodIsLargeException();
            $xfer += $this->requestError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->backendException = new \BackendValidationException();
            $xfer += $this->backendException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractOperationHistoryService_fetchReportAccountOperationHistoryItemsWithFromToDate_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestError !== null) {
      $xfer += $output->writeFieldBegin('requestError', TType::STRUCT, 2);
      $xfer += $this->requestError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 3);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 4);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendException !== null) {
      $xfer += $output->writeFieldBegin('backendException', TType::STRUCT, 6);
      $xfer += $this->backendException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractOperationHistoryService_fetchReportAccountOperationHistoryItemsWithLastDays_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $accountContractId = null;
  /**
   * @var \OperationHistoryFilter
   */
  public $operationHistoryFilter = null;
  /**
   * @var int
   */
  public $lastDays = null;
  /**
   * @var \Attributes
   */
  public $attr = null;
  /**
   * @var \ReportOptions
   */
  public $options = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'accountContractId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'operationHistoryFilter',
          'type' => TType::STRUCT,
          'class' => '\OperationHistoryFilter',
          ),
        4 => array(
          'var' => 'lastDays',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'attr',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        6 => array(
          'var' => 'options',
          'type' => TType::STRUCT,
          'class' => '\ReportOptions',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['accountContractId'])) {
        $this->accountContractId = $vals['accountContractId'];
      }
      if (isset($vals['operationHistoryFilter'])) {
        $this->operationHistoryFilter = $vals['operationHistoryFilter'];
      }
      if (isset($vals['lastDays'])) {
        $this->lastDays = $vals['lastDays'];
      }
      if (isset($vals['attr'])) {
        $this->attr = $vals['attr'];
      }
      if (isset($vals['options'])) {
        $this->options = $vals['options'];
      }
    }
  }

  public function getName() {
    return 'ContractOperationHistoryService_fetchReportAccountOperationHistoryItemsWithLastDays_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accountContractId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->operationHistoryFilter = new \OperationHistoryFilter();
            $xfer += $this->operationHistoryFilter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->lastDays);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->attr = new \Attributes();
            $xfer += $this->attr->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->options = new \ReportOptions();
            $xfer += $this->options->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractOperationHistoryService_fetchReportAccountOperationHistoryItemsWithLastDays_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accountContractId !== null) {
      $xfer += $output->writeFieldBegin('accountContractId', TType::STRING, 2);
      $xfer += $output->writeString($this->accountContractId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operationHistoryFilter !== null) {
      if (!is_object($this->operationHistoryFilter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('operationHistoryFilter', TType::STRUCT, 3);
      $xfer += $this->operationHistoryFilter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastDays !== null) {
      $xfer += $output->writeFieldBegin('lastDays', TType::I64, 4);
      $xfer += $output->writeI64($this->lastDays);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attr !== null) {
      if (!is_object($this->attr)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attr', TType::STRUCT, 5);
      $xfer += $this->attr->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->options !== null) {
      if (!is_object($this->options)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('options', TType::STRUCT, 6);
      $xfer += $this->options->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractOperationHistoryService_fetchReportAccountOperationHistoryItemsWithLastDays_result {
  static $_TSPEC;

  /**
   * @var \Base64BinaryData
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \PeriodIsLargeException
   */
  public $requestError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * client_not_found - не найден клиент
   * contract_not_found - не найден контракт
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * 
   * @var \BackendValidationException
   */
  public $backendException = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Base64BinaryData',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'requestError',
          'type' => TType::STRUCT,
          'class' => '\PeriodIsLargeException',
          ),
        3 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        4 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'backendException',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        7 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['requestError'])) {
        $this->requestError = $vals['requestError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['backendException'])) {
        $this->backendException = $vals['backendException'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'ContractOperationHistoryService_fetchReportAccountOperationHistoryItemsWithLastDays_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Base64BinaryData();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->requestError = new \PeriodIsLargeException();
            $xfer += $this->requestError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->backendException = new \BackendValidationException();
            $xfer += $this->backendException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractOperationHistoryService_fetchReportAccountOperationHistoryItemsWithLastDays_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestError !== null) {
      $xfer += $output->writeFieldBegin('requestError', TType::STRUCT, 2);
      $xfer += $this->requestError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 3);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 4);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendException !== null) {
      $xfer += $output->writeFieldBegin('backendException', TType::STRUCT, 6);
      $xfer += $this->backendException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 7);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractOperationHistoryService_fetchReportDepositOperationHistoryItemsWithFromToDate_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $depositContractId = null;
  /**
   * @var \OperationHistoryFilter
   */
  public $operationHistoryFilter = null;
  /**
   * @var int
   */
  public $dateFrom = null;
  /**
   * @var int
   */
  public $dateTo = null;
  /**
   * @var \Attributes
   */
  public $attr = null;
  /**
   * @var \ReportOptions
   */
  public $options = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'depositContractId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'operationHistoryFilter',
          'type' => TType::STRUCT,
          'class' => '\OperationHistoryFilter',
          ),
        4 => array(
          'var' => 'dateFrom',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'dateTo',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'attr',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        7 => array(
          'var' => 'options',
          'type' => TType::STRUCT,
          'class' => '\ReportOptions',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['depositContractId'])) {
        $this->depositContractId = $vals['depositContractId'];
      }
      if (isset($vals['operationHistoryFilter'])) {
        $this->operationHistoryFilter = $vals['operationHistoryFilter'];
      }
      if (isset($vals['dateFrom'])) {
        $this->dateFrom = $vals['dateFrom'];
      }
      if (isset($vals['dateTo'])) {
        $this->dateTo = $vals['dateTo'];
      }
      if (isset($vals['attr'])) {
        $this->attr = $vals['attr'];
      }
      if (isset($vals['options'])) {
        $this->options = $vals['options'];
      }
    }
  }

  public function getName() {
    return 'ContractOperationHistoryService_fetchReportDepositOperationHistoryItemsWithFromToDate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->depositContractId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->operationHistoryFilter = new \OperationHistoryFilter();
            $xfer += $this->operationHistoryFilter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dateFrom);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dateTo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->attr = new \Attributes();
            $xfer += $this->attr->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->options = new \ReportOptions();
            $xfer += $this->options->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractOperationHistoryService_fetchReportDepositOperationHistoryItemsWithFromToDate_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->depositContractId !== null) {
      $xfer += $output->writeFieldBegin('depositContractId', TType::STRING, 2);
      $xfer += $output->writeString($this->depositContractId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operationHistoryFilter !== null) {
      if (!is_object($this->operationHistoryFilter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('operationHistoryFilter', TType::STRUCT, 3);
      $xfer += $this->operationHistoryFilter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateFrom !== null) {
      $xfer += $output->writeFieldBegin('dateFrom', TType::I64, 4);
      $xfer += $output->writeI64($this->dateFrom);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateTo !== null) {
      $xfer += $output->writeFieldBegin('dateTo', TType::I64, 5);
      $xfer += $output->writeI64($this->dateTo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attr !== null) {
      if (!is_object($this->attr)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attr', TType::STRUCT, 6);
      $xfer += $this->attr->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->options !== null) {
      if (!is_object($this->options)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('options', TType::STRUCT, 7);
      $xfer += $this->options->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractOperationHistoryService_fetchReportDepositOperationHistoryItemsWithFromToDate_result {
  static $_TSPEC;

  /**
   * @var \Base64BinaryData
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \PeriodIsLargeException
   */
  public $requestError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * client_not_found - не найден клиент
   * contract_not_found - не найден контракт
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * 
   * @var \BackendValidationException
   */
  public $backendException = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Base64BinaryData',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'requestError',
          'type' => TType::STRUCT,
          'class' => '\PeriodIsLargeException',
          ),
        3 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        4 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'backendException',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        7 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['requestError'])) {
        $this->requestError = $vals['requestError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['backendException'])) {
        $this->backendException = $vals['backendException'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'ContractOperationHistoryService_fetchReportDepositOperationHistoryItemsWithFromToDate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Base64BinaryData();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->requestError = new \PeriodIsLargeException();
            $xfer += $this->requestError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->backendException = new \BackendValidationException();
            $xfer += $this->backendException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractOperationHistoryService_fetchReportDepositOperationHistoryItemsWithFromToDate_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestError !== null) {
      $xfer += $output->writeFieldBegin('requestError', TType::STRUCT, 2);
      $xfer += $this->requestError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 3);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 4);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendException !== null) {
      $xfer += $output->writeFieldBegin('backendException', TType::STRUCT, 6);
      $xfer += $this->backendException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 7);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractOperationHistoryService_fetchReportDepositOperationHistoryItemsWithLastDays_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $depositContractId = null;
  /**
   * @var \OperationHistoryFilter
   */
  public $operationHistoryFilter = null;
  /**
   * @var int
   */
  public $lastDays = null;
  /**
   * @var \Attributes
   */
  public $attr = null;
  /**
   * @var \ReportOptions
   */
  public $options = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'depositContractId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'operationHistoryFilter',
          'type' => TType::STRUCT,
          'class' => '\OperationHistoryFilter',
          ),
        4 => array(
          'var' => 'lastDays',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'attr',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        6 => array(
          'var' => 'options',
          'type' => TType::STRUCT,
          'class' => '\ReportOptions',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['depositContractId'])) {
        $this->depositContractId = $vals['depositContractId'];
      }
      if (isset($vals['operationHistoryFilter'])) {
        $this->operationHistoryFilter = $vals['operationHistoryFilter'];
      }
      if (isset($vals['lastDays'])) {
        $this->lastDays = $vals['lastDays'];
      }
      if (isset($vals['attr'])) {
        $this->attr = $vals['attr'];
      }
      if (isset($vals['options'])) {
        $this->options = $vals['options'];
      }
    }
  }

  public function getName() {
    return 'ContractOperationHistoryService_fetchReportDepositOperationHistoryItemsWithLastDays_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->depositContractId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->operationHistoryFilter = new \OperationHistoryFilter();
            $xfer += $this->operationHistoryFilter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->lastDays);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->attr = new \Attributes();
            $xfer += $this->attr->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->options = new \ReportOptions();
            $xfer += $this->options->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractOperationHistoryService_fetchReportDepositOperationHistoryItemsWithLastDays_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->depositContractId !== null) {
      $xfer += $output->writeFieldBegin('depositContractId', TType::STRING, 2);
      $xfer += $output->writeString($this->depositContractId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operationHistoryFilter !== null) {
      if (!is_object($this->operationHistoryFilter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('operationHistoryFilter', TType::STRUCT, 3);
      $xfer += $this->operationHistoryFilter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastDays !== null) {
      $xfer += $output->writeFieldBegin('lastDays', TType::I64, 4);
      $xfer += $output->writeI64($this->lastDays);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attr !== null) {
      if (!is_object($this->attr)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attr', TType::STRUCT, 5);
      $xfer += $this->attr->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->options !== null) {
      if (!is_object($this->options)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('options', TType::STRUCT, 6);
      $xfer += $this->options->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractOperationHistoryService_fetchReportDepositOperationHistoryItemsWithLastDays_result {
  static $_TSPEC;

  /**
   * @var \Base64BinaryData
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \PeriodIsLargeException
   */
  public $requestError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * client_not_found - не найден клиент
   * contract_not_found - не найден контракт
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * 
   * @var \BackendValidationException
   */
  public $backendException = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Base64BinaryData',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'requestError',
          'type' => TType::STRUCT,
          'class' => '\PeriodIsLargeException',
          ),
        3 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        4 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'backendException',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        7 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['requestError'])) {
        $this->requestError = $vals['requestError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['backendException'])) {
        $this->backendException = $vals['backendException'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'ContractOperationHistoryService_fetchReportDepositOperationHistoryItemsWithLastDays_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Base64BinaryData();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->requestError = new \PeriodIsLargeException();
            $xfer += $this->requestError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->backendException = new \BackendValidationException();
            $xfer += $this->backendException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractOperationHistoryService_fetchReportDepositOperationHistoryItemsWithLastDays_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestError !== null) {
      $xfer += $output->writeFieldBegin('requestError', TType::STRUCT, 2);
      $xfer += $this->requestError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 3);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 4);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendException !== null) {
      $xfer += $output->writeFieldBegin('backendException', TType::STRUCT, 6);
      $xfer += $this->backendException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 7);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractOperationHistoryService_fetchReportCreditOperationHistoryItemsWithFromToDate_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $creditContractId = null;
  /**
   * @var \OperationHistoryFilter
   */
  public $operationHistoryFilter = null;
  /**
   * @var int
   */
  public $dateFrom = null;
  /**
   * @var int
   */
  public $dateTo = null;
  /**
   * @var \Attributes
   */
  public $attr = null;
  /**
   * @var \ReportOptions
   */
  public $options = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'creditContractId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'operationHistoryFilter',
          'type' => TType::STRUCT,
          'class' => '\OperationHistoryFilter',
          ),
        4 => array(
          'var' => 'dateFrom',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'dateTo',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'attr',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        7 => array(
          'var' => 'options',
          'type' => TType::STRUCT,
          'class' => '\ReportOptions',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['creditContractId'])) {
        $this->creditContractId = $vals['creditContractId'];
      }
      if (isset($vals['operationHistoryFilter'])) {
        $this->operationHistoryFilter = $vals['operationHistoryFilter'];
      }
      if (isset($vals['dateFrom'])) {
        $this->dateFrom = $vals['dateFrom'];
      }
      if (isset($vals['dateTo'])) {
        $this->dateTo = $vals['dateTo'];
      }
      if (isset($vals['attr'])) {
        $this->attr = $vals['attr'];
      }
      if (isset($vals['options'])) {
        $this->options = $vals['options'];
      }
    }
  }

  public function getName() {
    return 'ContractOperationHistoryService_fetchReportCreditOperationHistoryItemsWithFromToDate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->creditContractId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->operationHistoryFilter = new \OperationHistoryFilter();
            $xfer += $this->operationHistoryFilter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dateFrom);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dateTo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->attr = new \Attributes();
            $xfer += $this->attr->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->options = new \ReportOptions();
            $xfer += $this->options->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractOperationHistoryService_fetchReportCreditOperationHistoryItemsWithFromToDate_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creditContractId !== null) {
      $xfer += $output->writeFieldBegin('creditContractId', TType::STRING, 2);
      $xfer += $output->writeString($this->creditContractId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operationHistoryFilter !== null) {
      if (!is_object($this->operationHistoryFilter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('operationHistoryFilter', TType::STRUCT, 3);
      $xfer += $this->operationHistoryFilter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateFrom !== null) {
      $xfer += $output->writeFieldBegin('dateFrom', TType::I64, 4);
      $xfer += $output->writeI64($this->dateFrom);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateTo !== null) {
      $xfer += $output->writeFieldBegin('dateTo', TType::I64, 5);
      $xfer += $output->writeI64($this->dateTo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attr !== null) {
      if (!is_object($this->attr)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attr', TType::STRUCT, 6);
      $xfer += $this->attr->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->options !== null) {
      if (!is_object($this->options)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('options', TType::STRUCT, 7);
      $xfer += $this->options->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractOperationHistoryService_fetchReportCreditOperationHistoryItemsWithFromToDate_result {
  static $_TSPEC;

  /**
   * @var \Base64BinaryData
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \PeriodIsLargeException
   */
  public $requestError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * client_not_found - не найден клиент
   * contract_not_found - не найден контракт
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * 
   * @var \BackendValidationException
   */
  public $backendException = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Base64BinaryData',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'requestError',
          'type' => TType::STRUCT,
          'class' => '\PeriodIsLargeException',
          ),
        3 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        4 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'backendException',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        7 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['requestError'])) {
        $this->requestError = $vals['requestError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['backendException'])) {
        $this->backendException = $vals['backendException'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'ContractOperationHistoryService_fetchReportCreditOperationHistoryItemsWithFromToDate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Base64BinaryData();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->requestError = new \PeriodIsLargeException();
            $xfer += $this->requestError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->backendException = new \BackendValidationException();
            $xfer += $this->backendException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractOperationHistoryService_fetchReportCreditOperationHistoryItemsWithFromToDate_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestError !== null) {
      $xfer += $output->writeFieldBegin('requestError', TType::STRUCT, 2);
      $xfer += $this->requestError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 3);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 4);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendException !== null) {
      $xfer += $output->writeFieldBegin('backendException', TType::STRUCT, 6);
      $xfer += $this->backendException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 7);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractOperationHistoryService_fetchReportCreditOperationHistoryItemsWithLastDays_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $creditContractId = null;
  /**
   * @var \OperationHistoryFilter
   */
  public $operationHistoryFilter = null;
  /**
   * @var int
   */
  public $lastDays = null;
  /**
   * @var \Attributes
   */
  public $attr = null;
  /**
   * @var \ReportOptions
   */
  public $options = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'creditContractId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'operationHistoryFilter',
          'type' => TType::STRUCT,
          'class' => '\OperationHistoryFilter',
          ),
        4 => array(
          'var' => 'lastDays',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'attr',
          'type' => TType::STRUCT,
          'class' => '\Attributes',
          ),
        6 => array(
          'var' => 'options',
          'type' => TType::STRUCT,
          'class' => '\ReportOptions',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['creditContractId'])) {
        $this->creditContractId = $vals['creditContractId'];
      }
      if (isset($vals['operationHistoryFilter'])) {
        $this->operationHistoryFilter = $vals['operationHistoryFilter'];
      }
      if (isset($vals['lastDays'])) {
        $this->lastDays = $vals['lastDays'];
      }
      if (isset($vals['attr'])) {
        $this->attr = $vals['attr'];
      }
      if (isset($vals['options'])) {
        $this->options = $vals['options'];
      }
    }
  }

  public function getName() {
    return 'ContractOperationHistoryService_fetchReportCreditOperationHistoryItemsWithLastDays_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->creditContractId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->operationHistoryFilter = new \OperationHistoryFilter();
            $xfer += $this->operationHistoryFilter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->lastDays);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->attr = new \Attributes();
            $xfer += $this->attr->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->options = new \ReportOptions();
            $xfer += $this->options->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractOperationHistoryService_fetchReportCreditOperationHistoryItemsWithLastDays_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creditContractId !== null) {
      $xfer += $output->writeFieldBegin('creditContractId', TType::STRING, 2);
      $xfer += $output->writeString($this->creditContractId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operationHistoryFilter !== null) {
      if (!is_object($this->operationHistoryFilter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('operationHistoryFilter', TType::STRUCT, 3);
      $xfer += $this->operationHistoryFilter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastDays !== null) {
      $xfer += $output->writeFieldBegin('lastDays', TType::I64, 4);
      $xfer += $output->writeI64($this->lastDays);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attr !== null) {
      if (!is_object($this->attr)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attr', TType::STRUCT, 5);
      $xfer += $this->attr->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->options !== null) {
      if (!is_object($this->options)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('options', TType::STRUCT, 6);
      $xfer += $this->options->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractOperationHistoryService_fetchReportCreditOperationHistoryItemsWithLastDays_result {
  static $_TSPEC;

  /**
   * @var \Base64BinaryData
   */
  public $success = null;
  /**
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   * @var \PeriodIsLargeException
   */
  public $requestError = null;
  /**
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * client_not_found - не найден клиент
   * contract_not_found - не найден контракт
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * 
   * @var \BackendValidationException
   */
  public $backendException = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Base64BinaryData',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'requestError',
          'type' => TType::STRUCT,
          'class' => '\PeriodIsLargeException',
          ),
        3 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        4 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'backendException',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        7 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['requestError'])) {
        $this->requestError = $vals['requestError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['backendException'])) {
        $this->backendException = $vals['backendException'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'ContractOperationHistoryService_fetchReportCreditOperationHistoryItemsWithLastDays_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Base64BinaryData();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->requestError = new \PeriodIsLargeException();
            $xfer += $this->requestError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->backendException = new \BackendValidationException();
            $xfer += $this->backendException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractOperationHistoryService_fetchReportCreditOperationHistoryItemsWithLastDays_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestError !== null) {
      $xfer += $output->writeFieldBegin('requestError', TType::STRUCT, 2);
      $xfer += $this->requestError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 3);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 4);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendException !== null) {
      $xfer += $output->writeFieldBegin('backendException', TType::STRUCT, 6);
      $xfer += $this->backendException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 7);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractOperationHistoryService_fetchOperationReceipt_args {
  static $_TSPEC;

  /**
   * Авторизация, получаемая методом authenticate()
   * 
   * @var string
   */
  public $token = null;
  /**
   * идентификатор любой операции (финансовой, общей или другой), однако в конкретной версии Ibank или в конкретной конфигурации, могут не поддерживаться некоторые типы операций
   * 
   * @var string
   */
  public $operationId = null;
  /**
   * опции генерации формата квитанции: описывают тип (включая custom, позволяющий создавать
   * администратору собственные разновидности вида квитанций, например "для визы"
   * (type=CUSTOM,customFormatName=for_visa) и "обычная" (type=PDF)
   * 
   * @var \ReportOptions
   */
  public $options = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'operationId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'options',
          'type' => TType::STRUCT,
          'class' => '\ReportOptions',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['operationId'])) {
        $this->operationId = $vals['operationId'];
      }
      if (isset($vals['options'])) {
        $this->options = $vals['options'];
      }
    }
  }

  public function getName() {
    return 'ContractOperationHistoryService_fetchOperationReceipt_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->operationId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->options = new \ReportOptions();
            $xfer += $this->options->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractOperationHistoryService_fetchOperationReceipt_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operationId !== null) {
      $xfer += $output->writeFieldBegin('operationId', TType::STRING, 2);
      $xfer += $output->writeString($this->operationId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->options !== null) {
      if (!is_object($this->options)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('options', TType::STRUCT, 3);
      $xfer += $this->options->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContractOperationHistoryService_fetchOperationReceipt_result {
  static $_TSPEC;

  /**
   * @var \Base64BinaryData
   */
  public $success = null;
  /**
   * ошибка проверки token
   * 
   * @var \WrongSessionException
   */
  public $sessionError = null;
  /**
   *  * operation_not_found -- если не найдено операции по этому идентификатору или эта операция не принадлежит текущему пользователю
   *  * operation_type_not_supported -- ядро в текущей весрии поддерживает не все операции, а только финансовые
   *  * operation_report_not_configured -- отсутсвует XSLT-конфигурация отчета на сервере
   *  * custom_report_type_not_configured -- отсутсвует указанный в запросе options.customReportType для данного типа операции
   * *
   * 
   * @var \PreconditionException
   */
  public $requestError = null;
  /**
   * если нет прав read_contracts
   * 
   * @var \OperationDeniedException
   */
  public $deniedOperationError = null;
  /**
   * если нет прав read_contracts без расширенной аутентификации
   * 
   * @var \ExtendedAuthenticationRequired
   */
  public $extendedAuthenticationRequired = null;
  /**
   * технические, коммуникационные или другие непредусмотренные исключительные ситуации
   * 
   * @var \IbankServerException
   */
  public $serverError = null;
  /**
   * client_not_found - не найден клиент
   * contract_not_found - не найден контракт
   * access_forbidden запрещен доступ к чужому контракту
   * 
   * 
   * @var \BackendValidationException
   */
  public $backendException = null;
  /**
   * @var \IbankIntegrationLayerException
   */
  public $integrationError = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Base64BinaryData',
          ),
        1 => array(
          'var' => 'sessionError',
          'type' => TType::STRUCT,
          'class' => '\WrongSessionException',
          ),
        2 => array(
          'var' => 'requestError',
          'type' => TType::STRUCT,
          'class' => '\PreconditionException',
          ),
        3 => array(
          'var' => 'deniedOperationError',
          'type' => TType::STRUCT,
          'class' => '\OperationDeniedException',
          ),
        4 => array(
          'var' => 'extendedAuthenticationRequired',
          'type' => TType::STRUCT,
          'class' => '\ExtendedAuthenticationRequired',
          ),
        5 => array(
          'var' => 'serverError',
          'type' => TType::STRUCT,
          'class' => '\IbankServerException',
          ),
        6 => array(
          'var' => 'backendException',
          'type' => TType::STRUCT,
          'class' => '\BackendValidationException',
          ),
        7 => array(
          'var' => 'integrationError',
          'type' => TType::STRUCT,
          'class' => '\IbankIntegrationLayerException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sessionError'])) {
        $this->sessionError = $vals['sessionError'];
      }
      if (isset($vals['requestError'])) {
        $this->requestError = $vals['requestError'];
      }
      if (isset($vals['deniedOperationError'])) {
        $this->deniedOperationError = $vals['deniedOperationError'];
      }
      if (isset($vals['extendedAuthenticationRequired'])) {
        $this->extendedAuthenticationRequired = $vals['extendedAuthenticationRequired'];
      }
      if (isset($vals['serverError'])) {
        $this->serverError = $vals['serverError'];
      }
      if (isset($vals['backendException'])) {
        $this->backendException = $vals['backendException'];
      }
      if (isset($vals['integrationError'])) {
        $this->integrationError = $vals['integrationError'];
      }
    }
  }

  public function getName() {
    return 'ContractOperationHistoryService_fetchOperationReceipt_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Base64BinaryData();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sessionError = new \WrongSessionException();
            $xfer += $this->sessionError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->requestError = new \PreconditionException();
            $xfer += $this->requestError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->deniedOperationError = new \OperationDeniedException();
            $xfer += $this->deniedOperationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->extendedAuthenticationRequired = new \ExtendedAuthenticationRequired();
            $xfer += $this->extendedAuthenticationRequired->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->serverError = new \IbankServerException();
            $xfer += $this->serverError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->backendException = new \BackendValidationException();
            $xfer += $this->backendException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->integrationError = new \IbankIntegrationLayerException();
            $xfer += $this->integrationError->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContractOperationHistoryService_fetchOperationReceipt_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionError !== null) {
      $xfer += $output->writeFieldBegin('sessionError', TType::STRUCT, 1);
      $xfer += $this->sessionError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestError !== null) {
      $xfer += $output->writeFieldBegin('requestError', TType::STRUCT, 2);
      $xfer += $this->requestError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deniedOperationError !== null) {
      $xfer += $output->writeFieldBegin('deniedOperationError', TType::STRUCT, 3);
      $xfer += $this->deniedOperationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendedAuthenticationRequired !== null) {
      $xfer += $output->writeFieldBegin('extendedAuthenticationRequired', TType::STRUCT, 4);
      $xfer += $this->extendedAuthenticationRequired->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverError !== null) {
      $xfer += $output->writeFieldBegin('serverError', TType::STRUCT, 5);
      $xfer += $this->serverError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backendException !== null) {
      $xfer += $output->writeFieldBegin('backendException', TType::STRUCT, 6);
      $xfer += $this->backendException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integrationError !== null) {
      $xfer += $output->writeFieldBegin('integrationError', TType::STRUCT, 7);
      $xfer += $this->integrationError->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


